/*
* This file is part of Arrowgene.MonsterHunterOnline
*
* Arrowgene.MonsterHunterOnline is a server implementation for the game "Monster Hunter Online".
* Copyright (C) 2023-2024 "all contributors"
*
* Github: https://github.com/sebastian-heinz/Arrowgene.MonsterHunterOnline
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU Affero General Public License as published
*  by the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU Affero General Public License for more details.
*
*  You should have received a copy of the GNU Affero General Public License
*  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

using System.Collections.Generic;
using Arrowgene.Buffers;
using Arrowgene.Logging;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Core;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Enums;

namespace Arrowgene.MonsterHunterOnline.Service.CsProto.Structures
{

    public class CSAttrData : IStructure
    {
        private static readonly ILogger Logger = LogProvider.Logger(typeof(CSAttrData));

        public CSAttrData(CSAttrDataUnion _Value)
        {
            AttrID = 0;
            Value = _Value;
        }
        
        public CSAttrData()
        {
            AttrID = 0;
            Value = null;
        }
        
        public uint AttrID;

        /// <summary>
        /// 类型枚举
        /// </summary>

        /// <summary>
        /// 变量值
        /// </summary>
        public CSAttrDataUnion Value;

        public void Write(IBuffer buffer)
        {
            buffer.WriteUInt32(AttrID, Endianness.Big);
            buffer.WriteUInt16((ushort)Value.Type, Endianness.Big);
            Value.Write(buffer);
        }

        public void Read(IBuffer buffer)
        {
            AttrID = buffer.ReadUInt32(Endianness.Big);
            CS_ATTR_DATA_TYPE CSAttrDataUnion_Type = (CS_ATTR_DATA_TYPE)buffer.ReadUInt16(Endianness.Big);
            switch (CSAttrDataUnion_Type)
            {
                case CS_ATTR_DATA_TYPE.CS_ATTR_DATA_BASE:
                    Value = new CSAttrBaseData(null);
                    break;
                case CS_ATTR_DATA_TYPE.CS_ATTR_DATA_BONUS:
                    Value = new CSAttrBonusData();
                    break;
            }
            if (Value != null) {
                Value.Read(buffer);
            }
            else {
                Logger.Error("Failed to create 'Value' instance of type 'CSAttrDataUnion'");
            }
        }

    }
}
