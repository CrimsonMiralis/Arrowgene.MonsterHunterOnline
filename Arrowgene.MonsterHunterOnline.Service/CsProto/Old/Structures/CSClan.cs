/*
* This file is part of Arrowgene.MonsterHunterOnline
*
* Arrowgene.MonsterHunterOnline is a server implementation for the game "Monster Hunter Online".
* Copyright (C) 2023-2024 "all contributors"
*
* Github: https://github.com/sebastian-heinz/Arrowgene.MonsterHunterOnline
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU Affero General Public License as published
*  by the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU Affero General Public License for more details.
*
*  You should have received a copy of the GNU Affero General Public License
*  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

using System.Collections.Generic;
using Arrowgene.Buffers;
using Arrowgene.Logging;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Core;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Enums;

namespace Arrowgene.MonsterHunterOnline.Service.CsProto.Structures
{

    /// <summary>
    /// 战队
    /// </summary>
    public class CSClan : IStructure
    {
        private static readonly ILogger Logger = LogProvider.Logger(typeof(CSClan));

        public CSClan()
        {
            Id = 0;
            Name = "";
            Score = 0;
            Rank = 0;
            Capacity = 0;
            ClanersCount = 0;
            OnlineClanersCount = 0;
            ClanersAvgLevel = 0;
            ScoreUpdate = 0;
            PVEScore = 0;
            INDScore = 0;
            INDPV = 0;
        }

        /// <summary>
        /// 标识
        /// </summary>
        public ulong Id;

        /// <summary>
        /// 名字
        /// </summary>
        public string Name;

        /// <summary>
        /// 积分
        /// </summary>
        public int Score;

        /// <summary>
        /// 排名
        /// </summary>
        public int Rank;

        /// <summary>
        /// 战队最大人数
        /// </summary>
        public int Capacity;

        /// <summary>
        /// 队员集
        /// </summary>
        public int ClanersCount;

        /// <summary>
        /// 在线队员集
        /// </summary>
        public int OnlineClanersCount;

        /// <summary>
        /// 会员集平均等级
        /// </summary>
        public int ClanersAvgLevel;

        /// <summary>
        /// 积分更新时间
        /// </summary>
        public long ScoreUpdate;

        /// <summary>
        /// 竞速赛积分
        /// </summary>
        public int PVEScore;

        /// <summary>
        /// 间接PVP积分
        /// </summary>
        public int INDScore;

        /// <summary>
        /// 间接PVP战力
        /// </summary>
        public int INDPV;

        public void Write(IBuffer buffer)
        {
            buffer.WriteUInt64(Id, Endianness.Big);
            buffer.WriteInt32(Name.Length + 1, Endianness.Big);
            buffer.WriteCString(Name);
            buffer.WriteInt32(Score, Endianness.Big);
            buffer.WriteInt32(Rank, Endianness.Big);
            buffer.WriteInt32(Capacity, Endianness.Big);
            buffer.WriteInt32(ClanersCount, Endianness.Big);
            buffer.WriteInt32(OnlineClanersCount, Endianness.Big);
            buffer.WriteInt32(ClanersAvgLevel, Endianness.Big);
            buffer.WriteInt64(ScoreUpdate, Endianness.Big);
            buffer.WriteInt32(PVEScore, Endianness.Big);
            buffer.WriteInt32(INDScore, Endianness.Big);
            buffer.WriteInt32(INDPV, Endianness.Big);
        }

        public void Read(IBuffer buffer)
        {
            Id = buffer.ReadUInt64(Endianness.Big);
            int NameEntryLen = buffer.ReadInt32(Endianness.Big);
            Name = buffer.ReadString(NameEntryLen);
            Score = buffer.ReadInt32(Endianness.Big);
            Rank = buffer.ReadInt32(Endianness.Big);
            Capacity = buffer.ReadInt32(Endianness.Big);
            ClanersCount = buffer.ReadInt32(Endianness.Big);
            OnlineClanersCount = buffer.ReadInt32(Endianness.Big);
            ClanersAvgLevel = buffer.ReadInt32(Endianness.Big);
            ScoreUpdate = buffer.ReadInt64(Endianness.Big);
            PVEScore = buffer.ReadInt32(Endianness.Big);
            INDScore = buffer.ReadInt32(Endianness.Big);
            INDPV = buffer.ReadInt32(Endianness.Big);
        }

    }
}
