/*
* This file is part of Arrowgene.MonsterHunterOnline
*
* Arrowgene.MonsterHunterOnline is a server implementation for the game "Monster Hunter Online".
* Copyright (C) 2023-2024 "all contributors"
*
* Github: https://github.com/sebastian-heinz/Arrowgene.MonsterHunterOnline
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU Affero General Public License as published
*  by the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU Affero General Public License for more details.
*
*  You should have received a copy of the GNU Affero General Public License
*  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

using System.Collections.Generic;
using Arrowgene.Buffers;
using Arrowgene.Logging;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Core;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Enums;

namespace Arrowgene.MonsterHunterOnline.Service.CsProto.Structures
{

    public class CSFarmGatherRsp : IStructure
    {
        private static readonly ILogger Logger = LogProvider.Logger(typeof(CSFarmGatherRsp));

        public CSFarmGatherRsp()
        {
            ErrCode = 0;
            Req = new CSFarmGatherReq();
            Award = new int[10];
            AwardCount = new int[10];
            AwardErrCode = new int[10];
            ConsumeTool = 0;
            GatherLeft = 0;
            FarmExp = 0;
            AdvResult = 0;
            SkipCutScene = 0;
        }

        /// <summary>
        /// 错误码
        /// </summary>
        public int ErrCode;

        /// <summary>
        /// 设施索引
        /// </summary>
        public CSFarmGatherReq Req;

        public int[] Award;

        public int[] AwardCount;

        public int[] AwardErrCode;

        public int ConsumeTool;

        public int GatherLeft;

        /// <summary>
        /// 精算点
        /// </summary>
        public int FarmExp;

        /// <summary>
        /// 高级设施采集结果
        /// </summary>
        public byte AdvResult;

        /// <summary>
        /// 是否跳过cutscene
        /// </summary>
        public byte SkipCutScene;

        public void Write(IBuffer buffer)
        {
            buffer.WriteInt32(ErrCode, Endianness.Big);
            Req.Write(buffer);
            for (int i = 0; i < Award.Length; i++)
            {
                buffer.WriteInt32(Award[i], Endianness.Big);
            }
            for (int i = 0; i < AwardCount.Length; i++)
            {
                buffer.WriteInt32(AwardCount[i], Endianness.Big);
            }
            for (int i = 0; i < AwardErrCode.Length; i++)
            {
                buffer.WriteInt32(AwardErrCode[i], Endianness.Big);
            }
            buffer.WriteInt32(ConsumeTool, Endianness.Big);
            buffer.WriteInt32(GatherLeft, Endianness.Big);
            buffer.WriteInt32(FarmExp, Endianness.Big);
            buffer.WriteByte(AdvResult);
            buffer.WriteByte(SkipCutScene);
        }

        public void Read(IBuffer buffer)
        {
            ErrCode = buffer.ReadInt32(Endianness.Big);
            Req.Read(buffer);
            for (int i = 0; i < Award.Length; i++)
            {
                Award[i] = buffer.ReadInt32(Endianness.Big);
            }
            for (int i = 0; i < AwardCount.Length; i++)
            {
                AwardCount[i] = buffer.ReadInt32(Endianness.Big);
            }
            for (int i = 0; i < AwardErrCode.Length; i++)
            {
                AwardErrCode[i] = buffer.ReadInt32(Endianness.Big);
            }
            ConsumeTool = buffer.ReadInt32(Endianness.Big);
            GatherLeft = buffer.ReadInt32(Endianness.Big);
            FarmExp = buffer.ReadInt32(Endianness.Big);
            AdvResult = buffer.ReadByte();
            SkipCutScene = buffer.ReadByte();
        }

    }
}
