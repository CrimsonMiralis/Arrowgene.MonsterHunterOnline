/*
* This file is part of Arrowgene.MonsterHunterOnline
*
* Arrowgene.MonsterHunterOnline is a server implementation for the game "Monster Hunter Online".
* Copyright (C) 2023-2024 "all contributors"
*
* Github: https://github.com/sebastian-heinz/Arrowgene.MonsterHunterOnline
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU Affero General Public License as published
*  by the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU Affero General Public License for more details.
*
*  You should have received a copy of the GNU Affero General Public License
*  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

using System.Collections.Generic;
using Arrowgene.Buffers;
using Arrowgene.Logging;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Core;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Enums;

namespace Arrowgene.MonsterHunterOnline.Service.CsProto.Structures
{

    /// <summary>
    /// Connd测试命令
    /// </summary>
    public class CSSysConndTestReq : ICsStructure
    {
        private static readonly ILogger Logger = LogProvider.Logger(typeof(CSSysConndTestReq));

        public CSSysConndTestReq()
        {
            Send = 0;
            Freq = 0;
            SendSum = 0;
            NeedSum = 0;
            LogCount = 0;
            SvrTickCount = 0;
            Struct = new List<byte>();
        }

        /// <summary>
        /// size大小
        /// </summary>
        public uint Send;

        /// <summary>
        /// size大小
        /// </summary>
        public uint Freq;

        /// <summary>
        /// size大小
        /// </summary>
        public uint SendSum;

        /// <summary>
        /// size大小
        /// </summary>
        public uint NeedSum;

        /// <summary>
        /// 数量
        /// </summary>
        public uint LogCount;

        /// <summary>
        /// 时间
        /// </summary>
        public uint SvrTickCount;

        /// <summary>
        /// 帐号相关数据
        /// </summary>
        public List<byte> Struct;

        public void WriteCs(IBuffer buffer)
        {
            buffer.WriteUInt32(Send, Endianness.Big);
            buffer.WriteUInt32(Freq, Endianness.Big);
            buffer.WriteUInt32(SendSum, Endianness.Big);
            buffer.WriteUInt32(NeedSum, Endianness.Big);
            buffer.WriteUInt32(LogCount, Endianness.Big);
            buffer.WriteUInt32(SvrTickCount, Endianness.Big);
            uint structCount = (uint)Struct.Count;
            buffer.WriteUInt32(structCount, Endianness.Big);
            for (int i = 0; i < structCount; i++)
            {
                buffer.WriteByte(Struct[i]);
            }
        }

        public void ReadCs(IBuffer buffer)
        {
            Send = buffer.ReadUInt32(Endianness.Big);
            Freq = buffer.ReadUInt32(Endianness.Big);
            SendSum = buffer.ReadUInt32(Endianness.Big);
            NeedSum = buffer.ReadUInt32(Endianness.Big);
            LogCount = buffer.ReadUInt32(Endianness.Big);
            SvrTickCount = buffer.ReadUInt32(Endianness.Big);
            Struct.Clear();
            uint structCount = buffer.ReadUInt32(Endianness.Big);
            for (int i = 0; i < structCount; i++)
            {
                byte StructEntry = buffer.ReadByte();
                Struct.Add(StructEntry);
            }
        }

    }
}
