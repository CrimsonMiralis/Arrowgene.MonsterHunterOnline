/*
* This file is part of Arrowgene.MonsterHunterOnline
*
* Arrowgene.MonsterHunterOnline is a server implementation for the game "Monster Hunter Online".
* Copyright (C) 2023-2024 "all contributors"
*
* Github: https://github.com/sebastian-heinz/Arrowgene.MonsterHunterOnline
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU Affero General Public License as published
*  by the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU Affero General Public License for more details.
*
*  You should have received a copy of the GNU Affero General Public License
*  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

using System.Collections.Generic;
using Arrowgene.Buffers;
using Arrowgene.Logging;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Constant;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Core;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Enums;

namespace Arrowgene.MonsterHunterOnline.Service.CsProto.Structures
{

    /// <summary>
    /// 队伍信息
    /// </summary>
    public class TeamInfo : IStructure
    {
        private static readonly ILogger Logger = LogProvider.Logger(typeof(TeamInfo));

        public TeamInfo()
        {
            TeamId = 0;
            TeamName = "";
            MemberMax = 0;
            FreeJoin = 0;
            HasPwd = 0;
            Pwd = "";
            OpenRecruit = 0;
            MinLevel = 0;
            MaxLevel = 0;
            MinStar = 0;
            MaxStar = 0;
            TargetMap = 0;
            TargetMode = 0;
            TargetLevelGrp = 0;
            Difficulty = 0;
            LeaderDBID = 0;
            LeaderID = 0;
            CreateTime = 0;
            TownSvr = 0;
            BattleSvr = 0;
            Members = new List<TeamMemberInfo>();
            Slots = new uint[CsProtoConstant.CS_MAX_TEAM_MEMBER_NUM];
        }

        /// <summary>
        /// 队伍唯一标识ID
        /// </summary>
        public uint TeamId;

        /// <summary>
        /// 队伍姓名
        /// </summary>
        public string TeamName;

        /// <summary>
        /// 队伍最大人数
        /// </summary>
        public uint MemberMax;

        /// <summary>
        /// 自由入队
        /// </summary>
        public int FreeJoin;

        /// <summary>
        /// 是否有入队密码
        /// </summary>
        public short HasPwd;

        /// <summary>
        /// 入队密码
        /// </summary>
        public string Pwd;

        /// <summary>
        /// 是否允许公开招募（不允许：0；允许：1）
        /// </summary>
        public int OpenRecruit;

        /// <summary>
        /// 最小等级
        /// </summary>
        public uint MinLevel;

        /// <summary>
        /// 最高等级
        /// </summary>
        public uint MaxLevel;

        /// <summary>
        /// 最小星级
        /// </summary>
        public uint MinStar;

        /// <summary>
        /// 最高星级
        /// </summary>
        public uint MaxStar;

        /// <summary>
        /// 目标地图（即地图ID）
        /// </summary>
        public uint TargetMap;

        /// <summary>
        /// 模式
        /// </summary>
        public uint TargetMode;

        /// <summary>
        /// 关卡（即关卡组ID）
        /// </summary>
        public uint TargetLevelGrp;

        /// <summary>
        /// 目标难度
        /// </summary>
        public short Difficulty;

        /// <summary>
        /// 队长DBID
        /// </summary>
        public ulong LeaderDBID;

        /// <summary>
        /// 队长ID
        /// </summary>
        public uint LeaderID;

        /// <summary>
        /// 创建时间
        /// </summary>
        public ulong CreateTime;

        /// <summary>
        /// 城镇服务器
        /// </summary>
        public uint TownSvr;

        /// <summary>
        /// 战场服务器
        /// </summary>
        public uint BattleSvr;

        public List<TeamMemberInfo> Members;

        public uint[] Slots;

        public void Write(IBuffer buffer)
        {
            buffer.WriteUInt32(TeamId, Endianness.Big);
            buffer.WriteInt32(TeamName.Length + 1, Endianness.Big);
            buffer.WriteCString(TeamName);
            buffer.WriteUInt32(MemberMax, Endianness.Big);
            buffer.WriteInt32(FreeJoin, Endianness.Big);
            buffer.WriteInt16(HasPwd, Endianness.Big);
            buffer.WriteInt32(Pwd.Length + 1, Endianness.Big);
            buffer.WriteCString(Pwd);
            buffer.WriteInt32(OpenRecruit, Endianness.Big);
            buffer.WriteUInt32(MinLevel, Endianness.Big);
            buffer.WriteUInt32(MaxLevel, Endianness.Big);
            buffer.WriteUInt32(MinStar, Endianness.Big);
            buffer.WriteUInt32(MaxStar, Endianness.Big);
            buffer.WriteUInt32(TargetMap, Endianness.Big);
            buffer.WriteUInt32(TargetMode, Endianness.Big);
            buffer.WriteUInt32(TargetLevelGrp, Endianness.Big);
            buffer.WriteInt16(Difficulty, Endianness.Big);
            buffer.WriteUInt64(LeaderDBID, Endianness.Big);
            buffer.WriteUInt32(LeaderID, Endianness.Big);
            buffer.WriteUInt64(CreateTime, Endianness.Big);
            buffer.WriteUInt32(TownSvr, Endianness.Big);
            buffer.WriteUInt32(BattleSvr, Endianness.Big);
            uint membersCount = (uint)Members.Count;
            buffer.WriteUInt32(membersCount, Endianness.Big);
            for (int i = 0; i < membersCount; i++)
            {
                Members[i].Write(buffer);
            }
            for (int i = 0; i < CsProtoConstant.CS_MAX_TEAM_MEMBER_NUM; i++)
            {
                buffer.WriteUInt32(Slots[i], Endianness.Big);
            }
        }

        public void Read(IBuffer buffer)
        {
            TeamId = buffer.ReadUInt32(Endianness.Big);
            int TeamNameEntryLen = buffer.ReadInt32(Endianness.Big);
            TeamName = buffer.ReadString(TeamNameEntryLen);
            MemberMax = buffer.ReadUInt32(Endianness.Big);
            FreeJoin = buffer.ReadInt32(Endianness.Big);
            HasPwd = buffer.ReadInt16(Endianness.Big);
            int PwdEntryLen = buffer.ReadInt32(Endianness.Big);
            Pwd = buffer.ReadString(PwdEntryLen);
            OpenRecruit = buffer.ReadInt32(Endianness.Big);
            MinLevel = buffer.ReadUInt32(Endianness.Big);
            MaxLevel = buffer.ReadUInt32(Endianness.Big);
            MinStar = buffer.ReadUInt32(Endianness.Big);
            MaxStar = buffer.ReadUInt32(Endianness.Big);
            TargetMap = buffer.ReadUInt32(Endianness.Big);
            TargetMode = buffer.ReadUInt32(Endianness.Big);
            TargetLevelGrp = buffer.ReadUInt32(Endianness.Big);
            Difficulty = buffer.ReadInt16(Endianness.Big);
            LeaderDBID = buffer.ReadUInt64(Endianness.Big);
            LeaderID = buffer.ReadUInt32(Endianness.Big);
            CreateTime = buffer.ReadUInt64(Endianness.Big);
            TownSvr = buffer.ReadUInt32(Endianness.Big);
            BattleSvr = buffer.ReadUInt32(Endianness.Big);
            Members.Clear();
            uint membersCount = buffer.ReadUInt32(Endianness.Big);
            for (int i = 0; i < membersCount; i++)
            {
                TeamMemberInfo MembersEntry = new TeamMemberInfo();
                MembersEntry.Read(buffer);
                Members.Add(MembersEntry);
            }
            for (int i = 0; i < CsProtoConstant.CS_MAX_TEAM_MEMBER_NUM; i++)
            {
                Slots[i] = buffer.ReadUInt32(Endianness.Big);
            }
        }

    }
}
