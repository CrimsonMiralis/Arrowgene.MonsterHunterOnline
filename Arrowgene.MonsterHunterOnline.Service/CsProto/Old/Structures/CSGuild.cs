/*
* This file is part of Arrowgene.MonsterHunterOnline
*
* Arrowgene.MonsterHunterOnline is a server implementation for the game "Monster Hunter Online".
* Copyright (C) 2023-2024 "all contributors"
*
* Github: https://github.com/sebastian-heinz/Arrowgene.MonsterHunterOnline
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU Affero General Public License as published
*  by the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU Affero General Public License for more details.
*
*  You should have received a copy of the GNU Affero General Public License
*  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

using System.Collections.Generic;
using Arrowgene.Buffers;
using Arrowgene.Logging;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Core;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Enums;

namespace Arrowgene.MonsterHunterOnline.Service.CsProto.Structures
{

    /// <summary>
    /// 猎团
    /// </summary>
    public class CSGuild : ICsStructure
    {
        private static readonly ILogger Logger = LogProvider.Logger(typeof(CSGuild));

        public CSGuild()
        {
            Id = 0;
            Name = "";
            Icon = 0;
            Note = "";
            Level = 0;
            Exp = 0;
            Repute = 0;
            Fund = 0;
            Arena = 0;
            Plot = 0;
            ResA = 0;
            ResB = 0;
            GuildersCount = 0;
            OnlineGuildersCount = 0;
            GuildersAvgLevel = 0;
            JoinLevel = 0;
            DepotOpenFlag = 0;
            FundMax = 0;
            HallLevel = 0;
            RecruitingLevel = 0;
            ResourcingLevel = 0;
            TradingLevel = 0;
            TrainingLevel = 0;
            GuilderCountMax = 0;
            FundDaily = 0;
            FundWeekly = 0;
            CommodityUnlock1 = 0;
            CommodityUnlock2 = 0;
            CommodityUnlock3 = 0;
            ResC = 0;
            ResD = 0;
            ResADaily = 0;
            ResBDaily = 0;
            ResCDaily = 0;
            ResDDaily = 0;
            ResAWeekly = 0;
            ResBWeekly = 0;
            ResCWeekly = 0;
            ResDWeekly = 0;
            ResAMax = 0;
            ResBMax = 0;
            ResCMax = 0;
            ResDMax = 0;
            CelebrationScore = 0;
            CelebrationTaskA = 0;
            CelebrationTaskB = 0;
            CelebrationTaskC = 0;
            CelebrationTaskD = 0;
            CelebrationReward = 0;
            DailyCelebrationScore = 0;
            CommerceBoats = new List<CSCommerceInfo>();
            SelectBoatsId = 0;
            GuildWarHistoryInfo = 0;
            CommerceBuffInfo = new List<CSGuildCommerceBuffs>();
        }

        /// <summary>
        /// 标识
        /// </summary>
        public ulong Id;

        /// <summary>
        /// 名字
        /// </summary>
        public string Name;

        /// <summary>
        /// 图标
        /// </summary>
        public int Icon;

        /// <summary>
        /// 注释
        /// </summary>
        public string Note;

        /// <summary>
        /// 等级
        /// </summary>
        public int Level;

        /// <summary>
        /// 经验
        /// </summary>
        public int Exp;

        /// <summary>
        /// 声望
        /// </summary>
        public int Repute;

        /// <summary>
        /// 资金
        /// </summary>
        public int Fund;

        /// <summary>
        /// 竞技点
        /// </summary>
        public int Arena;

        /// <summary>
        /// 剧情进度
        /// </summary>
        public int Plot;

        /// <summary>
        /// 资源A
        /// </summary>
        public int ResA;

        /// <summary>
        /// 资源B
        /// </summary>
        public int ResB;

        /// <summary>
        /// 团员集
        /// </summary>
        public int GuildersCount;

        /// <summary>
        /// 在线团员集
        /// </summary>
        public int OnlineGuildersCount;

        /// <summary>
        /// 会员集平均等级
        /// </summary>
        public int GuildersAvgLevel;

        /// <summary>
        /// 加入等级
        /// </summary>
        public int JoinLevel;

        /// <summary>
        /// 猎团仓库开启标识
        /// </summary>
        public byte DepotOpenFlag;

        /// <summary>
        /// 资金最大值
        /// </summary>
        public ulong FundMax;

        /// <summary>
        /// 大厅等级
        /// </summary>
        public byte HallLevel;

        /// <summary>
        /// 招募所等级
        /// </summary>
        public byte RecruitingLevel;

        /// <summary>
        /// 资源所等级
        /// </summary>
        public byte ResourcingLevel;

        /// <summary>
        /// 贸易所等级
        /// </summary>
        public byte TradingLevel;

        /// <summary>
        /// 训练所等级
        /// </summary>
        public byte TrainingLevel;

        /// <summary>
        /// 猎团最大人数
        /// </summary>
        public int GuilderCountMax;

        /// <summary>
        /// 当日资金起始值
        /// </summary>
        public ulong FundDaily;

        /// <summary>
        /// 当周资金起始值
        /// </summary>
        public ulong FundWeekly;

        /// <summary>
        /// 商品解锁记录1
        /// </summary>
        public ulong CommodityUnlock1;

        /// <summary>
        /// 商品解锁记录1
        /// </summary>
        public ulong CommodityUnlock2;

        /// <summary>
        /// 商品解锁记录1
        /// </summary>
        public ulong CommodityUnlock3;

        /// <summary>
        /// 资源C
        /// </summary>
        public int ResC;

        /// <summary>
        /// 资源D
        /// </summary>
        public int ResD;

        /// <summary>
        /// 资源A
        /// </summary>
        public int ResADaily;

        /// <summary>
        /// 资源B
        /// </summary>
        public int ResBDaily;

        /// <summary>
        /// 资源C
        /// </summary>
        public int ResCDaily;

        /// <summary>
        /// 资源D
        /// </summary>
        public int ResDDaily;

        /// <summary>
        /// 资源A
        /// </summary>
        public int ResAWeekly;

        /// <summary>
        /// 资源B
        /// </summary>
        public int ResBWeekly;

        /// <summary>
        /// 资源C
        /// </summary>
        public int ResCWeekly;

        /// <summary>
        /// 资源D
        /// </summary>
        public int ResDWeekly;

        /// <summary>
        /// 资源A
        /// </summary>
        public int ResAMax;

        /// <summary>
        /// 资源B
        /// </summary>
        public int ResBMax;

        /// <summary>
        /// 资源C
        /// </summary>
        public int ResCMax;

        /// <summary>
        /// 资源D
        /// </summary>
        public int ResDMax;

        /// <summary>
        /// 庆典积分
        /// </summary>
        public int CelebrationScore;

        /// <summary>
        /// 庆典任务计数A
        /// </summary>
        public int CelebrationTaskA;

        /// <summary>
        /// 庆典任务计数B
        /// </summary>
        public int CelebrationTaskB;

        /// <summary>
        /// 庆典任务计数C
        /// </summary>
        public int CelebrationTaskC;

        /// <summary>
        /// 庆典任务计数D
        /// </summary>
        public int CelebrationTaskD;

        /// <summary>
        /// 庆典上期奖励类型
        /// </summary>
        public int CelebrationReward;

        /// <summary>
        /// 庆典当日积分
        /// </summary>
        public int DailyCelebrationScore;

        /// <summary>
        /// 商船id
        /// </summary>
        public List<CSCommerceInfo> CommerceBoats;

        /// <summary>
        /// 当前选择的商船ID
        /// </summary>
        public int SelectBoatsId;

        /// <summary>
        /// 猎团占有商船历史
        /// </summary>
        public uint GuildWarHistoryInfo;

        /// <summary>
        /// 商会buff信息
        /// </summary>
        public List<CSGuildCommerceBuffs> CommerceBuffInfo;

        public void WriteCs(IBuffer buffer)
        {
            buffer.WriteUInt64(Id, Endianness.Big);
            buffer.WriteInt32(Name.Length + 1, Endianness.Big);
            buffer.WriteCString(Name);
            buffer.WriteInt32(Icon, Endianness.Big);
            buffer.WriteInt32(Note.Length + 1, Endianness.Big);
            buffer.WriteCString(Note);
            buffer.WriteInt32(Level, Endianness.Big);
            buffer.WriteInt32(Exp, Endianness.Big);
            buffer.WriteInt32(Repute, Endianness.Big);
            buffer.WriteInt32(Fund, Endianness.Big);
            buffer.WriteInt32(Arena, Endianness.Big);
            buffer.WriteInt32(Plot, Endianness.Big);
            buffer.WriteInt32(ResA, Endianness.Big);
            buffer.WriteInt32(ResB, Endianness.Big);
            buffer.WriteInt32(GuildersCount, Endianness.Big);
            buffer.WriteInt32(OnlineGuildersCount, Endianness.Big);
            buffer.WriteInt32(GuildersAvgLevel, Endianness.Big);
            buffer.WriteInt32(JoinLevel, Endianness.Big);
            buffer.WriteByte(DepotOpenFlag);
            buffer.WriteUInt64(FundMax, Endianness.Big);
            buffer.WriteByte(HallLevel);
            buffer.WriteByte(RecruitingLevel);
            buffer.WriteByte(ResourcingLevel);
            buffer.WriteByte(TradingLevel);
            buffer.WriteByte(TrainingLevel);
            buffer.WriteInt32(GuilderCountMax, Endianness.Big);
            buffer.WriteUInt64(FundDaily, Endianness.Big);
            buffer.WriteUInt64(FundWeekly, Endianness.Big);
            buffer.WriteUInt64(CommodityUnlock1, Endianness.Big);
            buffer.WriteUInt64(CommodityUnlock2, Endianness.Big);
            buffer.WriteUInt64(CommodityUnlock3, Endianness.Big);
            buffer.WriteInt32(ResC, Endianness.Big);
            buffer.WriteInt32(ResD, Endianness.Big);
            buffer.WriteInt32(ResADaily, Endianness.Big);
            buffer.WriteInt32(ResBDaily, Endianness.Big);
            buffer.WriteInt32(ResCDaily, Endianness.Big);
            buffer.WriteInt32(ResDDaily, Endianness.Big);
            buffer.WriteInt32(ResAWeekly, Endianness.Big);
            buffer.WriteInt32(ResBWeekly, Endianness.Big);
            buffer.WriteInt32(ResCWeekly, Endianness.Big);
            buffer.WriteInt32(ResDWeekly, Endianness.Big);
            buffer.WriteInt32(ResAMax, Endianness.Big);
            buffer.WriteInt32(ResBMax, Endianness.Big);
            buffer.WriteInt32(ResCMax, Endianness.Big);
            buffer.WriteInt32(ResDMax, Endianness.Big);
            buffer.WriteInt32(CelebrationScore, Endianness.Big);
            buffer.WriteInt32(CelebrationTaskA, Endianness.Big);
            buffer.WriteInt32(CelebrationTaskB, Endianness.Big);
            buffer.WriteInt32(CelebrationTaskC, Endianness.Big);
            buffer.WriteInt32(CelebrationTaskD, Endianness.Big);
            buffer.WriteInt32(CelebrationReward, Endianness.Big);
            buffer.WriteInt32(DailyCelebrationScore, Endianness.Big);
            int commerceBoatsCount = (int)CommerceBoats.Count;
            buffer.WriteInt32(commerceBoatsCount, Endianness.Big);
            for (int i = 0; i < commerceBoatsCount; i++)
            {
                CommerceBoats[i].WriteCs(buffer);
            }
            buffer.WriteInt32(SelectBoatsId, Endianness.Big);
            buffer.WriteUInt32(GuildWarHistoryInfo, Endianness.Big);
            int commerceBuffInfoCount = (int)CommerceBuffInfo.Count;
            buffer.WriteInt32(commerceBuffInfoCount, Endianness.Big);
            for (int i = 0; i < commerceBuffInfoCount; i++)
            {
                CommerceBuffInfo[i].WriteCs(buffer);
            }
        }

        public void ReadCs(IBuffer buffer)
        {
            Id = buffer.ReadUInt64(Endianness.Big);
            int NameEntryLen = buffer.ReadInt32(Endianness.Big);
            Name = buffer.ReadString(NameEntryLen);
            Icon = buffer.ReadInt32(Endianness.Big);
            int NoteEntryLen = buffer.ReadInt32(Endianness.Big);
            Note = buffer.ReadString(NoteEntryLen);
            Level = buffer.ReadInt32(Endianness.Big);
            Exp = buffer.ReadInt32(Endianness.Big);
            Repute = buffer.ReadInt32(Endianness.Big);
            Fund = buffer.ReadInt32(Endianness.Big);
            Arena = buffer.ReadInt32(Endianness.Big);
            Plot = buffer.ReadInt32(Endianness.Big);
            ResA = buffer.ReadInt32(Endianness.Big);
            ResB = buffer.ReadInt32(Endianness.Big);
            GuildersCount = buffer.ReadInt32(Endianness.Big);
            OnlineGuildersCount = buffer.ReadInt32(Endianness.Big);
            GuildersAvgLevel = buffer.ReadInt32(Endianness.Big);
            JoinLevel = buffer.ReadInt32(Endianness.Big);
            DepotOpenFlag = buffer.ReadByte();
            FundMax = buffer.ReadUInt64(Endianness.Big);
            HallLevel = buffer.ReadByte();
            RecruitingLevel = buffer.ReadByte();
            ResourcingLevel = buffer.ReadByte();
            TradingLevel = buffer.ReadByte();
            TrainingLevel = buffer.ReadByte();
            GuilderCountMax = buffer.ReadInt32(Endianness.Big);
            FundDaily = buffer.ReadUInt64(Endianness.Big);
            FundWeekly = buffer.ReadUInt64(Endianness.Big);
            CommodityUnlock1 = buffer.ReadUInt64(Endianness.Big);
            CommodityUnlock2 = buffer.ReadUInt64(Endianness.Big);
            CommodityUnlock3 = buffer.ReadUInt64(Endianness.Big);
            ResC = buffer.ReadInt32(Endianness.Big);
            ResD = buffer.ReadInt32(Endianness.Big);
            ResADaily = buffer.ReadInt32(Endianness.Big);
            ResBDaily = buffer.ReadInt32(Endianness.Big);
            ResCDaily = buffer.ReadInt32(Endianness.Big);
            ResDDaily = buffer.ReadInt32(Endianness.Big);
            ResAWeekly = buffer.ReadInt32(Endianness.Big);
            ResBWeekly = buffer.ReadInt32(Endianness.Big);
            ResCWeekly = buffer.ReadInt32(Endianness.Big);
            ResDWeekly = buffer.ReadInt32(Endianness.Big);
            ResAMax = buffer.ReadInt32(Endianness.Big);
            ResBMax = buffer.ReadInt32(Endianness.Big);
            ResCMax = buffer.ReadInt32(Endianness.Big);
            ResDMax = buffer.ReadInt32(Endianness.Big);
            CelebrationScore = buffer.ReadInt32(Endianness.Big);
            CelebrationTaskA = buffer.ReadInt32(Endianness.Big);
            CelebrationTaskB = buffer.ReadInt32(Endianness.Big);
            CelebrationTaskC = buffer.ReadInt32(Endianness.Big);
            CelebrationTaskD = buffer.ReadInt32(Endianness.Big);
            CelebrationReward = buffer.ReadInt32(Endianness.Big);
            DailyCelebrationScore = buffer.ReadInt32(Endianness.Big);
            CommerceBoats.Clear();
            int commerceBoatsCount = buffer.ReadInt32(Endianness.Big);
            for (int i = 0; i < commerceBoatsCount; i++)
            {
                CSCommerceInfo CommerceBoatsEntry = new CSCommerceInfo();
                CommerceBoatsEntry.ReadCs(buffer);
                CommerceBoats.Add(CommerceBoatsEntry);
            }
            SelectBoatsId = buffer.ReadInt32(Endianness.Big);
            GuildWarHistoryInfo = buffer.ReadUInt32(Endianness.Big);
            CommerceBuffInfo.Clear();
            int commerceBuffInfoCount = buffer.ReadInt32(Endianness.Big);
            for (int i = 0; i < commerceBuffInfoCount; i++)
            {
                CSGuildCommerceBuffs CommerceBuffInfoEntry = new CSGuildCommerceBuffs();
                CommerceBuffInfoEntry.ReadCs(buffer);
                CommerceBuffInfo.Add(CommerceBuffInfoEntry);
            }
        }

    }
}
