/*
* This file is part of Arrowgene.MonsterHunterOnline
*
* Arrowgene.MonsterHunterOnline is a server implementation for the game "Monster Hunter Online".
* Copyright (C) 2023-2024 "all contributors"
*
* Github: https://github.com/sebastian-heinz/Arrowgene.MonsterHunterOnline
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU Affero General Public License as published
*  by the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU Affero General Public License for more details.
*
*  You should have received a copy of the GNU Affero General Public License
*  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

using System.Collections.Generic;
using Arrowgene.Buffers;
using Arrowgene.Logging;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Core;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Enums;

namespace Arrowgene.MonsterHunterOnline.Service.CsProto.Structures
{

    /// <summary>
    /// PVP个人副本结算
    /// </summary>
    public class CSPVPInstancePlayerRewardInfo : ICsStructure
    {
        private static readonly ILogger Logger = LogProvider.Logger(typeof(CSPVPInstancePlayerRewardInfo));

        public CSPVPInstancePlayerRewardInfo()
        {
            QQ = 0;
            NetID = 0;
            Name = "";
            Level = 0;
            CampType = 0;
            PlayerScore = 0;
            KillPlayerCount = 0;
            DeadCount = 0;
            BaseWinLoseScore = 0;
            RankScore = 0;
            MvpScore = 0;
            AchievenmentScore = 0;
        }

        /// <summary>
        /// 玩家QQ
        /// </summary>
        public uint QQ;

        /// <summary>
        /// 玩家NETID
        /// </summary>
        public int NetID;

        /// <summary>
        /// role name
        /// </summary>
        public string Name;

        /// <summary>
        /// 玩家等级
        /// </summary>
        public int Level;

        /// <summary>
        /// 玩家阵营
        /// </summary>
        public int CampType;

        /// <summary>
        /// 玩家得分
        /// </summary>
        public int PlayerScore;

        /// <summary>
        /// 玩家杀敌数量
        /// </summary>
        public int KillPlayerCount;

        /// <summary>
        /// 玩家死亡数量
        /// </summary>
        public int DeadCount;

        /// <summary>
        /// 基础胜负分数
        /// </summary>
        public int BaseWinLoseScore;

        /// <summary>
        /// 排名分数
        /// </summary>
        public int RankScore;

        /// <summary>
        /// MVP分数
        /// </summary>
        public int MvpScore;

        /// <summary>
        /// 成就分数
        /// </summary>
        public int AchievenmentScore;

        public void WriteCs(IBuffer buffer)
        {
            buffer.WriteUInt32(QQ, Endianness.Big);
            buffer.WriteInt32(NetID, Endianness.Big);
            buffer.WriteInt32(Name.Length + 1, Endianness.Big);
            buffer.WriteCString(Name);
            buffer.WriteInt32(Level, Endianness.Big);
            buffer.WriteInt32(CampType, Endianness.Big);
            buffer.WriteInt32(PlayerScore, Endianness.Big);
            buffer.WriteInt32(KillPlayerCount, Endianness.Big);
            buffer.WriteInt32(DeadCount, Endianness.Big);
            buffer.WriteInt32(BaseWinLoseScore, Endianness.Big);
            buffer.WriteInt32(RankScore, Endianness.Big);
            buffer.WriteInt32(MvpScore, Endianness.Big);
            buffer.WriteInt32(AchievenmentScore, Endianness.Big);
        }

        public void ReadCs(IBuffer buffer)
        {
            QQ = buffer.ReadUInt32(Endianness.Big);
            NetID = buffer.ReadInt32(Endianness.Big);
            int NameEntryLen = buffer.ReadInt32(Endianness.Big);
            Name = buffer.ReadString(NameEntryLen);
            Level = buffer.ReadInt32(Endianness.Big);
            CampType = buffer.ReadInt32(Endianness.Big);
            PlayerScore = buffer.ReadInt32(Endianness.Big);
            KillPlayerCount = buffer.ReadInt32(Endianness.Big);
            DeadCount = buffer.ReadInt32(Endianness.Big);
            BaseWinLoseScore = buffer.ReadInt32(Endianness.Big);
            RankScore = buffer.ReadInt32(Endianness.Big);
            MvpScore = buffer.ReadInt32(Endianness.Big);
            AchievenmentScore = buffer.ReadInt32(Endianness.Big);
        }

    }
}
