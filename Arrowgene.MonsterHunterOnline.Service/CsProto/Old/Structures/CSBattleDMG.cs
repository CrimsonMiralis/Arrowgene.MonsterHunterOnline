/*
* This file is part of Arrowgene.MonsterHunterOnline
*
* Arrowgene.MonsterHunterOnline is a server implementation for the game "Monster Hunter Online".
* Copyright (C) 2023-2024 "all contributors"
*
* Github: https://github.com/sebastian-heinz/Arrowgene.MonsterHunterOnline
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU Affero General Public License as published
*  by the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU Affero General Public License for more details.
*
*  You should have received a copy of the GNU Affero General Public License
*  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

using System.Collections.Generic;
using Arrowgene.Buffers;
using Arrowgene.Logging;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Core;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Enums;

namespace Arrowgene.MonsterHunterOnline.Service.CsProto.Structures
{

    /// <summary>
    /// 战斗伤害消息
    /// </summary>
    public class CSBattleDMG : ICsStructure
    {
        private static readonly ILogger Logger = LogProvider.Logger(typeof(CSBattleDMG));

        public CSBattleDMG()
        {
            shooterId = 0;
            targetId = 0;
            weaponId = 0;
            projectileId = 0;
            material = 0;
            type = 0;
            bulletType = 0;
            damageMin = 0.0f;
            pierce = 0.0f;
            partId = 0;
            pos = new CSVec3();
            lpos = new CSVec3();
            dir = new CSVec3();
            normal = new CSVec3();
            lnorm = new CSVec3();
            attackDir = new CSVec3();
            tScarDir = new CSVec3();
            tPos = new CSVec3();
            tUp = new CSVec3();
            tNormal = new CSVec3();
            localnormangle = new CSVec3();
            shakeStrength = 0.0f;
            shakeDurationTime = 0.0f;
            shakeStillTime = 0.0f;
            projectileClassId = 0;
            weaponClassId = 0;
            remote = 0;
            damageLevel = 0;
            attackType = 0;
            hitType = 0;
            defenseResult = 0;
            HitIndex = 0;
            shooterSrvId = 0;
            targetSrvId = 0;
            weaponSrvId = 0;
            projectileSrvId = 0;
            hashWeaponClass = 0;
            hashFireMode = 0;
            hashAttacker = 0;
            hashMeleeParams = 0;
            hashCurEvent = 0;
            skillResID = 0;
            skillSeq = 0;
            curStamina = 0.0f;
        }

        /// <summary>
        /// Entity ID of the shooter
        /// </summary>
        public uint shooterId;

        /// <summary>
        /// EntityId of the target which got shot
        /// </summary>
        public uint targetId;

        /// <summary>
        /// EntityId of the weapon
        /// </summary>
        public uint weaponId;

        /// <summary>
        /// 0 if hit was not caused by a projectile
        /// </summary>
        public uint projectileId;

        /// <summary>
        /// material id of the surface which got hit
        /// </summary>
        public int material;

        /// <summary>
        /// type id of the hit, see IGameRules::GetHitTypeId for more information
        /// </summary>
        public int type;

        /// <summary>
        /// type of bullet, if hit was of type bullet
        /// </summary>
        public int bulletType;

        public float damageMin;

        /// <summary>
        /// bullet pierceability
        /// </summary>
        public float pierce;

        public int partId;

        /// <summary>
        /// position of the hit
        /// </summary>
        public CSVec3 pos;

        /// <summary>
        /// local position of the hit
        /// </summary>
        public CSVec3 lpos;

        public CSVec3 dir;

        public CSVec3 normal;

        public CSVec3 lnorm;

        /// <summary>
        /// attack direction, namely the moving direction of weapon slash.
        /// </summary>
        public CSVec3 attackDir;

        public CSVec3 tScarDir;

        public CSVec3 tPos;

        public CSVec3 tUp;

        public CSVec3 tNormal;

        public CSVec3 localnormangle;

        public float shakeStrength;

        public float shakeDurationTime;

        public float shakeStillTime;

        public ushort projectileClassId;

        public ushort weaponClassId;

        public int remote;

        public int damageLevel;

        /// <summary>
        /// 0-normal, 1-trap, 2-flashRocket, 3-sleepCutter
        /// </summary>
        public uint attackType;

        public uint hitType;

        /// <summary>
        /// Defense result: 0 No defense 1-5 defense level
        /// </summary>
        public int defenseResult;

        /// <summary>
        /// 攻击附加伤害索引,提供给客户端索引伤害数值的位置
        /// </summary>
        public int HitIndex;

        public int shooterSrvId;

        public int targetSrvId;

        public int weaponSrvId;

        public int projectileSrvId;

        /// <summary>
        /// 武器类别
        /// </summary>
        public uint hashWeaponClass;

        /// <summary>
        /// Firemode
        /// </summary>
        public uint hashFireMode;

        /// <summary>
        /// 攻击数据
        /// </summary>
        public uint hashAttacker;

        /// <summary>
        /// 包围盒数据
        /// </summary>
        public uint hashMeleeParams;

        /// <summary>
        /// 当前攻击事件
        /// </summary>
        public uint hashCurEvent;

        /// <summary>
        /// 技能id
        /// </summary>
        public int skillResID;

        /// <summary>
        /// 技能序列号
        /// </summary>
        public long skillSeq;

        /// <summary>
        /// 玩家防御时耐力
        /// </summary>
        public float curStamina;

        public void WriteCs(IBuffer buffer)
        {
            buffer.WriteUInt32(shooterId, Endianness.Big);
            buffer.WriteUInt32(targetId, Endianness.Big);
            buffer.WriteUInt32(weaponId, Endianness.Big);
            buffer.WriteUInt32(projectileId, Endianness.Big);
            buffer.WriteInt32(material, Endianness.Big);
            buffer.WriteInt32(type, Endianness.Big);
            buffer.WriteInt32(bulletType, Endianness.Big);
            buffer.WriteFloat(damageMin, Endianness.Big);
            buffer.WriteFloat(pierce, Endianness.Big);
            buffer.WriteInt32(partId, Endianness.Big);
            pos.WriteCs(buffer);
            lpos.WriteCs(buffer);
            dir.WriteCs(buffer);
            normal.WriteCs(buffer);
            lnorm.WriteCs(buffer);
            attackDir.WriteCs(buffer);
            tScarDir.WriteCs(buffer);
            tPos.WriteCs(buffer);
            tUp.WriteCs(buffer);
            tNormal.WriteCs(buffer);
            localnormangle.WriteCs(buffer);
            buffer.WriteFloat(shakeStrength, Endianness.Big);
            buffer.WriteFloat(shakeDurationTime, Endianness.Big);
            buffer.WriteFloat(shakeStillTime, Endianness.Big);
            buffer.WriteUInt16(projectileClassId, Endianness.Big);
            buffer.WriteUInt16(weaponClassId, Endianness.Big);
            buffer.WriteInt32(remote, Endianness.Big);
            buffer.WriteInt32(damageLevel, Endianness.Big);
            buffer.WriteUInt32(attackType, Endianness.Big);
            buffer.WriteUInt32(hitType, Endianness.Big);
            buffer.WriteInt32(defenseResult, Endianness.Big);
            buffer.WriteInt32(HitIndex, Endianness.Big);
            buffer.WriteInt32(shooterSrvId, Endianness.Big);
            buffer.WriteInt32(targetSrvId, Endianness.Big);
            buffer.WriteInt32(weaponSrvId, Endianness.Big);
            buffer.WriteInt32(projectileSrvId, Endianness.Big);
            buffer.WriteUInt32(hashWeaponClass, Endianness.Big);
            buffer.WriteUInt32(hashFireMode, Endianness.Big);
            buffer.WriteUInt32(hashAttacker, Endianness.Big);
            buffer.WriteUInt32(hashMeleeParams, Endianness.Big);
            buffer.WriteUInt32(hashCurEvent, Endianness.Big);
            buffer.WriteInt32(skillResID, Endianness.Big);
            buffer.WriteInt64(skillSeq, Endianness.Big);
            buffer.WriteFloat(curStamina, Endianness.Big);
        }

        public void ReadCs(IBuffer buffer)
        {
            shooterId = buffer.ReadUInt32(Endianness.Big);
            targetId = buffer.ReadUInt32(Endianness.Big);
            weaponId = buffer.ReadUInt32(Endianness.Big);
            projectileId = buffer.ReadUInt32(Endianness.Big);
            material = buffer.ReadInt32(Endianness.Big);
            type = buffer.ReadInt32(Endianness.Big);
            bulletType = buffer.ReadInt32(Endianness.Big);
            damageMin = buffer.ReadFloat(Endianness.Big);
            pierce = buffer.ReadFloat(Endianness.Big);
            partId = buffer.ReadInt32(Endianness.Big);
            pos.ReadCs(buffer);
            lpos.ReadCs(buffer);
            dir.ReadCs(buffer);
            normal.ReadCs(buffer);
            lnorm.ReadCs(buffer);
            attackDir.ReadCs(buffer);
            tScarDir.ReadCs(buffer);
            tPos.ReadCs(buffer);
            tUp.ReadCs(buffer);
            tNormal.ReadCs(buffer);
            localnormangle.ReadCs(buffer);
            shakeStrength = buffer.ReadFloat(Endianness.Big);
            shakeDurationTime = buffer.ReadFloat(Endianness.Big);
            shakeStillTime = buffer.ReadFloat(Endianness.Big);
            projectileClassId = buffer.ReadUInt16(Endianness.Big);
            weaponClassId = buffer.ReadUInt16(Endianness.Big);
            remote = buffer.ReadInt32(Endianness.Big);
            damageLevel = buffer.ReadInt32(Endianness.Big);
            attackType = buffer.ReadUInt32(Endianness.Big);
            hitType = buffer.ReadUInt32(Endianness.Big);
            defenseResult = buffer.ReadInt32(Endianness.Big);
            HitIndex = buffer.ReadInt32(Endianness.Big);
            shooterSrvId = buffer.ReadInt32(Endianness.Big);
            targetSrvId = buffer.ReadInt32(Endianness.Big);
            weaponSrvId = buffer.ReadInt32(Endianness.Big);
            projectileSrvId = buffer.ReadInt32(Endianness.Big);
            hashWeaponClass = buffer.ReadUInt32(Endianness.Big);
            hashFireMode = buffer.ReadUInt32(Endianness.Big);
            hashAttacker = buffer.ReadUInt32(Endianness.Big);
            hashMeleeParams = buffer.ReadUInt32(Endianness.Big);
            hashCurEvent = buffer.ReadUInt32(Endianness.Big);
            skillResID = buffer.ReadInt32(Endianness.Big);
            skillSeq = buffer.ReadInt64(Endianness.Big);
            curStamina = buffer.ReadFloat(Endianness.Big);
        }

    }
}
