/*
* This file is part of Arrowgene.MonsterHunterOnline
*
* Arrowgene.MonsterHunterOnline is a server implementation for the game "Monster Hunter Online".
* Copyright (C) 2023-2024 "all contributors"
*
* Github: https://github.com/sebastian-heinz/Arrowgene.MonsterHunterOnline
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU Affero General Public License as published
*  by the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU Affero General Public License for more details.
*
*  You should have received a copy of the GNU Affero General Public License
*  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

using System.Collections.Generic;
using Arrowgene.Buffers;
using Arrowgene.Logging;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Core;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Enums;

namespace Arrowgene.MonsterHunterOnline.Service.CsProto.Structures
{

    /// <summary>
    /// 活动在线时长计算
    /// </summary>
    public class S2CActivityAddStOnlineTime : IStructure
    {
        private static readonly ILogger Logger = LogProvider.Logger(typeof(S2CActivityAddStOnlineTime));

        public S2CActivityAddStOnlineTime()
        {
            id = 0;
            hour = 0;
            min = 0;
            second = 0;
            offset = 0;
            OnlineTime = 0;
            LastUpdateTime = 0;
            Begin = 0;
            End = 0;
        }

        /// <summary>
        /// 活动id
        /// </summary>
        public int id;

        /// <summary>
        /// hour
        /// </summary>
        public int hour;

        /// <summary>
        /// min
        /// </summary>
        public int min;

        /// <summary>
        /// second
        /// </summary>
        public int second;

        /// <summary>
        /// offset
        /// </summary>
        public int offset;

        /// <summary>
        /// OnlineTime
        /// </summary>
        public int OnlineTime;

        /// <summary>
        /// LastUpdateTime
        /// </summary>
        public int LastUpdateTime;

        /// <summary>
        /// Begin
        /// </summary>
        public int Begin;

        /// <summary>
        /// End
        /// </summary>
        public int End;

        public void Write(IBuffer buffer)
        {
            buffer.WriteInt32(id, Endianness.Big);
            buffer.WriteInt32(hour, Endianness.Big);
            buffer.WriteInt32(min, Endianness.Big);
            buffer.WriteInt32(second, Endianness.Big);
            buffer.WriteInt32(offset, Endianness.Big);
            buffer.WriteInt32(OnlineTime, Endianness.Big);
            buffer.WriteInt32(LastUpdateTime, Endianness.Big);
            buffer.WriteInt32(Begin, Endianness.Big);
            buffer.WriteInt32(End, Endianness.Big);
        }

        public void Read(IBuffer buffer)
        {
            id = buffer.ReadInt32(Endianness.Big);
            hour = buffer.ReadInt32(Endianness.Big);
            min = buffer.ReadInt32(Endianness.Big);
            second = buffer.ReadInt32(Endianness.Big);
            offset = buffer.ReadInt32(Endianness.Big);
            OnlineTime = buffer.ReadInt32(Endianness.Big);
            LastUpdateTime = buffer.ReadInt32(Endianness.Big);
            Begin = buffer.ReadInt32(Endianness.Big);
            End = buffer.ReadInt32(Endianness.Big);
        }

    }
}
