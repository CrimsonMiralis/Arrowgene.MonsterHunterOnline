/*
* This file is part of Arrowgene.MonsterHunterOnline
*
* Arrowgene.MonsterHunterOnline is a server implementation for the game "Monster Hunter Online".
* Copyright (C) 2023-2024 "all contributors"
*
* Github: https://github.com/sebastian-heinz/Arrowgene.MonsterHunterOnline
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU Affero General Public License as published
*  by the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU Affero General Public License for more details.
*
*  You should have received a copy of the GNU Affero General Public License
*  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

using System.Collections.Generic;
using Arrowgene.Buffers;
using Arrowgene.Logging;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Core;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Enums;

namespace Arrowgene.MonsterHunterOnline.Service.CsProto.Structures
{

    /// <summary>
    /// 龙人秘宝开箱通知
    /// </summary>
    public class CSDragonBoxOpenNtf : ICsStructure
    {
        private static readonly ILogger Logger = LogProvider.Logger(typeof(CSDragonBoxOpenNtf));

        public CSDragonBoxOpenNtf()
        {
            Id = 0;
            Key = 0;
            Num = 0;
            Box = new List<byte>();
            Args = new List<DragonBoxOpenArgs>();
        }

        /// <summary>
        /// 秘宝id
        /// </summary>
        public int Id;

        /// <summary>
        /// 开箱钥匙
        /// </summary>
        public int Key;

        /// <summary>
        /// 开箱数量
        /// </summary>
        public int Num;

        /// <summary>
        /// Box务数据
        /// </summary>
        public List<byte> Box;

        /// <summary>
        /// 宝箱参数集
        /// </summary>
        public List<DragonBoxOpenArgs> Args;

        public void WriteCs(IBuffer buffer)
        {
            buffer.WriteInt32(Id, Endianness.Big);
            buffer.WriteInt32(Key, Endianness.Big);
            buffer.WriteInt32(Num, Endianness.Big);
            int boxCount = (int)Box.Count;
            buffer.WriteInt32(boxCount, Endianness.Big);
            for (int i = 0; i < boxCount; i++)
            {
                buffer.WriteByte(Box[i]);
            }
            byte argsCount = (byte)Args.Count;
            buffer.WriteByte(argsCount);
            for (int i = 0; i < argsCount; i++)
            {
                Args[i].WriteCs(buffer);
            }
        }

        public void ReadCs(IBuffer buffer)
        {
            Id = buffer.ReadInt32(Endianness.Big);
            Key = buffer.ReadInt32(Endianness.Big);
            Num = buffer.ReadInt32(Endianness.Big);
            Box.Clear();
            int boxCount = buffer.ReadInt32(Endianness.Big);
            for (int i = 0; i < boxCount; i++)
            {
                byte BoxEntry = buffer.ReadByte();
                Box.Add(BoxEntry);
            }
            Args.Clear();
            byte argsCount = buffer.ReadByte();
            for (int i = 0; i < argsCount; i++)
            {
                DragonBoxOpenArgs ArgsEntry = new DragonBoxOpenArgs();
                ArgsEntry.ReadCs(buffer);
                Args.Add(ArgsEntry);
            }
        }

    }
}
