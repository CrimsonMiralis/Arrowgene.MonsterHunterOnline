/*
* This file is part of Arrowgene.MonsterHunterOnline
*
* Arrowgene.MonsterHunterOnline is a server implementation for the game "Monster Hunter Online".
* Copyright (C) 2023-2024 "all contributors"
*
* Github: https://github.com/sebastian-heinz/Arrowgene.MonsterHunterOnline
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU Affero General Public License as published
*  by the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU Affero General Public License for more details.
*
*  You should have received a copy of the GNU Affero General Public License
*  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

using System.Collections.Generic;
using Arrowgene.Buffers;
using Arrowgene.Logging;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Core;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Enums;

namespace Arrowgene.MonsterHunterOnline.Service.CsProto.Structures
{

    /// <summary>
    /// 查询请求
    /// </summary>
    public class CSAuctionSearchReq : ICsStructure
    {
        private static readonly ILogger Logger = LogProvider.Logger(typeof(CSAuctionSearchReq));

        public CSAuctionSearchReq()
        {
            SearchID = 0;
            ItemType1 = 0;
            ItemType2 = 0;
            ItemType3 = 0;
            MinLevel = 0;
            MaxLevel = 0;
            Quality = 0;
            bid = 0;
            Name = "";
            ItemId = new List<uint>();
        }

        /// <summary>
        /// 查询ID
        /// </summary>
        public uint SearchID;

        /// <summary>
        /// 物品类型1
        /// </summary>
        public byte ItemType1;

        /// <summary>
        /// 物品类型2
        /// </summary>
        public byte ItemType2;

        /// <summary>
        /// 物品类型3
        /// </summary>
        public byte ItemType3;

        /// <summary>
        /// 等级下限
        /// </summary>
        public ushort MinLevel;

        /// <summary>
        /// 等级上限
        /// </summary>
        public ushort MaxLevel;

        /// <summary>
        /// 品质
        /// </summary>
        public ushort Quality;

        /// <summary>
        /// 一口价过滤
        /// </summary>
        public byte bid;

        /// <summary>
        /// 名称
        /// </summary>
        public string Name;

        /// <summary>
        /// ID列表
        /// </summary>
        public List<uint> ItemId;

        public void WriteCs(IBuffer buffer)
        {
            buffer.WriteUInt32(SearchID, Endianness.Big);
            buffer.WriteByte(ItemType1);
            buffer.WriteByte(ItemType2);
            buffer.WriteByte(ItemType3);
            buffer.WriteUInt16(MinLevel, Endianness.Big);
            buffer.WriteUInt16(MaxLevel, Endianness.Big);
            buffer.WriteUInt16(Quality, Endianness.Big);
            buffer.WriteByte(bid);
            buffer.WriteInt32(Name.Length + 1, Endianness.Big);
            buffer.WriteCString(Name);
            byte itemIdCount = (byte)ItemId.Count;
            buffer.WriteByte(itemIdCount);
            for (int i = 0; i < itemIdCount; i++)
            {
                buffer.WriteUInt32(ItemId[i], Endianness.Big);
            }
        }

        public void ReadCs(IBuffer buffer)
        {
            SearchID = buffer.ReadUInt32(Endianness.Big);
            ItemType1 = buffer.ReadByte();
            ItemType2 = buffer.ReadByte();
            ItemType3 = buffer.ReadByte();
            MinLevel = buffer.ReadUInt16(Endianness.Big);
            MaxLevel = buffer.ReadUInt16(Endianness.Big);
            Quality = buffer.ReadUInt16(Endianness.Big);
            bid = buffer.ReadByte();
            int NameEntryLen = buffer.ReadInt32(Endianness.Big);
            Name = buffer.ReadString(NameEntryLen);
            ItemId.Clear();
            byte itemIdCount = buffer.ReadByte();
            for (int i = 0; i < itemIdCount; i++)
            {
                uint ItemIdEntry = buffer.ReadUInt32(Endianness.Big);
                ItemId.Add(ItemIdEntry);
            }
        }

    }
}
