/*
* This file is part of Arrowgene.MonsterHunterOnline
*
* Arrowgene.MonsterHunterOnline is a server implementation for the game "Monster Hunter Online".
* Copyright (C) 2023-2024 "all contributors"
*
* Github: https://github.com/sebastian-heinz/Arrowgene.MonsterHunterOnline
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU Affero General Public License as published
*  by the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU Affero General Public License for more details.
*
*  You should have received a copy of the GNU Affero General Public License
*  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

using System.Collections.Generic;
using Arrowgene.Buffers;
using Arrowgene.Logging;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Core;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Enums;

namespace Arrowgene.MonsterHunterOnline.Service.CsProto.Structures
{

    /// <summary>
    /// 复活响应
    /// </summary>
    public class CSPlayerReviveRsp : ICsStructure
    {
        private static readonly ILogger Logger = LogProvider.Logger(typeof(CSPlayerReviveRsp));

        public CSPlayerReviveRsp()
        {
            PlayerID = 0;
            FactionID = 0;
            RevivePointName = "";
            ReviveType = 0;
            CatCarType = 0;
            Param = 0;
            CatCarInfo = new LevelCatCarInfo();
        }

        /// <summary>
        /// 申请复活的玩家的ID
        /// </summary>
        public int PlayerID;

        /// <summary>
        /// 复活玩家阵营
        /// </summary>
        public int FactionID;

        /// <summary>
        /// 复活点名字
        /// </summary>
        public string RevivePointName;

        /// <summary>
        /// 复活方式，0原地 1猫车 -1失败
        /// </summary>
        public int ReviveType;

        /// <summary>
        /// 猫车类型 0 普通猫车， 1原地猫车
        /// </summary>
        public int CatCarType;

        /// <summary>
        /// 如果是猫车的话,此处为对应猫车LogicEntityID
        /// </summary>
        public int Param;

        /// <summary>
        /// 当前猫车信息
        /// </summary>
        public LevelCatCarInfo CatCarInfo;

        public void WriteCs(IBuffer buffer)
        {
            buffer.WriteInt32(PlayerID, Endianness.Big);
            buffer.WriteInt32(FactionID, Endianness.Big);
            buffer.WriteInt32(RevivePointName.Length + 1, Endianness.Big);
            buffer.WriteCString(RevivePointName);
            buffer.WriteInt32(ReviveType, Endianness.Big);
            buffer.WriteInt32(CatCarType, Endianness.Big);
            buffer.WriteInt32(Param, Endianness.Big);
            CatCarInfo.WriteCs(buffer);
        }

        public void ReadCs(IBuffer buffer)
        {
            PlayerID = buffer.ReadInt32(Endianness.Big);
            FactionID = buffer.ReadInt32(Endianness.Big);
            int RevivePointNameEntryLen = buffer.ReadInt32(Endianness.Big);
            RevivePointName = buffer.ReadString(RevivePointNameEntryLen);
            ReviveType = buffer.ReadInt32(Endianness.Big);
            CatCarType = buffer.ReadInt32(Endianness.Big);
            Param = buffer.ReadInt32(Endianness.Big);
            CatCarInfo.ReadCs(buffer);
        }

    }
}
