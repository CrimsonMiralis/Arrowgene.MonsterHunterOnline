/*
* This file is part of Arrowgene.MonsterHunterOnline
*
* Arrowgene.MonsterHunterOnline is a server implementation for the game "Monster Hunter Online".
* Copyright (C) 2023-2024 "all contributors"
*
* Github: https://github.com/sebastian-heinz/Arrowgene.MonsterHunterOnline
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU Affero General Public License as published
*  by the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU Affero General Public License for more details.
*
*  You should have received a copy of the GNU Affero General Public License
*  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

using System.Collections.Generic;
using Arrowgene.Buffers;
using Arrowgene.Logging;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Core;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Enums;

namespace Arrowgene.MonsterHunterOnline.Service.CsProto.Structures
{

    public class CSPlayAnimationParam : CSObjectActionParam
    {
        private static readonly ILogger Logger = LogProvider.Logger(typeof(CSPlayAnimationParam));

        public CSPlayAnimationParam()
        {
            animationName = "";
            keepLastKey = 0;
            loop = 0;
            open = 0;
        }

        public CS_SCENE_OBJECT_ACTION_TYPE Action => CS_SCENE_OBJECT_ACTION_TYPE.CS_ACTION_TYPE_PLAY_ANIMATION;

        /// <summary>
        /// Name of animation
        /// </summary>
        public string animationName;

        /// <summary>
        /// 是否保持最后一帧
        /// </summary>
        public short keepLastKey;

        /// <summary>
        /// 是否循环
        /// </summary>
        public short loop;

        /// <summary>
        /// 是否开始播放还是清除
        /// </summary>
        public short open;

        public void WriteCs(IBuffer buffer)
        {
            buffer.WriteInt32(animationName.Length + 1, Endianness.Big);
            buffer.WriteCString(animationName);
            buffer.WriteInt16(keepLastKey, Endianness.Big);
            buffer.WriteInt16(loop, Endianness.Big);
            buffer.WriteInt16(open, Endianness.Big);
        }

        public void ReadCs(IBuffer buffer)
        {
            int animationNameEntryLen = buffer.ReadInt32(Endianness.Big);
            animationName = buffer.ReadString(animationNameEntryLen);
            keepLastKey = buffer.ReadInt16(Endianness.Big);
            loop = buffer.ReadInt16(Endianness.Big);
            open = buffer.ReadInt16(Endianness.Big);
        }

    }
}
