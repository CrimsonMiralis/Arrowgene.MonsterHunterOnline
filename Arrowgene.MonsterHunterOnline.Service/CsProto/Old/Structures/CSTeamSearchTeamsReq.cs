/*
* This file is part of Arrowgene.MonsterHunterOnline
*
* Arrowgene.MonsterHunterOnline is a server implementation for the game "Monster Hunter Online".
* Copyright (C) 2023-2024 "all contributors"
*
* Github: https://github.com/sebastian-heinz/Arrowgene.MonsterHunterOnline
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU Affero General Public License as published
*  by the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU Affero General Public License for more details.
*
*  You should have received a copy of the GNU Affero General Public License
*  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

using System.Collections.Generic;
using Arrowgene.Buffers;
using Arrowgene.Logging;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Core;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Enums;

namespace Arrowgene.MonsterHunterOnline.Service.CsProto.Structures
{

    /// <summary>
    /// 快速组队搜索队伍列表请求
    /// </summary>
    public class CSTeamSearchTeamsReq : ICsStructure
    {
        private static readonly ILogger Logger = LogProvider.Logger(typeof(CSTeamSearchTeamsReq));

        public CSTeamSearchTeamsReq()
        {
            LevelMode = 0;
            MapId = 0;
            LevelGrpId = 0;
            Difficulty = 0;
            CrossLine = 0;
            BeginFrom = 0;
            EndTo = 0;
        }

        /// <summary>
        /// 模式
        /// </summary>
        public short LevelMode;

        /// <summary>
        /// 地区（即地图ID）
        /// </summary>
        public uint MapId;

        /// <summary>
        /// 关卡（即关卡组ID）
        /// </summary>
        public uint LevelGrpId;

        /// <summary>
        /// 难度
        /// </summary>
        public short Difficulty;

        /// <summary>
        /// 全部线（是否跨线Bool）
        /// </summary>
        public short CrossLine;

        /// <summary>
        /// 分页：起始队伍Index（从0开始，包含此队伍）
        /// </summary>
        public uint BeginFrom;

        /// <summary>
        /// 分页：结束队伍Index（不包含此队伍）
        /// </summary>
        public uint EndTo;

        public void WriteCs(IBuffer buffer)
        {
            buffer.WriteInt16(LevelMode, Endianness.Big);
            buffer.WriteUInt32(MapId, Endianness.Big);
            buffer.WriteUInt32(LevelGrpId, Endianness.Big);
            buffer.WriteInt16(Difficulty, Endianness.Big);
            buffer.WriteInt16(CrossLine, Endianness.Big);
            buffer.WriteUInt32(BeginFrom, Endianness.Big);
            buffer.WriteUInt32(EndTo, Endianness.Big);
        }

        public void ReadCs(IBuffer buffer)
        {
            LevelMode = buffer.ReadInt16(Endianness.Big);
            MapId = buffer.ReadUInt32(Endianness.Big);
            LevelGrpId = buffer.ReadUInt32(Endianness.Big);
            Difficulty = buffer.ReadInt16(Endianness.Big);
            CrossLine = buffer.ReadInt16(Endianness.Big);
            BeginFrom = buffer.ReadUInt32(Endianness.Big);
            EndTo = buffer.ReadUInt32(Endianness.Big);
        }

    }
}
