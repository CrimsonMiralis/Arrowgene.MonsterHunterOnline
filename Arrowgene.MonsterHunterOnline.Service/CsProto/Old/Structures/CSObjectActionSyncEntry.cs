/*
* This file is part of Arrowgene.MonsterHunterOnline
*
* Arrowgene.MonsterHunterOnline is a server implementation for the game "Monster Hunter Online".
* Copyright (C) 2023-2024 "all contributors"
*
* Github: https://github.com/sebastian-heinz/Arrowgene.MonsterHunterOnline
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU Affero General Public License as published
*  by the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU Affero General Public License for more details.
*
*  You should have received a copy of the GNU Affero General Public License
*  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

using System.Collections.Generic;
using Arrowgene.Buffers;
using Arrowgene.Logging;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Core;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Enums;

namespace Arrowgene.MonsterHunterOnline.Service.CsProto.Structures
{

    public class CSObjectActionSyncEntry : ICsStructure
    {
        private static readonly ILogger Logger = LogProvider.Logger(typeof(CSObjectActionSyncEntry));

        public CSObjectActionSyncEntry(CSObjectActionParam _Param)
        {
            EntityId = 0;
            Param = _Param;
        }

        public uint EntityId;

        /// <summary>
        /// 行为类型
        /// </summary>

        /// <summary>
        /// 参数
        /// </summary>
        public CSObjectActionParam Param;

        public void WriteCs(IBuffer buffer)
        {
            buffer.WriteUInt32(EntityId, Endianness.Big);
            buffer.WriteUInt16((ushort)Param.Action, Endianness.Big);
            Param.WriteCs(buffer);
        }

        public void ReadCs(IBuffer buffer)
        {
            EntityId = buffer.ReadUInt32(Endianness.Big);
            CS_SCENE_OBJECT_ACTION_TYPE CSObjectActionParam_Action = (CS_SCENE_OBJECT_ACTION_TYPE)buffer.ReadUInt16(Endianness.Big);
            switch (CSObjectActionParam_Action)
            {
                case CS_SCENE_OBJECT_ACTION_TYPE.CS_ACTION_TYPE_PLAY_EFFECT:
                    Param = new CSPlayEffectParam();
                    break;
                case CS_SCENE_OBJECT_ACTION_TYPE.CS_ACTION_TYPE_PLAY_ANIMATION:
                    Param = new CSPlayAnimationParam();
                    break;
                case CS_SCENE_OBJECT_ACTION_TYPE.CS_ACTION_TYPE_GOTOSTATE:
                    Param = new CSGotoStateParam();
                    break;
                case CS_SCENE_OBJECT_ACTION_TYPE.CS_ACTION_TYPE_GOTO_TARGETPOS:
                    Param = new CSGotoTargetPosParam();
                    break;
                case CS_SCENE_OBJECT_ACTION_TYPE.CS_ACTION_TYPE_ROTATEAXIS:
                    Param = new CSRotateAxisParam();
                    break;
                case CS_SCENE_OBJECT_ACTION_TYPE.CS_ACTION_TYPE_TELEPORT:
                    Param = new CSTeleportParam();
                    break;
                case CS_SCENE_OBJECT_ACTION_TYPE.CS_ACTION_TYPE_SIMPLE:
                    Param = new CSSimpleActionParam();
                    break;
                case CS_SCENE_OBJECT_ACTION_TYPE.CS_ACTION_TYPE_PYSICS_COLLISION:
                    Param = new CSPhysicsCollisionParam();
                    break;
            }
            if (Param != null) {
                Param.ReadCs(buffer);
            }
            else {
                Logger.Error("Failed to create 'Param' instance of type 'CSObjectActionParam'");
            }
        }

    }
}
