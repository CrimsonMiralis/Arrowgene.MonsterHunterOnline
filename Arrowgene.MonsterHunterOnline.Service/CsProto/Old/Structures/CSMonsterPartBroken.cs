/*
* This file is part of Arrowgene.MonsterHunterOnline
*
* Arrowgene.MonsterHunterOnline is a server implementation for the game "Monster Hunter Online".
* Copyright (C) 2023-2024 "all contributors"
*
* Github: https://github.com/sebastian-heinz/Arrowgene.MonsterHunterOnline
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU Affero General Public License as published
*  by the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU Affero General Public License for more details.
*
*  You should have received a copy of the GNU Affero General Public License
*  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

using System.Collections.Generic;
using Arrowgene.Buffers;
using Arrowgene.Logging;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Core;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Enums;

namespace Arrowgene.MonsterHunterOnline.Service.CsProto.Structures
{

    /// <summary>
    /// 部位破坏消息
    /// </summary>
    public class CSMonsterPartBroken : ICsStructure
    {
        private static readonly ILogger Logger = LogProvider.Logger(typeof(CSMonsterPartBroken));

        public CSMonsterPartBroken()
        {
            SyncTime = 0;
            MonsterID = 0;
            PartName = "";
            PartBoneName = "";
            PartTemplate = "";
            SpawnFlag = 0;
            SpawnPoint = new CSVec3();
            SpawnDir = new CSVec3();
            SpawnVel = new CSVec3();
            Hide = 0;
        }

        /// <summary>
        /// 同步时间
        /// </summary>
        public long SyncTime;

        /// <summary>
        /// 怪物ID
        /// </summary>
        public uint MonsterID;

        /// <summary>
        /// 部位name
        /// </summary>
        public string PartName;

        /// <summary>
        /// 骨骼name
        /// </summary>
        public string PartBoneName;

        /// <summary>
        /// 部位模板
        /// </summary>
        public string PartTemplate;

        /// <summary>
        /// 生成Flag
        /// </summary>
        public uint SpawnFlag;

        /// <summary>
        /// 生成位置
        /// </summary>
        public CSVec3 SpawnPoint;

        /// <summary>
        /// 生成方向
        /// </summary>
        public CSVec3 SpawnDir;

        /// <summary>
        /// 生成初速度
        /// </summary>
        public CSVec3 SpawnVel;

        /// <summary>
        /// 是否隐藏
        /// </summary>
        public byte Hide;

        public void WriteCs(IBuffer buffer)
        {
            buffer.WriteInt64(SyncTime, Endianness.Big);
            buffer.WriteUInt32(MonsterID, Endianness.Big);
            buffer.WriteInt32(PartName.Length + 1, Endianness.Big);
            buffer.WriteCString(PartName);
            buffer.WriteInt32(PartBoneName.Length + 1, Endianness.Big);
            buffer.WriteCString(PartBoneName);
            buffer.WriteInt32(PartTemplate.Length + 1, Endianness.Big);
            buffer.WriteCString(PartTemplate);
            buffer.WriteUInt32(SpawnFlag, Endianness.Big);
            SpawnPoint.WriteCs(buffer);
            SpawnDir.WriteCs(buffer);
            SpawnVel.WriteCs(buffer);
            buffer.WriteByte(Hide);
        }

        public void ReadCs(IBuffer buffer)
        {
            SyncTime = buffer.ReadInt64(Endianness.Big);
            MonsterID = buffer.ReadUInt32(Endianness.Big);
            int PartNameEntryLen = buffer.ReadInt32(Endianness.Big);
            PartName = buffer.ReadString(PartNameEntryLen);
            int PartBoneNameEntryLen = buffer.ReadInt32(Endianness.Big);
            PartBoneName = buffer.ReadString(PartBoneNameEntryLen);
            int PartTemplateEntryLen = buffer.ReadInt32(Endianness.Big);
            PartTemplate = buffer.ReadString(PartTemplateEntryLen);
            SpawnFlag = buffer.ReadUInt32(Endianness.Big);
            SpawnPoint.ReadCs(buffer);
            SpawnDir.ReadCs(buffer);
            SpawnVel.ReadCs(buffer);
            Hide = buffer.ReadByte();
        }

    }
}
