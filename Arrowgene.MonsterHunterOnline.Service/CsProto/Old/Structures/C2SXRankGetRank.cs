/*
* This file is part of Arrowgene.MonsterHunterOnline
*
* Arrowgene.MonsterHunterOnline is a server implementation for the game "Monster Hunter Online".
* Copyright (C) 2023-2024 "all contributors"
*
* Github: https://github.com/sebastian-heinz/Arrowgene.MonsterHunterOnline
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU Affero General Public License as published
*  by the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU Affero General Public License for more details.
*
*  You should have received a copy of the GNU Affero General Public License
*  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

using System.Collections.Generic;
using Arrowgene.Buffers;
using Arrowgene.Logging;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Core;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Enums;

namespace Arrowgene.MonsterHunterOnline.Service.CsProto.Structures
{

    /// <summary>
    /// xrank榜单数据请求
    /// </summary>
    public class C2SXRankGetRank : ICsStructure
    {
        private static readonly ILogger Logger = LogProvider.Logger(typeof(C2SXRankGetRank));

        public C2SXRankGetRank()
        {
            Zone = 0;
            ScoreType = 0;
            Uid = 0;
            Offset = 0;
            Limit = 0;
            UpDistance = 0.0f;
            UpCount = 0;
        }

        /// <summary>
        /// 大区，对应xrank服务申请的world id
        /// </summary>
        public int Zone;

        /// <summary>
        /// 玩家的附属属性，如城市。xrank会根据这个分多个榜单
        /// </summary>
        public int ScoreType;

        /// <summary>
        /// 角色ID
        /// </summary>
        public ulong Uid;

        /// <summary>
        /// topN榜单的offset偏移
        /// </summary>
        public uint Offset;

        /// <summary>
        /// topN榜单的limit最大限制，如果为0不拉取topN,为-1拉取到榜单最后一位
        /// </summary>
        public int Limit;

        /// <summary>
        /// 模糊榜单排名在前百分之几的玩家，0.1%就赋值为0.1
        /// </summary>
        public float UpDistance;

        /// <summary>
        /// 每个区间展示的玩家数量
        /// </summary>
        public ushort UpCount;

        public void WriteCs(IBuffer buffer)
        {
            buffer.WriteInt32(Zone, Endianness.Big);
            buffer.WriteInt32(ScoreType, Endianness.Big);
            buffer.WriteUInt64(Uid, Endianness.Big);
            buffer.WriteUInt32(Offset, Endianness.Big);
            buffer.WriteInt32(Limit, Endianness.Big);
            buffer.WriteFloat(UpDistance, Endianness.Big);
            buffer.WriteUInt16(UpCount, Endianness.Big);
        }

        public void ReadCs(IBuffer buffer)
        {
            Zone = buffer.ReadInt32(Endianness.Big);
            ScoreType = buffer.ReadInt32(Endianness.Big);
            Uid = buffer.ReadUInt64(Endianness.Big);
            Offset = buffer.ReadUInt32(Endianness.Big);
            Limit = buffer.ReadInt32(Endianness.Big);
            UpDistance = buffer.ReadFloat(Endianness.Big);
            UpCount = buffer.ReadUInt16(Endianness.Big);
        }

    }
}
