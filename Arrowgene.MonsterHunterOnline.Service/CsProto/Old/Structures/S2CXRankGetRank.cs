/*
* This file is part of Arrowgene.MonsterHunterOnline
*
* Arrowgene.MonsterHunterOnline is a server implementation for the game "Monster Hunter Online".
* Copyright (C) 2023-2024 "all contributors"
*
* Github: https://github.com/sebastian-heinz/Arrowgene.MonsterHunterOnline
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU Affero General Public License as published
*  by the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU Affero General Public License for more details.
*
*  You should have received a copy of the GNU Affero General Public License
*  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

using System.Collections.Generic;
using Arrowgene.Buffers;
using Arrowgene.Logging;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Core;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Enums;

namespace Arrowgene.MonsterHunterOnline.Service.CsProto.Structures
{

    /// <summary>
    /// xrank榜单数据响应
    /// </summary>
    public class S2CXRankGetRank : IStructure
    {
        private static readonly ILogger Logger = LogProvider.Logger(typeof(S2CXRankGetRank));

        public S2CXRankGetRank()
        {
            Result = 0;
            Zone = 0;
            ScoreType = 0;
            Offset = 0;
            total = 0;
            topUsers = new List<CSXRankUserInfo>();
            selfBlurRank = new CSXRankUserInfo();
            BlurUsers = new List<CSXRankUserInfo>();
        }

        /// <summary>
        /// 结果，0为正常
        /// </summary>
        public int Result;

        /// <summary>
        /// 大区，对应xrank服务申请的world id
        /// </summary>
        public int Zone;

        /// <summary>
        /// 玩家的附属属性，如城市。xrank会根据这个分多个榜单
        /// </summary>
        public int ScoreType;

        /// <summary>
        /// topN榜单中起始排名
        /// </summary>
        public uint Offset;

        /// <summary>
        /// topN榜单中总玩家数
        /// </summary>
        public uint total;

        /// <summary>
        /// topN榜单的limit最大限制，如果为0不拉取topN,为-1拉取到榜单最后一位
        /// </summary>
        public List<CSXRankUserInfo> topUsers;

        /// <summary>
        /// 玩家自己的排名信息
        /// </summary>
        public CSXRankUserInfo selfBlurRank;

        /// <summary>
        /// 模糊排名部分玩家列表
        /// </summary>
        public List<CSXRankUserInfo> BlurUsers;

        public void Write(IBuffer buffer)
        {
            buffer.WriteInt32(Result, Endianness.Big);
            buffer.WriteInt32(Zone, Endianness.Big);
            buffer.WriteInt32(ScoreType, Endianness.Big);
            buffer.WriteUInt32(Offset, Endianness.Big);
            buffer.WriteUInt32(total, Endianness.Big);
            int topUsersCount = (int)topUsers.Count;
            buffer.WriteInt32(topUsersCount, Endianness.Big);
            for (int i = 0; i < topUsersCount; i++)
            {
                topUsers[i].Write(buffer);
            }
            selfBlurRank.Write(buffer);
            int blurUsersCount = (int)BlurUsers.Count;
            buffer.WriteInt32(blurUsersCount, Endianness.Big);
            for (int i = 0; i < blurUsersCount; i++)
            {
                BlurUsers[i].Write(buffer);
            }
        }

        public void Read(IBuffer buffer)
        {
            Result = buffer.ReadInt32(Endianness.Big);
            Zone = buffer.ReadInt32(Endianness.Big);
            ScoreType = buffer.ReadInt32(Endianness.Big);
            Offset = buffer.ReadUInt32(Endianness.Big);
            total = buffer.ReadUInt32(Endianness.Big);
            topUsers.Clear();
            int topUsersCount = buffer.ReadInt32(Endianness.Big);
            for (int i = 0; i < topUsersCount; i++)
            {
                CSXRankUserInfo topUsersEntry = new CSXRankUserInfo();
                topUsersEntry.Read(buffer);
                topUsers.Add(topUsersEntry);
            }
            selfBlurRank.Read(buffer);
            BlurUsers.Clear();
            int blurUsersCount = buffer.ReadInt32(Endianness.Big);
            for (int i = 0; i < blurUsersCount; i++)
            {
                CSXRankUserInfo BlurUsersEntry = new CSXRankUserInfo();
                BlurUsersEntry.Read(buffer);
                BlurUsers.Add(BlurUsersEntry);
            }
        }

    }
}
