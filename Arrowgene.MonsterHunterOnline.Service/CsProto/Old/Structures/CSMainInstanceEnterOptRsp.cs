/*
* This file is part of Arrowgene.MonsterHunterOnline
*
* Arrowgene.MonsterHunterOnline is a server implementation for the game "Monster Hunter Online".
* Copyright (C) 2023-2024 "all contributors"
*
* Github: https://github.com/sebastian-heinz/Arrowgene.MonsterHunterOnline
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU Affero General Public License as published
*  by the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU Affero General Public License for more details.
*
*  You should have received a copy of the GNU Affero General Public License
*  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

using System.Collections.Generic;
using Arrowgene.Buffers;
using Arrowgene.Logging;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Core;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Enums;

namespace Arrowgene.MonsterHunterOnline.Service.CsProto.Structures
{

    /// <summary>
    /// 副本主UI操作进入响应
    /// </summary>
    public class CSMainInstanceEnterOptRsp : ICsStructure
    {
        private static readonly ILogger Logger = LogProvider.Logger(typeof(CSMainInstanceEnterOptRsp));

        public CSMainInstanceEnterOptRsp()
        {
            NetId = 0;
            ErrCode = 0;
            LevelID = 0;
            WarningFlag = 0;
            UIInfos = new List<CSBSMRoomUIPlayerInfo>();
            UseEmploye = 0;
            WeaponTrialLevel = 0;
            WeaponType = 0;
        }

        /// <summary>
        /// 谁的错误码
        /// </summary>
        public int NetId;

        /// <summary>
        /// 错误码
        /// </summary>
        public int ErrCode;

        /// <summary>
        /// LevelID
        /// </summary>
        public int LevelID;

        /// <summary>
        /// Warning标记
        /// </summary>
        public byte WarningFlag;

        public List<CSBSMRoomUIPlayerInfo> UIInfos;

        /// <summary>
        /// 雇佣兵
        /// </summary>
        public int UseEmploye;

        /// <summary>
        /// 武器试炼关等级
        /// </summary>
        public int WeaponTrialLevel;

        /// <summary>
        /// 武器试炼武器类型
        /// </summary>
        public int WeaponType;

        public void WriteCs(IBuffer buffer)
        {
            buffer.WriteInt32(NetId, Endianness.Big);
            buffer.WriteInt32(ErrCode, Endianness.Big);
            buffer.WriteInt32(LevelID, Endianness.Big);
            buffer.WriteByte(WarningFlag);
            short uIInfosCount = (short)UIInfos.Count;
            buffer.WriteInt16(uIInfosCount, Endianness.Big);
            for (int i = 0; i < uIInfosCount; i++)
            {
                UIInfos[i].WriteCs(buffer);
            }
            buffer.WriteInt32(UseEmploye, Endianness.Big);
            buffer.WriteInt32(WeaponTrialLevel, Endianness.Big);
            buffer.WriteInt32(WeaponType, Endianness.Big);
        }

        public void ReadCs(IBuffer buffer)
        {
            NetId = buffer.ReadInt32(Endianness.Big);
            ErrCode = buffer.ReadInt32(Endianness.Big);
            LevelID = buffer.ReadInt32(Endianness.Big);
            WarningFlag = buffer.ReadByte();
            UIInfos.Clear();
            short uIInfosCount = buffer.ReadInt16(Endianness.Big);
            for (int i = 0; i < uIInfosCount; i++)
            {
                CSBSMRoomUIPlayerInfo UIInfosEntry = new CSBSMRoomUIPlayerInfo();
                UIInfosEntry.ReadCs(buffer);
                UIInfos.Add(UIInfosEntry);
            }
            UseEmploye = buffer.ReadInt32(Endianness.Big);
            WeaponTrialLevel = buffer.ReadInt32(Endianness.Big);
            WeaponType = buffer.ReadInt32(Endianness.Big);
        }

    }
}
