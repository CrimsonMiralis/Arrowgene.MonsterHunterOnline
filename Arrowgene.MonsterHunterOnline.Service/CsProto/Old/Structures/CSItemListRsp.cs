/*
* This file is part of Arrowgene.MonsterHunterOnline
*
* Arrowgene.MonsterHunterOnline is a server implementation for the game "Monster Hunter Online".
* Copyright (C) 2023-2024 "all contributors"
*
* Github: https://github.com/sebastian-heinz/Arrowgene.MonsterHunterOnline
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU Affero General Public License as published
*  by the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU Affero General Public License for more details.
*
*  You should have received a copy of the GNU Affero General Public License
*  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

using System.Collections.Generic;
using Arrowgene.Buffers;
using Arrowgene.Logging;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Core;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Enums;

namespace Arrowgene.MonsterHunterOnline.Service.CsProto.Structures
{

    public class CSItemListRsp : IRemoteDataInfo
    {
        private static readonly ILogger Logger = LogProvider.Logger(typeof(CSItemListRsp));

        public CSItemListRsp()
        {
            StoreSize = 0;
            NormalSize = 0;
            MaterialStoreSize = 0;
            BagItem = new List<byte>();
            EquipItem = new List<byte>();
            StoreItem = new List<byte>();
            ItemUseOnceList = new List<ushort>();
        }

        public ROMTE_DATA_TYPE DataType => ROMTE_DATA_TYPE.ITEMMGR_DATA_TYPE;

        /// <summary>
        /// 仓库大小
        /// </summary>
        public ushort StoreSize;

        /// <summary>
        /// 普通背包容量大小
        /// </summary>
        public ushort NormalSize;

        /// <summary>
        /// 素材仓库大小
        /// </summary>
        public ushort MaterialStoreSize;

        /// <summary>
        /// 背包道具数据
        /// </summary>
        public List<byte> BagItem;

        /// <summary>
        /// 装备数据
        /// </summary>
        public List<byte> EquipItem;

        /// <summary>
        /// 仓库数据
        /// </summary>
        public List<byte> StoreItem;

        /// <summary>
        /// 唯一使用物品列表
        /// </summary>
        public List<ushort> ItemUseOnceList;

        public void Write(IBuffer buffer)
        {
            buffer.WriteUInt16(StoreSize, Endianness.Big);
            buffer.WriteUInt16(NormalSize, Endianness.Big);
            buffer.WriteUInt16(MaterialStoreSize, Endianness.Big);
            int bagItemCount = (int)BagItem.Count;
            buffer.WriteInt32(bagItemCount, Endianness.Big);
            for (int i = 0; i < bagItemCount; i++)
            {
                buffer.WriteByte(BagItem[i]);
            }
            ushort equipItemCount = (ushort)EquipItem.Count;
            buffer.WriteUInt16(equipItemCount, Endianness.Big);
            for (int i = 0; i < equipItemCount; i++)
            {
                buffer.WriteByte(EquipItem[i]);
            }
            int storeItemCount = (int)StoreItem.Count;
            buffer.WriteInt32(storeItemCount, Endianness.Big);
            for (int i = 0; i < storeItemCount; i++)
            {
                buffer.WriteByte(StoreItem[i]);
            }
            ushort itemUseOnceListCount = (ushort)ItemUseOnceList.Count;
            buffer.WriteUInt16(itemUseOnceListCount, Endianness.Big);
            for (int i = 0; i < itemUseOnceListCount; i++)
            {
                buffer.WriteUInt16(ItemUseOnceList[i], Endianness.Big);
            }
        }

        public void Read(IBuffer buffer)
        {
            StoreSize = buffer.ReadUInt16(Endianness.Big);
            NormalSize = buffer.ReadUInt16(Endianness.Big);
            MaterialStoreSize = buffer.ReadUInt16(Endianness.Big);
            BagItem.Clear();
            int bagItemCount = buffer.ReadInt32(Endianness.Big);
            for (int i = 0; i < bagItemCount; i++)
            {
                byte BagItemEntry = buffer.ReadByte();
                BagItem.Add(BagItemEntry);
            }
            EquipItem.Clear();
            ushort equipItemCount = buffer.ReadUInt16(Endianness.Big);
            for (int i = 0; i < equipItemCount; i++)
            {
                byte EquipItemEntry = buffer.ReadByte();
                EquipItem.Add(EquipItemEntry);
            }
            StoreItem.Clear();
            int storeItemCount = buffer.ReadInt32(Endianness.Big);
            for (int i = 0; i < storeItemCount; i++)
            {
                byte StoreItemEntry = buffer.ReadByte();
                StoreItem.Add(StoreItemEntry);
            }
            ItemUseOnceList.Clear();
            ushort itemUseOnceListCount = buffer.ReadUInt16(Endianness.Big);
            for (int i = 0; i < itemUseOnceListCount; i++)
            {
                ushort ItemUseOnceListEntry = buffer.ReadUInt16(Endianness.Big);
                ItemUseOnceList.Add(ItemUseOnceListEntry);
            }
        }

    }
}
