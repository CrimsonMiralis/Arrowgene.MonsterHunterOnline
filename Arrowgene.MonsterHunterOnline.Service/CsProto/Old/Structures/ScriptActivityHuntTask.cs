/*
* This file is part of Arrowgene.MonsterHunterOnline
*
* Arrowgene.MonsterHunterOnline is a server implementation for the game "Monster Hunter Online".
* Copyright (C) 2023-2024 "all contributors"
*
* Github: https://github.com/sebastian-heinz/Arrowgene.MonsterHunterOnline
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU Affero General Public License as published
*  by the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU Affero General Public License for more details.
*
*  You should have received a copy of the GNU Affero General Public License
*  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

using System.Collections.Generic;
using Arrowgene.Buffers;
using Arrowgene.Logging;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Core;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Enums;

namespace Arrowgene.MonsterHunterOnline.Service.CsProto.Structures
{

    public class ScriptActivityHuntTask : ICsStructure
    {
        private static readonly ILogger Logger = LogProvider.Logger(typeof(ScriptActivityHuntTask));

        public ScriptActivityHuntTask()
        {
            Desc = "";
            Bosses = new List<int>();
            Tags = new List<int>();
            NeedIntenseFighting = 0;
            HuntNum = 0;
            CounterID = 0;
        }

        /// <summary>
        /// 任务描述
        /// </summary>
        public string Desc;

        /// <summary>
        /// Boss条件数据
        /// </summary>
        public List<int> Bosses;

        /// <summary>
        /// Tag条件数据
        /// </summary>
        public List<int> Tags;

        /// <summary>
        /// 激斗风格条件
        /// </summary>
        public byte NeedIntenseFighting;

        /// <summary>
        /// 需要狩猎几次
        /// </summary>
        public uint HuntNum;

        /// <summary>
        /// 狩猎计数器
        /// </summary>
        public byte CounterID;

        public void WriteCs(IBuffer buffer)
        {
            buffer.WriteInt32(Desc.Length + 1, Endianness.Big);
            buffer.WriteCString(Desc);
            byte bossesCount = (byte)Bosses.Count;
            buffer.WriteByte(bossesCount);
            for (int i = 0; i < bossesCount; i++)
            {
                buffer.WriteInt32(Bosses[i], Endianness.Big);
            }
            byte tagsCount = (byte)Tags.Count;
            buffer.WriteByte(tagsCount);
            for (int i = 0; i < tagsCount; i++)
            {
                buffer.WriteInt32(Tags[i], Endianness.Big);
            }
            buffer.WriteByte(NeedIntenseFighting);
            buffer.WriteUInt32(HuntNum, Endianness.Big);
            buffer.WriteByte(CounterID);
        }

        public void ReadCs(IBuffer buffer)
        {
            int DescEntryLen = buffer.ReadInt32(Endianness.Big);
            Desc = buffer.ReadString(DescEntryLen);
            Bosses.Clear();
            byte bossesCount = buffer.ReadByte();
            for (int i = 0; i < bossesCount; i++)
            {
                int BossesEntry = buffer.ReadInt32(Endianness.Big);
                Bosses.Add(BossesEntry);
            }
            Tags.Clear();
            byte tagsCount = buffer.ReadByte();
            for (int i = 0; i < tagsCount; i++)
            {
                int TagsEntry = buffer.ReadInt32(Endianness.Big);
                Tags.Add(TagsEntry);
            }
            NeedIntenseFighting = buffer.ReadByte();
            HuntNum = buffer.ReadUInt32(Endianness.Big);
            CounterID = buffer.ReadByte();
        }

    }
}
