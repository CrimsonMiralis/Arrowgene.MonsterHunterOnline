/*
* This file is part of Arrowgene.MonsterHunterOnline
*
* Arrowgene.MonsterHunterOnline is a server implementation for the game "Monster Hunter Online".
* Copyright (C) 2023-2024 "all contributors"
*
* Github: https://github.com/sebastian-heinz/Arrowgene.MonsterHunterOnline
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU Affero General Public License as published
*  by the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU Affero General Public License for more details.
*
*  You should have received a copy of the GNU Affero General Public License
*  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

using System.Collections.Generic;
using Arrowgene.Buffers;
using Arrowgene.Logging;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Constant;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Core;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Enums;

namespace Arrowgene.MonsterHunterOnline.Service.CsProto.Structures
{

    /// <summary>
    /// player appear notify
    /// </summary>
    public class CSPlayerAppearNtf : ICsStructure
    {
        private static readonly ILogger Logger = LogProvider.Logger(typeof(CSPlayerAppearNtf));

        public CSPlayerAppearNtf()
        {
            NetID = 0;
            SessionID = 0;
            Name = "";
            Gender = 0;
            Pose = new CSQuatT();
            AvatarSetID = 0;
            Health = 0.0f;
            HealthRecover = 0.0f;
            Faction = 0;
            Weapon = 0;
            State = 0;
            HasTeam = 0;
            TeamHasPwd = 0;
            RandSeed = 0;
            Equip = new List<CSAvatarItem>();
            Attr = new List<byte>();
            Buff = new List<byte>();
            ProjIds = new List<CSAmmoInfo>();
            ParentEntityGUID = 0;
            Type = 0;
            state1 = 0;
            state2 = 0;
            state3 = 0;
            state4 = 0;
            AGState = 0;
            SubState = 0;
            Guilder = new CSGuilderOutline();
            StarLevel = "";
            FacialInfo = new short[CsProtoConstant.CS_MAX_FACIALINFO_COUNT];
            VehicleID = 0;
            GrowHighDay = 0;
            GrowHeight = 0;
        }

        /// <summary>
        /// logic entity id
        /// </summary>
        public int NetID;

        /// <summary>
        /// Session id
        /// </summary>
        public uint SessionID;

        /// <summary>
        /// role name
        /// </summary>
        public string Name;

        /// <summary>
        /// gender fo role
        /// </summary>
        public byte Gender;

        /// <summary>
        /// Appear location
        /// </summary>
        public CSQuatT Pose;

        /// <summary>
        /// Avatar Set
        /// </summary>
        public byte AvatarSetID;

        /// <summary>
        /// health
        /// </summary>
        public float Health;

        /// <summary>
        /// health recover
        /// </summary>
        public float HealthRecover;

        /// <summary>
        /// 阵营
        /// </summary>
        public int Faction;

        public int Weapon;

        /// <summary>
        /// 状态
        /// </summary>
        public int State;

        /// <summary>
        /// 是否有队伍
        /// </summary>
        public byte HasTeam;

        /// <summary>
        /// 队伍是否有密码
        /// </summary>
        public byte TeamHasPwd;

        /// <summary>
        /// 随机种子
        /// </summary>
        public uint RandSeed;

        /// <summary>
        /// 装备物品
        /// </summary>
        public List<CSAvatarItem> Equip;

        /// <summary>
        /// attr数据
        /// </summary>
        public List<byte> Attr;

        /// <summary>
        /// Buff数据
        /// </summary>
        public List<byte> Buff;

        public List<CSAmmoInfo> ProjIds;

        public ulong ParentEntityGUID;

        /// <summary>
        /// 队列种类
        /// </summary>
        public byte Type;

        /// <summary>
        /// 玩家Stance或者FSM状态
        /// </summary>
        public uint state1;

        /// <summary>
        /// 玩家Stance或者FSM状态
        /// </summary>
        public uint state2;

        /// <summary>
        /// 玩家Stance或者FSM状态
        /// </summary>
        public uint state3;

        /// <summary>
        /// 玩家Stance或者FSM状态
        /// </summary>
        public uint state4;

        /// <summary>
        /// 玩家AG状态
        /// </summary>
        public uint AGState;

        /// <summary>
        /// 玩家子状态
        /// </summary>
        public uint SubState;

        /// <summary>
        /// 团员
        /// </summary>
        public CSGuilderOutline Guilder;

        /// <summary>
        /// 星级
        /// </summary>
        public string StarLevel;

        /// <summary>
        /// 捏脸数据集合
        /// </summary>
        public short[] FacialInfo;

        /// <summary>
        /// 载具ID
        /// </summary>
        public int VehicleID;

        /// <summary>
        /// 长高时间
        /// </summary>
        public int GrowHighDay;

        /// <summary>
        /// 长高值
        /// </summary>
        public int GrowHeight;

        public void WriteCs(IBuffer buffer)
        {
            buffer.WriteInt32(NetID, Endianness.Big);
            buffer.WriteUInt32(SessionID, Endianness.Big);
            buffer.WriteInt32(Name.Length + 1, Endianness.Big);
            buffer.WriteCString(Name);
            buffer.WriteByte(Gender);
            Pose.WriteCs(buffer);
            buffer.WriteByte(AvatarSetID);
            buffer.WriteFloat(Health, Endianness.Big);
            buffer.WriteFloat(HealthRecover, Endianness.Big);
            buffer.WriteInt32(Faction, Endianness.Big);
            buffer.WriteInt32(Weapon, Endianness.Big);
            buffer.WriteInt32(State, Endianness.Big);
            buffer.WriteByte(HasTeam);
            buffer.WriteByte(TeamHasPwd);
            buffer.WriteUInt32(RandSeed, Endianness.Big);
            ushort equipCount = (ushort)Equip.Count;
            buffer.WriteUInt16(equipCount, Endianness.Big);
            for (int i = 0; i < equipCount; i++)
            {
                Equip[i].WriteCs(buffer);
            }
            ushort attrCount = (ushort)Attr.Count;
            buffer.WriteUInt16(attrCount, Endianness.Big);
            for (int i = 0; i < attrCount; i++)
            {
                buffer.WriteByte(Attr[i]);
            }
            ushort buffCount = (ushort)Buff.Count;
            buffer.WriteUInt16(buffCount, Endianness.Big);
            for (int i = 0; i < buffCount; i++)
            {
                buffer.WriteByte(Buff[i]);
            }
            int projIdsCount = (int)ProjIds.Count;
            buffer.WriteInt32(projIdsCount, Endianness.Big);
            for (int i = 0; i < projIdsCount; i++)
            {
                ProjIds[i].WriteCs(buffer);
            }
            buffer.WriteUInt64(ParentEntityGUID, Endianness.Big);
            buffer.WriteByte(Type);
            buffer.WriteUInt32(state1, Endianness.Big);
            buffer.WriteUInt32(state2, Endianness.Big);
            buffer.WriteUInt32(state3, Endianness.Big);
            buffer.WriteUInt32(state4, Endianness.Big);
            buffer.WriteUInt32(AGState, Endianness.Big);
            buffer.WriteUInt32(SubState, Endianness.Big);
            Guilder.WriteCs(buffer);
            buffer.WriteInt32(StarLevel.Length + 1, Endianness.Big);
            buffer.WriteCString(StarLevel);
            for (int i = 0; i < CsProtoConstant.CS_MAX_FACIALINFO_COUNT; i++)
            {
                buffer.WriteInt16(FacialInfo[i], Endianness.Big);
            }
            buffer.WriteInt32(VehicleID, Endianness.Big);
            buffer.WriteInt32(GrowHighDay, Endianness.Big);
            buffer.WriteInt32(GrowHeight, Endianness.Big);
        }

        public void ReadCs(IBuffer buffer)
        {
            NetID = buffer.ReadInt32(Endianness.Big);
            SessionID = buffer.ReadUInt32(Endianness.Big);
            int NameEntryLen = buffer.ReadInt32(Endianness.Big);
            Name = buffer.ReadString(NameEntryLen);
            Gender = buffer.ReadByte();
            Pose.ReadCs(buffer);
            AvatarSetID = buffer.ReadByte();
            Health = buffer.ReadFloat(Endianness.Big);
            HealthRecover = buffer.ReadFloat(Endianness.Big);
            Faction = buffer.ReadInt32(Endianness.Big);
            Weapon = buffer.ReadInt32(Endianness.Big);
            State = buffer.ReadInt32(Endianness.Big);
            HasTeam = buffer.ReadByte();
            TeamHasPwd = buffer.ReadByte();
            RandSeed = buffer.ReadUInt32(Endianness.Big);
            Equip.Clear();
            ushort equipCount = buffer.ReadUInt16(Endianness.Big);
            for (int i = 0; i < equipCount; i++)
            {
                CSAvatarItem EquipEntry = new CSAvatarItem();
                EquipEntry.ReadCs(buffer);
                Equip.Add(EquipEntry);
            }
            Attr.Clear();
            ushort attrCount = buffer.ReadUInt16(Endianness.Big);
            for (int i = 0; i < attrCount; i++)
            {
                byte AttrEntry = buffer.ReadByte();
                Attr.Add(AttrEntry);
            }
            Buff.Clear();
            ushort buffCount = buffer.ReadUInt16(Endianness.Big);
            for (int i = 0; i < buffCount; i++)
            {
                byte BuffEntry = buffer.ReadByte();
                Buff.Add(BuffEntry);
            }
            ProjIds.Clear();
            int projIdsCount = buffer.ReadInt32(Endianness.Big);
            for (int i = 0; i < projIdsCount; i++)
            {
                CSAmmoInfo ProjIdsEntry = new CSAmmoInfo();
                ProjIdsEntry.ReadCs(buffer);
                ProjIds.Add(ProjIdsEntry);
            }
            ParentEntityGUID = buffer.ReadUInt64(Endianness.Big);
            Type = buffer.ReadByte();
            state1 = buffer.ReadUInt32(Endianness.Big);
            state2 = buffer.ReadUInt32(Endianness.Big);
            state3 = buffer.ReadUInt32(Endianness.Big);
            state4 = buffer.ReadUInt32(Endianness.Big);
            AGState = buffer.ReadUInt32(Endianness.Big);
            SubState = buffer.ReadUInt32(Endianness.Big);
            Guilder.ReadCs(buffer);
            int StarLevelEntryLen = buffer.ReadInt32(Endianness.Big);
            StarLevel = buffer.ReadString(StarLevelEntryLen);
            for (int i = 0; i < CsProtoConstant.CS_MAX_FACIALINFO_COUNT; i++)
            {
                FacialInfo[i] = buffer.ReadInt16(Endianness.Big);
            }
            VehicleID = buffer.ReadInt32(Endianness.Big);
            GrowHighDay = buffer.ReadInt32(Endianness.Big);
            GrowHeight = buffer.ReadInt32(Endianness.Big);
        }

    }
}
