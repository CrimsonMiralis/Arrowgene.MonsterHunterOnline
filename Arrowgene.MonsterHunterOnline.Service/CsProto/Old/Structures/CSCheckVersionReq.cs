/*
* This file is part of Arrowgene.MonsterHunterOnline
*
* Arrowgene.MonsterHunterOnline is a server implementation for the game "Monster Hunter Online".
* Copyright (C) 2023-2024 "all contributors"
*
* Github: https://github.com/sebastian-heinz/Arrowgene.MonsterHunterOnline
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU Affero General Public License as published
*  by the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU Affero General Public License for more details.
*
*  You should have received a copy of the GNU Affero General Public License
*  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

using System.Collections.Generic;
using Arrowgene.Buffers;
using Arrowgene.Logging;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Core;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Enums;

namespace Arrowgene.MonsterHunterOnline.Service.CsProto.Structures
{

    /// <summary>
    /// 检查版本请求
    /// </summary>
    public class CSCheckVersionReq : ICsStructure
    {
        private static readonly ILogger Logger = LogProvider.Logger(typeof(CSCheckVersionReq));

        public CSCheckVersionReq()
        {
            MajorVerNo = 0;
            MinorVerNo = 0;
            RevisVerNo = 0;
            BuildVerNo = 0;
            IgnoreTag = 0;
            ProtoVer = 0;
            Feature = new CSFeatureInfo();
            Reserve1 = 0;
            Reserve2 = 0;
            TGPTicket = new List<byte>();
        }

        /// <summary>
        /// 客户端主版本号
        /// </summary>
        public int MajorVerNo;

        /// <summary>
        /// 客户端子版本号
        /// </summary>
        public int MinorVerNo;

        /// <summary>
        /// 客户端修正版本号
        /// </summary>
        public int RevisVerNo;

        /// <summary>
        /// 客户端编译版本号
        /// </summary>
        public int BuildVerNo;

        /// <summary>
        /// 是否忽略版本检查的标志
        /// </summary>
        public int IgnoreTag;

        /// <summary>
        /// 客户端协议的版本号，用于协议的版本裁剪
        /// </summary>
        public int ProtoVer;

        /// <summary>
        /// Feature
        /// </summary>
        public CSFeatureInfo Feature;

        /// <summary>
        /// 保留字段1，由于此条协议用户客户端和服务器交换版本，故此条协议不支持版本裁剪
        /// </summary>
        public int Reserve1;

        /// <summary>
        /// 保留字段2，由于此条协议用户客户端和服务器交换版本，故此条协议不支持版本裁剪
        /// </summary>
        public int Reserve2;

        /// <summary>
        /// tgp签名数据
        /// </summary>
        public List<byte> TGPTicket;

        public void WriteCs(IBuffer buffer)
        {
            buffer.WriteInt32(MajorVerNo, Endianness.Big);
            buffer.WriteInt32(MinorVerNo, Endianness.Big);
            buffer.WriteInt32(RevisVerNo, Endianness.Big);
            buffer.WriteInt32(BuildVerNo, Endianness.Big);
            buffer.WriteInt32(IgnoreTag, Endianness.Big);
            buffer.WriteInt32(ProtoVer, Endianness.Big);
            Feature.WriteCs(buffer);
            buffer.WriteInt32(Reserve1, Endianness.Big);
            buffer.WriteInt32(Reserve2, Endianness.Big);
            int tGPTicketCount = (int)TGPTicket.Count;
            buffer.WriteInt32(tGPTicketCount, Endianness.Big);
            for (int i = 0; i < tGPTicketCount; i++)
            {
                buffer.WriteByte(TGPTicket[i]);
            }
        }

        public void ReadCs(IBuffer buffer)
        {
            MajorVerNo = buffer.ReadInt32(Endianness.Big);
            MinorVerNo = buffer.ReadInt32(Endianness.Big);
            RevisVerNo = buffer.ReadInt32(Endianness.Big);
            BuildVerNo = buffer.ReadInt32(Endianness.Big);
            IgnoreTag = buffer.ReadInt32(Endianness.Big);
            ProtoVer = buffer.ReadInt32(Endianness.Big);
            Feature.ReadCs(buffer);
            Reserve1 = buffer.ReadInt32(Endianness.Big);
            Reserve2 = buffer.ReadInt32(Endianness.Big);
            TGPTicket.Clear();
            int tGPTicketCount = buffer.ReadInt32(Endianness.Big);
            for (int i = 0; i < tGPTicketCount; i++)
            {
                byte TGPTicketEntry = buffer.ReadByte();
                TGPTicket.Add(TGPTicketEntry);
            }
        }

    }
}
