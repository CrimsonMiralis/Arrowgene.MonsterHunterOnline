/*
* This file is part of Arrowgene.MonsterHunterOnline
*
* Arrowgene.MonsterHunterOnline is a server implementation for the game "Monster Hunter Online".
* Copyright (C) 2023-2024 "all contributors"
*
* Github: https://github.com/sebastian-heinz/Arrowgene.MonsterHunterOnline
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU Affero General Public License as published
*  by the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU Affero General Public License for more details.
*
*  You should have received a copy of the GNU Affero General Public License
*  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

using System.Collections.Generic;
using Arrowgene.Buffers;
using Arrowgene.Logging;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Core;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Enums;

namespace Arrowgene.MonsterHunterOnline.Service.CsProto.Structures
{

    public class CSRemoteDataLoadRsp : IStructure
    {
        private static readonly ILogger Logger = LogProvider.Logger(typeof(CSRemoteDataLoadRsp));

        public CSRemoteDataLoadRsp(RemoteDataInfo _RemoteData)
        {
            RemoteData = _RemoteData;
        }

        /// <summary>
        /// 数据类型
        /// </summary>

        /// <summary>
        /// 数据
        /// </summary>
        public RemoteDataInfo RemoteData;

        public void Write(IBuffer buffer)
        {
            buffer.WriteUInt16((ushort)RemoteData.DataType, Endianness.Big);
            RemoteData.Write(buffer);
        }

        public void Read(IBuffer buffer)
        {
            ROMTE_DATA_TYPE RemoteDataInfo_DataType = (ROMTE_DATA_TYPE)buffer.ReadUInt16(Endianness.Big);
            switch (RemoteDataInfo_DataType)
            {
                case ROMTE_DATA_TYPE.ITEMMGR_DATA_TYPE:
                    RemoteData = new CSItemListRsp();
                    break;
                case ROMTE_DATA_TYPE.LEVELINFO_DATA_TYPE:
                    RemoteData = new CSPlayerLevelInitInfo();
                    break;
                case ROMTE_DATA_TYPE.HUNTERSTAR_DATA_TYPE:
                    RemoteData = new RemoteDataInitInfo(ROMTE_DATA_TYPE.HUNTERSTAR_DATA_TYPE);
                    break;
                case ROMTE_DATA_TYPE.TASKSYS_DATA_TYPE:
                    RemoteData = new RemoteDataInitInfo(ROMTE_DATA_TYPE.TASKSYS_DATA_TYPE);
                    break;
                case ROMTE_DATA_TYPE.NORMAL_LIMIT_DATATYPE:
                    RemoteData = new RemoteDataInitInfo(ROMTE_DATA_TYPE.NORMAL_LIMIT_DATATYPE);
                    break;
                case ROMTE_DATA_TYPE.SUPPLY_PLAN_DATA_TYPE:
                    RemoteData = new RemoteDataInitInfo(ROMTE_DATA_TYPE.SUPPLY_PLAN_DATA_TYPE);
                    break;
            }
            if (RemoteData != null) {
                RemoteData.Read(buffer);
            }
            else {
                Logger.Error("Failed to create 'RemoteData' instance of type 'RemoteDataInfo'");
            }
        }

    }
}
