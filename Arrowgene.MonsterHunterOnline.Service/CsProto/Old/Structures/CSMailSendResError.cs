/*
* This file is part of Arrowgene.MonsterHunterOnline
*
* Arrowgene.MonsterHunterOnline is a server implementation for the game "Monster Hunter Online".
* Copyright (C) 2023-2024 "all contributors"
*
* Github: https://github.com/sebastian-heinz/Arrowgene.MonsterHunterOnline
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU Affero General Public License as published
*  by the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU Affero General Public License for more details.
*
*  You should have received a copy of the GNU Affero General Public License
*  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

using System.Collections.Generic;
using Arrowgene.Buffers;
using Arrowgene.Logging;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Core;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Enums;

namespace Arrowgene.MonsterHunterOnline.Service.CsProto.Structures
{

    public class CSMailSendResError : CSMailSendResResult
    {
        private static readonly ILogger Logger = LogProvider.Logger(typeof(CSMailSendResError));

        public CSMailSendResError()
        {
            ErrMsg = "";
            MailRoleTo = new List<CRole>();
            ErrCode = new List<int>();
        }

        /// <summary>
        /// 错误描述
        /// </summary>
        public string ErrMsg;

        public List<CRole> MailRoleTo;

        /// <summary>
        /// 错误返回代码
        /// </summary>
        public List<int> ErrCode;

        public void Write(IBuffer buffer)
        {
            buffer.WriteInt32(ErrMsg.Length + 1, Endianness.Big);
            buffer.WriteCString(ErrMsg);
            int mailRoleToCount = (int)MailRoleTo.Count;
            buffer.WriteInt32(mailRoleToCount, Endianness.Big);
            for (int i = 0; i < mailRoleToCount; i++)
            {
                MailRoleTo[i].Write(buffer);
            }
            int errCodeCount = (int)ErrCode.Count;
            buffer.WriteInt32(errCodeCount, Endianness.Big);
            for (int i = 0; i < errCodeCount; i++)
            {
                buffer.WriteInt32(ErrCode[i], Endianness.Big);
            }
        }

        public void Read(IBuffer buffer)
        {
            int ErrMsgEntryLen = buffer.ReadInt32(Endianness.Big);
            ErrMsg = buffer.ReadString(ErrMsgEntryLen);
            MailRoleTo.Clear();
            int mailRoleToCount = buffer.ReadInt32(Endianness.Big);
            for (int i = 0; i < mailRoleToCount; i++)
            {
                CRole MailRoleToEntry = new CRole();
                MailRoleToEntry.Read(buffer);
                MailRoleTo.Add(MailRoleToEntry);
            }
            ErrCode.Clear();
            int errCodeCount = buffer.ReadInt32(Endianness.Big);
            for (int i = 0; i < errCodeCount; i++)
            {
                int ErrCodeEntry = buffer.ReadInt32(Endianness.Big);
                ErrCode.Add(ErrCodeEntry);
            }
        }

    }
}
