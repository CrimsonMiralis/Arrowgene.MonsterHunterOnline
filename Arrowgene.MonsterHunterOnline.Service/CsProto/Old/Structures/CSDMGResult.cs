/*
* This file is part of Arrowgene.MonsterHunterOnline
*
* Arrowgene.MonsterHunterOnline is a server implementation for the game "Monster Hunter Online".
* Copyright (C) 2023-2024 "all contributors"
*
* Github: https://github.com/sebastian-heinz/Arrowgene.MonsterHunterOnline
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU Affero General Public License as published
*  by the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU Affero General Public License for more details.
*
*  You should have received a copy of the GNU Affero General Public License
*  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

using System.Collections.Generic;
using Arrowgene.Buffers;
using Arrowgene.Logging;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Constant;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Core;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Enums;

namespace Arrowgene.MonsterHunterOnline.Service.CsProto.Structures
{

    /// <summary>
    /// 服务器发送到客户端的伤害结果返回
    /// </summary>
    public class CSDMGResult : ICsStructure
    {
        private static readonly ILogger Logger = LogProvider.Logger(typeof(CSDMGResult));

        public CSDMGResult()
        {
            DamageResult = 0.0f;
            WaterDamageResult = 0.0f;
            FireDamageResult = 0.0f;
            ElectricDamageResult = 0.0f;
            DragonDamageResult = 0.0f;
            IceDamageResult = 0.0f;
            NonDamageResult = 0.0f;
            PIYOResut = 0;
            StaminaResult = 0;
            DamageMode = 0;
            DefenceLevel = 0;
            InjuryLevel = 0;
            TanDao = 0;
            Attack_levelP = 0;
            HitIndex = 0;
            AttackLogicEntityId = 0;
            HitLogicEntityId = 0;
            DefenceLogicEntityId = 0;
            DamageGener = 0.0f;
            WaterDamageGener = 0.0f;
            FireDamageGener = 0.0f;
            ElectricDamageGener = 0.0f;
            DragonDamageGener = 0.0f;
            IceDamageGener = 0.0f;
            PartId = 0;
            SkillResID = 0;
            ItemType = 0;
            AttackDataID = 0;
            Dir = new CSVec3();
            Pos = new CSVec3();
            Normal = new CSVec3();
            StateBuffID = new int[CsProtoConstant.CS_STATE_BUFF_COUNT];
        }

        /// <summary>
        /// 物理伤害
        /// </summary>
        public float DamageResult;

        /// <summary>
        /// 水属性伤害
        /// </summary>
        public float WaterDamageResult;

        /// <summary>
        /// 火属性伤害
        /// </summary>
        public float FireDamageResult;

        /// <summary>
        /// 雷属性伤害
        /// </summary>
        public float ElectricDamageResult;

        /// <summary>
        /// 龙属性伤害
        /// </summary>
        public float DragonDamageResult;

        /// <summary>
        /// 冰属性伤害
        /// </summary>
        public float IceDamageResult;

        /// <summary>
        /// 无属性伤害
        /// </summary>
        public float NonDamageResult;

        /// <summary>
        /// 晕眩值
        /// </summary>
        public int PIYOResut;

        /// <summary>
        /// 灭气
        /// </summary>
        public int StaminaResult;

        /// <summary>
        /// 负会心 普通 会心
        /// </summary>
        public int DamageMode;

        /// <summary>
        /// 防御等级
        /// </summary>
        public int DefenceLevel;

        /// <summary>
        /// 伤害等级
        /// </summary>
        public int InjuryLevel;

        /// <summary>
        /// 弹刀
        /// </summary>
        public short TanDao;

        /// <summary>
        /// 对人攻击霸体值
        /// </summary>
        public int Attack_levelP;

        /// <summary>
        /// 伤害表现索引
        /// </summary>
        public int HitIndex;

        /// <summary>
        /// 攻击者ID
        /// </summary>
        public int AttackLogicEntityId;

        /// <summary>
        /// 命中者ID
        /// </summary>
        public int HitLogicEntityId;

        /// <summary>
        /// 防御者ID
        /// </summary>
        public int DefenceLogicEntityId;

        /// <summary>
        /// 物理伤害肉质
        /// </summary>
        public float DamageGener;

        /// <summary>
        /// 水属性伤害肉质
        /// </summary>
        public float WaterDamageGener;

        /// <summary>
        /// 火属性伤害肉质
        /// </summary>
        public float FireDamageGener;

        /// <summary>
        /// 雷属性伤害肉质
        /// </summary>
        public float ElectricDamageGener;

        /// <summary>
        /// 龙属性伤害肉质
        /// </summary>
        public float DragonDamageGener;

        /// <summary>
        /// 冰属性伤害肉质
        /// </summary>
        public float IceDamageGener;

        /// <summary>
        /// 命中部位ID
        /// </summary>
        public int PartId;

        /// <summary>
        /// 技能唯一ID
        /// </summary>
        public int SkillResID;

        /// <summary>
        /// 物品
        /// </summary>
        public int ItemType;

        /// <summary>
        /// DamageInfoID
        /// </summary>
        public int AttackDataID;

        /// <summary>
        /// 命中方向
        /// </summary>
        public CSVec3 Dir;

        /// <summary>
        /// 相对命中点
        /// </summary>
        public CSVec3 Pos;

        /// <summary>
        /// normal
        /// </summary>
        public CSVec3 Normal;

        /// <summary>
        /// 异常状态Buff列表
        /// </summary>
        public int[] StateBuffID;

        public void WriteCs(IBuffer buffer)
        {
            buffer.WriteFloat(DamageResult, Endianness.Big);
            buffer.WriteFloat(WaterDamageResult, Endianness.Big);
            buffer.WriteFloat(FireDamageResult, Endianness.Big);
            buffer.WriteFloat(ElectricDamageResult, Endianness.Big);
            buffer.WriteFloat(DragonDamageResult, Endianness.Big);
            buffer.WriteFloat(IceDamageResult, Endianness.Big);
            buffer.WriteFloat(NonDamageResult, Endianness.Big);
            buffer.WriteInt32(PIYOResut, Endianness.Big);
            buffer.WriteInt32(StaminaResult, Endianness.Big);
            buffer.WriteInt32(DamageMode, Endianness.Big);
            buffer.WriteInt32(DefenceLevel, Endianness.Big);
            buffer.WriteInt32(InjuryLevel, Endianness.Big);
            buffer.WriteInt16(TanDao, Endianness.Big);
            buffer.WriteInt32(Attack_levelP, Endianness.Big);
            buffer.WriteInt32(HitIndex, Endianness.Big);
            buffer.WriteInt32(AttackLogicEntityId, Endianness.Big);
            buffer.WriteInt32(HitLogicEntityId, Endianness.Big);
            buffer.WriteInt32(DefenceLogicEntityId, Endianness.Big);
            buffer.WriteFloat(DamageGener, Endianness.Big);
            buffer.WriteFloat(WaterDamageGener, Endianness.Big);
            buffer.WriteFloat(FireDamageGener, Endianness.Big);
            buffer.WriteFloat(ElectricDamageGener, Endianness.Big);
            buffer.WriteFloat(DragonDamageGener, Endianness.Big);
            buffer.WriteFloat(IceDamageGener, Endianness.Big);
            buffer.WriteInt32(PartId, Endianness.Big);
            buffer.WriteInt32(SkillResID, Endianness.Big);
            buffer.WriteInt32(ItemType, Endianness.Big);
            buffer.WriteInt32(AttackDataID, Endianness.Big);
            Dir.WriteCs(buffer);
            Pos.WriteCs(buffer);
            Normal.WriteCs(buffer);
            for (int i = 0; i < CsProtoConstant.CS_STATE_BUFF_COUNT; i++)
            {
                buffer.WriteInt32(StateBuffID[i], Endianness.Big);
            }
        }

        public void ReadCs(IBuffer buffer)
        {
            DamageResult = buffer.ReadFloat(Endianness.Big);
            WaterDamageResult = buffer.ReadFloat(Endianness.Big);
            FireDamageResult = buffer.ReadFloat(Endianness.Big);
            ElectricDamageResult = buffer.ReadFloat(Endianness.Big);
            DragonDamageResult = buffer.ReadFloat(Endianness.Big);
            IceDamageResult = buffer.ReadFloat(Endianness.Big);
            NonDamageResult = buffer.ReadFloat(Endianness.Big);
            PIYOResut = buffer.ReadInt32(Endianness.Big);
            StaminaResult = buffer.ReadInt32(Endianness.Big);
            DamageMode = buffer.ReadInt32(Endianness.Big);
            DefenceLevel = buffer.ReadInt32(Endianness.Big);
            InjuryLevel = buffer.ReadInt32(Endianness.Big);
            TanDao = buffer.ReadInt16(Endianness.Big);
            Attack_levelP = buffer.ReadInt32(Endianness.Big);
            HitIndex = buffer.ReadInt32(Endianness.Big);
            AttackLogicEntityId = buffer.ReadInt32(Endianness.Big);
            HitLogicEntityId = buffer.ReadInt32(Endianness.Big);
            DefenceLogicEntityId = buffer.ReadInt32(Endianness.Big);
            DamageGener = buffer.ReadFloat(Endianness.Big);
            WaterDamageGener = buffer.ReadFloat(Endianness.Big);
            FireDamageGener = buffer.ReadFloat(Endianness.Big);
            ElectricDamageGener = buffer.ReadFloat(Endianness.Big);
            DragonDamageGener = buffer.ReadFloat(Endianness.Big);
            IceDamageGener = buffer.ReadFloat(Endianness.Big);
            PartId = buffer.ReadInt32(Endianness.Big);
            SkillResID = buffer.ReadInt32(Endianness.Big);
            ItemType = buffer.ReadInt32(Endianness.Big);
            AttackDataID = buffer.ReadInt32(Endianness.Big);
            Dir.ReadCs(buffer);
            Pos.ReadCs(buffer);
            Normal.ReadCs(buffer);
            for (int i = 0; i < CsProtoConstant.CS_STATE_BUFF_COUNT; i++)
            {
                StateBuffID[i] = buffer.ReadInt32(Endianness.Big);
            }
        }

    }
}
