/*
* This file is part of Arrowgene.MonsterHunterOnline
*
* Arrowgene.MonsterHunterOnline is a server implementation for the game "Monster Hunter Online".
* Copyright (C) 2023-2024 "all contributors"
*
* Github: https://github.com/sebastian-heinz/Arrowgene.MonsterHunterOnline
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU Affero General Public License as published
*  by the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU Affero General Public License for more details.
*
*  You should have received a copy of the GNU Affero General Public License
*  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

using System.Collections.Generic;
using Arrowgene.Buffers;
using Arrowgene.Logging;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Core;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Enums;

namespace Arrowgene.MonsterHunterOnline.Service.CsProto.Structures
{

    /// <summary>
    /// 等级信息通知
    /// </summary>
    public class CSHunterStarLevelInfoNtf : ICsStructure
    {
        private static readonly ILogger Logger = LogProvider.Logger(typeof(CSHunterStarLevelInfoNtf));

        public CSHunterStarLevelInfoNtf()
        {
            AllScore = 0;
            StarScore = 0;
            StarList = new List<CSHunterStarStar>();
            BranchList = new List<CSHunterStarBranch>();
        }

        /// <summary>
        /// 星级总积分
        /// </summary>
        public int AllScore;

        /// <summary>
        /// 独立星级积分
        /// </summary>
        public int StarScore;

        /// <summary>
        /// 星星列表
        /// </summary>
        public List<CSHunterStarStar> StarList;

        /// <summary>
        /// 分支列表
        /// </summary>
        public List<CSHunterStarBranch> BranchList;

        public void WriteCs(IBuffer buffer)
        {
            buffer.WriteInt32(AllScore, Endianness.Big);
            buffer.WriteInt32(StarScore, Endianness.Big);
            byte starListCount = (byte)StarList.Count;
            buffer.WriteByte(starListCount);
            for (int i = 0; i < starListCount; i++)
            {
                StarList[i].WriteCs(buffer);
            }
            byte branchListCount = (byte)BranchList.Count;
            buffer.WriteByte(branchListCount);
            for (int i = 0; i < branchListCount; i++)
            {
                BranchList[i].WriteCs(buffer);
            }
        }

        public void ReadCs(IBuffer buffer)
        {
            AllScore = buffer.ReadInt32(Endianness.Big);
            StarScore = buffer.ReadInt32(Endianness.Big);
            StarList.Clear();
            byte starListCount = buffer.ReadByte();
            for (int i = 0; i < starListCount; i++)
            {
                CSHunterStarStar StarListEntry = new CSHunterStarStar();
                StarListEntry.ReadCs(buffer);
                StarList.Add(StarListEntry);
            }
            BranchList.Clear();
            byte branchListCount = buffer.ReadByte();
            for (int i = 0; i < branchListCount; i++)
            {
                CSHunterStarBranch BranchListEntry = new CSHunterStarBranch();
                BranchListEntry.ReadCs(buffer);
                BranchList.Add(BranchListEntry);
            }
        }

    }
}
