/*
* This file is part of Arrowgene.MonsterHunterOnline
*
* Arrowgene.MonsterHunterOnline is a server implementation for the game "Monster Hunter Online".
* Copyright (C) 2023-2024 "all contributors"
*
* Github: https://github.com/sebastian-heinz/Arrowgene.MonsterHunterOnline
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU Affero General Public License as published
*  by the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU Affero General Public License for more details.
*
*  You should have received a copy of the GNU Affero General Public License
*  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

using System.Collections.Generic;
using Arrowgene.Buffers;
using Arrowgene.Logging;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Core;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Enums;

namespace Arrowgene.MonsterHunterOnline.Service.CsProto.Structures
{

    public class ScriptActivityDataScriptAttachParam : ScriptActivityDataUnion
    {
        private static readonly ILogger Logger = LogProvider.Logger(typeof(ScriptActivityDataScriptAttachParam));

        public ScriptActivityDataScriptAttachParam()
        {
            Label = "";
            Params = new List<int>();
            Script = "";
        }

        public EScriptActivityDataType Type => EScriptActivityDataType.kScriptActivityDataType_ScriptAttachParam;

        /// <summary>
        /// 按钮文字
        /// </summary>
        public string Label;

        /// <summary>
        /// 条件参数集
        /// </summary>
        public List<int> Params;

        /// <summary>
        /// 脚本名称
        /// </summary>
        public string Script;

        public void Write(IBuffer buffer)
        {
            buffer.WriteInt32(Label.Length + 1, Endianness.Big);
            buffer.WriteCString(Label);
            byte paramsCount = (byte)Params.Count;
            buffer.WriteByte(paramsCount);
            for (int i = 0; i < paramsCount; i++)
            {
                buffer.WriteInt32(Params[i], Endianness.Big);
            }
            buffer.WriteInt32(Script.Length + 1, Endianness.Big);
            buffer.WriteCString(Script);
        }

        public void Read(IBuffer buffer)
        {
            int LabelEntryLen = buffer.ReadInt32(Endianness.Big);
            Label = buffer.ReadString(LabelEntryLen);
            Params.Clear();
            byte paramsCount = buffer.ReadByte();
            for (int i = 0; i < paramsCount; i++)
            {
                int ParamsEntry = buffer.ReadInt32(Endianness.Big);
                Params.Add(ParamsEntry);
            }
            int ScriptEntryLen = buffer.ReadInt32(Endianness.Big);
            Script = buffer.ReadString(ScriptEntryLen);
        }

    }
}
