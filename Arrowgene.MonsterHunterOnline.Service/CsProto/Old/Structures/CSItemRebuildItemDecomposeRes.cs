/*
* This file is part of Arrowgene.MonsterHunterOnline
*
* Arrowgene.MonsterHunterOnline is a server implementation for the game "Monster Hunter Online".
* Copyright (C) 2023-2024 "all contributors"
*
* Github: https://github.com/sebastian-heinz/Arrowgene.MonsterHunterOnline
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU Affero General Public License as published
*  by the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU Affero General Public License for more details.
*
*  You should have received a copy of the GNU Affero General Public License
*  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

using System.Collections.Generic;
using Arrowgene.Buffers;
using Arrowgene.Logging;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Core;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Enums;

namespace Arrowgene.MonsterHunterOnline.Service.CsProto.Structures
{

    /// <summary>
    /// 道具拆解RES
    /// </summary>
    public class CSItemRebuildItemDecomposeRes : IStructure
    {
        private static readonly ILogger Logger = LogProvider.Logger(typeof(CSItemRebuildItemDecomposeRes));

        public CSItemRebuildItemDecomposeRes()
        {
            ErrCode = 0;
            IsCrited = 0;
            BagItems = new List<CSItemDecomposeItemEntry>();
            StoreItems = new List<CSItemDecomposeItemEntry>();
            MailItems = new List<CSItemDecomposeItemEntry>();
        }

        /// <summary>
        /// 错误码
        /// </summary>
        public int ErrCode;

        /// <summary>
        /// 是否暴击了。1：暴击； 0：没有暴击
        /// </summary>
        public byte IsCrited;

        /// <summary>
        /// 背包物品列表
        /// </summary>
        public List<CSItemDecomposeItemEntry> BagItems;

        /// <summary>
        /// 仓库物品列表
        /// </summary>
        public List<CSItemDecomposeItemEntry> StoreItems;

        /// <summary>
        /// 邮件物品列表
        /// </summary>
        public List<CSItemDecomposeItemEntry> MailItems;

        public void Write(IBuffer buffer)
        {
            buffer.WriteInt32(ErrCode, Endianness.Big);
            buffer.WriteByte(IsCrited);
            byte bagItemsCount = (byte)BagItems.Count;
            buffer.WriteByte(bagItemsCount);
            for (int i = 0; i < bagItemsCount; i++)
            {
                BagItems[i].Write(buffer);
            }
            byte storeItemsCount = (byte)StoreItems.Count;
            buffer.WriteByte(storeItemsCount);
            for (int i = 0; i < storeItemsCount; i++)
            {
                StoreItems[i].Write(buffer);
            }
            byte mailItemsCount = (byte)MailItems.Count;
            buffer.WriteByte(mailItemsCount);
            for (int i = 0; i < mailItemsCount; i++)
            {
                MailItems[i].Write(buffer);
            }
        }

        public void Read(IBuffer buffer)
        {
            ErrCode = buffer.ReadInt32(Endianness.Big);
            IsCrited = buffer.ReadByte();
            BagItems.Clear();
            byte bagItemsCount = buffer.ReadByte();
            for (int i = 0; i < bagItemsCount; i++)
            {
                CSItemDecomposeItemEntry BagItemsEntry = new CSItemDecomposeItemEntry();
                BagItemsEntry.Read(buffer);
                BagItems.Add(BagItemsEntry);
            }
            StoreItems.Clear();
            byte storeItemsCount = buffer.ReadByte();
            for (int i = 0; i < storeItemsCount; i++)
            {
                CSItemDecomposeItemEntry StoreItemsEntry = new CSItemDecomposeItemEntry();
                StoreItemsEntry.Read(buffer);
                StoreItems.Add(StoreItemsEntry);
            }
            MailItems.Clear();
            byte mailItemsCount = buffer.ReadByte();
            for (int i = 0; i < mailItemsCount; i++)
            {
                CSItemDecomposeItemEntry MailItemsEntry = new CSItemDecomposeItemEntry();
                MailItemsEntry.Read(buffer);
                MailItems.Add(MailItemsEntry);
            }
        }

    }
}
