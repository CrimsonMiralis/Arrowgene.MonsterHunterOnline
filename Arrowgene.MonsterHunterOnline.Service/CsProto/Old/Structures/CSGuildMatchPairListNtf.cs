/*
* This file is part of Arrowgene.MonsterHunterOnline
*
* Arrowgene.MonsterHunterOnline is a server implementation for the game "Monster Hunter Online".
* Copyright (C) 2023-2024 "all contributors"
*
* Github: https://github.com/sebastian-heinz/Arrowgene.MonsterHunterOnline
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU Affero General Public License as published
*  by the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU Affero General Public License for more details.
*
*  You should have received a copy of the GNU Affero General Public License
*  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

using System.Collections.Generic;
using Arrowgene.Buffers;
using Arrowgene.Logging;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Core;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Enums;

namespace Arrowgene.MonsterHunterOnline.Service.CsProto.Structures
{

    /// <summary>
    /// 猎团战淘汰赛每轮对决列表
    /// </summary>
    public class CSGuildMatchPairListNtf : IStructure
    {
        private static readonly ILogger Logger = LogProvider.Logger(typeof(CSGuildMatchPairListNtf));

        public CSGuildMatchPairListNtf()
        {
            SignUp64IDs = new List<uint>();
            SignUp32IDs = new List<uint>();
            SignUp16IDs = new List<uint>();
            SignUp8IDs = new List<uint>();
            SignUp4IDs = new List<uint>();
            SignUp2IDs = new List<uint>();
            WinSignID = 0;
        }

        public List<uint> SignUp64IDs;

        public List<uint> SignUp32IDs;

        public List<uint> SignUp16IDs;

        public List<uint> SignUp8IDs;

        public List<uint> SignUp4IDs;

        public List<uint> SignUp2IDs;

        public uint WinSignID;

        public void Write(IBuffer buffer)
        {
            int signUp64IDsCount = (int)SignUp64IDs.Count;
            buffer.WriteInt32(signUp64IDsCount, Endianness.Big);
            for (int i = 0; i < signUp64IDsCount; i++)
            {
                buffer.WriteUInt32(SignUp64IDs[i], Endianness.Big);
            }
            int signUp32IDsCount = (int)SignUp32IDs.Count;
            buffer.WriteInt32(signUp32IDsCount, Endianness.Big);
            for (int i = 0; i < signUp32IDsCount; i++)
            {
                buffer.WriteUInt32(SignUp32IDs[i], Endianness.Big);
            }
            int signUp16IDsCount = (int)SignUp16IDs.Count;
            buffer.WriteInt32(signUp16IDsCount, Endianness.Big);
            for (int i = 0; i < signUp16IDsCount; i++)
            {
                buffer.WriteUInt32(SignUp16IDs[i], Endianness.Big);
            }
            int signUp8IDsCount = (int)SignUp8IDs.Count;
            buffer.WriteInt32(signUp8IDsCount, Endianness.Big);
            for (int i = 0; i < signUp8IDsCount; i++)
            {
                buffer.WriteUInt32(SignUp8IDs[i], Endianness.Big);
            }
            int signUp4IDsCount = (int)SignUp4IDs.Count;
            buffer.WriteInt32(signUp4IDsCount, Endianness.Big);
            for (int i = 0; i < signUp4IDsCount; i++)
            {
                buffer.WriteUInt32(SignUp4IDs[i], Endianness.Big);
            }
            int signUp2IDsCount = (int)SignUp2IDs.Count;
            buffer.WriteInt32(signUp2IDsCount, Endianness.Big);
            for (int i = 0; i < signUp2IDsCount; i++)
            {
                buffer.WriteUInt32(SignUp2IDs[i], Endianness.Big);
            }
            buffer.WriteUInt32(WinSignID, Endianness.Big);
        }

        public void Read(IBuffer buffer)
        {
            SignUp64IDs.Clear();
            int signUp64IDsCount = buffer.ReadInt32(Endianness.Big);
            for (int i = 0; i < signUp64IDsCount; i++)
            {
                uint SignUp64IDsEntry = buffer.ReadUInt32(Endianness.Big);
                SignUp64IDs.Add(SignUp64IDsEntry);
            }
            SignUp32IDs.Clear();
            int signUp32IDsCount = buffer.ReadInt32(Endianness.Big);
            for (int i = 0; i < signUp32IDsCount; i++)
            {
                uint SignUp32IDsEntry = buffer.ReadUInt32(Endianness.Big);
                SignUp32IDs.Add(SignUp32IDsEntry);
            }
            SignUp16IDs.Clear();
            int signUp16IDsCount = buffer.ReadInt32(Endianness.Big);
            for (int i = 0; i < signUp16IDsCount; i++)
            {
                uint SignUp16IDsEntry = buffer.ReadUInt32(Endianness.Big);
                SignUp16IDs.Add(SignUp16IDsEntry);
            }
            SignUp8IDs.Clear();
            int signUp8IDsCount = buffer.ReadInt32(Endianness.Big);
            for (int i = 0; i < signUp8IDsCount; i++)
            {
                uint SignUp8IDsEntry = buffer.ReadUInt32(Endianness.Big);
                SignUp8IDs.Add(SignUp8IDsEntry);
            }
            SignUp4IDs.Clear();
            int signUp4IDsCount = buffer.ReadInt32(Endianness.Big);
            for (int i = 0; i < signUp4IDsCount; i++)
            {
                uint SignUp4IDsEntry = buffer.ReadUInt32(Endianness.Big);
                SignUp4IDs.Add(SignUp4IDsEntry);
            }
            SignUp2IDs.Clear();
            int signUp2IDsCount = buffer.ReadInt32(Endianness.Big);
            for (int i = 0; i < signUp2IDsCount; i++)
            {
                uint SignUp2IDsEntry = buffer.ReadUInt32(Endianness.Big);
                SignUp2IDs.Add(SignUp2IDsEntry);
            }
            WinSignID = buffer.ReadUInt32(Endianness.Big);
        }

    }
}
