/*
* This file is part of Arrowgene.MonsterHunterOnline
*
* Arrowgene.MonsterHunterOnline is a server implementation for the game "Monster Hunter Online".
* Copyright (C) 2023-2024 "all contributors"
*
* Github: https://github.com/sebastian-heinz/Arrowgene.MonsterHunterOnline
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU Affero General Public License as published
*  by the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU Affero General Public License for more details.
*
*  You should have received a copy of the GNU Affero General Public License
*  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

using System.Collections.Generic;
using Arrowgene.Buffers;
using Arrowgene.Logging;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Constant;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Core;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Enums;

namespace Arrowgene.MonsterHunterOnline.Service.CsProto.Structures
{

    /// <summary>
    /// 战斗使用招式消息
    /// </summary>
    public class CSAnimationParams : ICsStructure
    {
        private static readonly ILogger Logger = LogProvider.Logger(typeof(CSAnimationParams));

        public CSAnimationParams()
        {
            TransTime = 0.0f;
            KeyTime = 0.0f;
            AnimTotalTime = 0.0f;
            InitAnimKeyTime = 0.0f;
            PlaybackSpeed = 0.0f;
            AllowMultilayerAnim = 0.0f;
            LayerID = 0;
            LayerWeight = 0.0f;
            Flags = 0;
            UserToken = 0;
            UserData = new float[CsProtoConstant.CS_NUM_ANIMATION_USER_DATA_SLOTS];
        }

        /// <summary>
        /// 混合时间
        /// </summary>
        public float TransTime;

        /// <summary>
        /// 关键帧时间
        /// </summary>
        public float KeyTime;

        /// <summary>
        /// 总播放时长
        /// </summary>
        public float AnimTotalTime;

        /// <summary>
        /// 动画开始时间
        /// </summary>
        public float InitAnimKeyTime;

        /// <summary>
        /// 播放速度
        /// </summary>
        public float PlaybackSpeed;

        /// <summary>
        /// 允许高层次动画混合
        /// </summary>
        public float AllowMultilayerAnim;

        /// <summary>
        /// 动画层ID
        /// </summary>
        public int LayerID;

        /// <summary>
        /// 本层融合权重
        /// </summary>
        public float LayerWeight;

        /// <summary>
        /// 播放标志位
        /// </summary>
        public uint Flags;

        /// <summary>
        /// 用户Token
        /// </summary>
        public uint UserToken;

        /// <summary>
        /// 用户数据
        /// </summary>
        public float[] UserData;

        public void WriteCs(IBuffer buffer)
        {
            buffer.WriteFloat(TransTime, Endianness.Big);
            buffer.WriteFloat(KeyTime, Endianness.Big);
            buffer.WriteFloat(AnimTotalTime, Endianness.Big);
            buffer.WriteFloat(InitAnimKeyTime, Endianness.Big);
            buffer.WriteFloat(PlaybackSpeed, Endianness.Big);
            buffer.WriteFloat(AllowMultilayerAnim, Endianness.Big);
            buffer.WriteInt32(LayerID, Endianness.Big);
            buffer.WriteFloat(LayerWeight, Endianness.Big);
            buffer.WriteUInt32(Flags, Endianness.Big);
            buffer.WriteUInt32(UserToken, Endianness.Big);
            for (int i = 0; i < CsProtoConstant.CS_NUM_ANIMATION_USER_DATA_SLOTS; i++)
            {
                buffer.WriteFloat(UserData[i], Endianness.Big);
            }
        }

        public void ReadCs(IBuffer buffer)
        {
            TransTime = buffer.ReadFloat(Endianness.Big);
            KeyTime = buffer.ReadFloat(Endianness.Big);
            AnimTotalTime = buffer.ReadFloat(Endianness.Big);
            InitAnimKeyTime = buffer.ReadFloat(Endianness.Big);
            PlaybackSpeed = buffer.ReadFloat(Endianness.Big);
            AllowMultilayerAnim = buffer.ReadFloat(Endianness.Big);
            LayerID = buffer.ReadInt32(Endianness.Big);
            LayerWeight = buffer.ReadFloat(Endianness.Big);
            Flags = buffer.ReadUInt32(Endianness.Big);
            UserToken = buffer.ReadUInt32(Endianness.Big);
            for (int i = 0; i < CsProtoConstant.CS_NUM_ANIMATION_USER_DATA_SLOTS; i++)
            {
                UserData[i] = buffer.ReadFloat(Endianness.Big);
            }
        }

    }
}
