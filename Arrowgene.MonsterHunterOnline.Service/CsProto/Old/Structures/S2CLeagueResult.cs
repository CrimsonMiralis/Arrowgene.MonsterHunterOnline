/*
* This file is part of Arrowgene.MonsterHunterOnline
*
* Arrowgene.MonsterHunterOnline is a server implementation for the game "Monster Hunter Online".
* Copyright (C) 2023-2024 "all contributors"
*
* Github: https://github.com/sebastian-heinz/Arrowgene.MonsterHunterOnline
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU Affero General Public License as published
*  by the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU Affero General Public License for more details.
*
*  You should have received a copy of the GNU Affero General Public License
*  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

using System.Collections.Generic;
using Arrowgene.Buffers;
using Arrowgene.Logging;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Core;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Enums;

namespace Arrowgene.MonsterHunterOnline.Service.CsProto.Structures
{

    /// <summary>
    /// 赛季副本列表RSP
    /// </summary>
    public class S2CLeagueResult : ICsStructure
    {
        private static readonly ILogger Logger = LogProvider.Logger(typeof(S2CLeagueResult));

        public S2CLeagueResult()
        {
            Type = 0;
            ClanScoreMod = 0;
            ClanPVMod = 0;
            SelfScoreMod = 0;
            Punish = 0;
            SelfPVMod = 0;
            SelfMedalMod = 0;
            StepRewardLevel = 0;
            WeekLimit = 0;
            TotalLimit = 0;
            ExRewardScore = 0;
            ExRewardMedal = 0;
        }

        /// <summary>
        /// 赛制类型
        /// </summary>
        public int Type;

        /// <summary>
        /// 战队积分变动
        /// </summary>
        public int ClanScoreMod;

        /// <summary>
        /// 战力变动
        /// </summary>
        public int ClanPVMod;

        /// <summary>
        /// 个人积分变动
        /// </summary>
        public int SelfScoreMod;

        /// <summary>
        /// 你是否划水了
        /// </summary>
        public int Punish;

        /// <summary>
        /// 个人战力变动
        /// </summary>
        public int SelfPVMod;

        /// <summary>
        /// 荣誉勋章奖励
        /// </summary>
        public int SelfMedalMod;

        /// <summary>
        /// 阶段性奖励
        /// </summary>
        public int StepRewardLevel;

        /// <summary>
        /// 荣誉勋章达到周上限
        /// </summary>
        public byte WeekLimit;

        /// <summary>
        /// 荣誉勋章达到总上限
        /// </summary>
        public byte TotalLimit;

        /// <summary>
        /// 每日额外奖励积分
        /// </summary>
        public int ExRewardScore;

        /// <summary>
        /// 每日额外奖励勋章
        /// </summary>
        public int ExRewardMedal;

        public void WriteCs(IBuffer buffer)
        {
            buffer.WriteInt32(Type, Endianness.Big);
            buffer.WriteInt32(ClanScoreMod, Endianness.Big);
            buffer.WriteInt32(ClanPVMod, Endianness.Big);
            buffer.WriteInt32(SelfScoreMod, Endianness.Big);
            buffer.WriteInt32(Punish, Endianness.Big);
            buffer.WriteInt32(SelfPVMod, Endianness.Big);
            buffer.WriteInt32(SelfMedalMod, Endianness.Big);
            buffer.WriteInt32(StepRewardLevel, Endianness.Big);
            buffer.WriteByte(WeekLimit);
            buffer.WriteByte(TotalLimit);
            buffer.WriteInt32(ExRewardScore, Endianness.Big);
            buffer.WriteInt32(ExRewardMedal, Endianness.Big);
        }

        public void ReadCs(IBuffer buffer)
        {
            Type = buffer.ReadInt32(Endianness.Big);
            ClanScoreMod = buffer.ReadInt32(Endianness.Big);
            ClanPVMod = buffer.ReadInt32(Endianness.Big);
            SelfScoreMod = buffer.ReadInt32(Endianness.Big);
            Punish = buffer.ReadInt32(Endianness.Big);
            SelfPVMod = buffer.ReadInt32(Endianness.Big);
            SelfMedalMod = buffer.ReadInt32(Endianness.Big);
            StepRewardLevel = buffer.ReadInt32(Endianness.Big);
            WeekLimit = buffer.ReadByte();
            TotalLimit = buffer.ReadByte();
            ExRewardScore = buffer.ReadInt32(Endianness.Big);
            ExRewardMedal = buffer.ReadInt32(Endianness.Big);
        }

    }
}
