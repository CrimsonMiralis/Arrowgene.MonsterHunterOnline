/*
* This file is part of Arrowgene.MonsterHunterOnline
*
* Arrowgene.MonsterHunterOnline is a server implementation for the game "Monster Hunter Online".
* Copyright (C) 2023-2024 "all contributors"
*
* Github: https://github.com/sebastian-heinz/Arrowgene.MonsterHunterOnline
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU Affero General Public License as published
*  by the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU Affero General Public License for more details.
*
*  You should have received a copy of the GNU Affero General Public License
*  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

using System.Collections.Generic;
using Arrowgene.Buffers;
using Arrowgene.Logging;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Core;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Enums;

namespace Arrowgene.MonsterHunterOnline.Service.CsProto.Structures
{

    /// <summary>
    /// projectile effects notify
    /// </summary>
    public class CSProjectileEffectNtf : ICsStructure
    {
        private static readonly ILogger Logger = LogProvider.Logger(typeof(CSProjectileEffectNtf));

        public CSProjectileEffectNtf()
        {
            LifeTime = 0.0f;
            LastTime = 0.0f;
            ProjectileId = 0;
            ProjEffectType = 0;
            TargetId = 0;
            HitPos = new CSVec3();
            HitDir = new CSVec3();
            LocalPos = new CSVec3();
            LocalDir = new CSVec3();
            PartId = 0;
            VerifyContext = new CSTargetVerifyContext();
        }

        /// <summary>
        /// 飞行道具生命时间
        /// </summary>
        public float LifeTime;

        /// <summary>
        /// 上一帧飞行道具生命时间
        /// </summary>
        public float LastTime;

        /// <summary>
        /// 触发效果的飞行道具ID
        /// </summary>
        public int ProjectileId;

        /// <summary>
        /// 触发效果类型
        /// </summary>
        public int ProjEffectType;

        /// <summary>
        /// 命中目标LEID（如果有）
        /// </summary>
        public int TargetId;

        /// <summary>
        /// 命中点
        /// </summary>
        public CSVec3 HitPos;

        /// <summary>
        /// 命中方向
        /// </summary>
        public CSVec3 HitDir;

        /// <summary>
        /// 相对命中点
        /// </summary>
        public CSVec3 LocalPos;

        /// <summary>
        /// 相对命中方向
        /// </summary>
        public CSVec3 LocalDir;

        /// <summary>
        /// 命中部位ID
        /// </summary>
        public int PartId;

        /// <summary>
        /// 验证上下文
        /// </summary>
        public CSTargetVerifyContext VerifyContext;

        public void WriteCs(IBuffer buffer)
        {
            buffer.WriteFloat(LifeTime, Endianness.Big);
            buffer.WriteFloat(LastTime, Endianness.Big);
            buffer.WriteInt32(ProjectileId, Endianness.Big);
            buffer.WriteInt32(ProjEffectType, Endianness.Big);
            buffer.WriteInt32(TargetId, Endianness.Big);
            HitPos.WriteCs(buffer);
            HitDir.WriteCs(buffer);
            LocalPos.WriteCs(buffer);
            LocalDir.WriteCs(buffer);
            buffer.WriteInt32(PartId, Endianness.Big);
            VerifyContext.WriteCs(buffer);
        }

        public void ReadCs(IBuffer buffer)
        {
            LifeTime = buffer.ReadFloat(Endianness.Big);
            LastTime = buffer.ReadFloat(Endianness.Big);
            ProjectileId = buffer.ReadInt32(Endianness.Big);
            ProjEffectType = buffer.ReadInt32(Endianness.Big);
            TargetId = buffer.ReadInt32(Endianness.Big);
            HitPos.ReadCs(buffer);
            HitDir.ReadCs(buffer);
            LocalPos.ReadCs(buffer);
            LocalDir.ReadCs(buffer);
            PartId = buffer.ReadInt32(Endianness.Big);
            VerifyContext.ReadCs(buffer);
        }

    }
}
