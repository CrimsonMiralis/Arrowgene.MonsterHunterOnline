/*
* This file is part of Arrowgene.MonsterHunterOnline
*
* Arrowgene.MonsterHunterOnline is a server implementation for the game "Monster Hunter Online".
* Copyright (C) 2023-2024 "all contributors"
*
* Github: https://github.com/sebastian-heinz/Arrowgene.MonsterHunterOnline
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU Affero General Public License as published
*  by the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU Affero General Public License for more details.
*
*  You should have received a copy of the GNU Affero General Public License
*  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

using System.Collections.Generic;
using Arrowgene.Buffers;
using Arrowgene.Logging;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Core;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Enums;

namespace Arrowgene.MonsterHunterOnline.Service.CsProto.Structures
{

    /// <summary>
    /// 个人副本奖励结算
    /// </summary>
    public class CSPlayerResultInfo : IStructure
    {
        private static readonly ILogger Logger = LogProvider.Logger(typeof(CSPlayerResultInfo));

        public CSPlayerResultInfo()
        {
            BaseInfo = new CSBtlPlayerBaseInfo();
            StatInfo = new CSBtlPlayerStatInfo();
            RewardInfoList = new List<CSLevelRewardInfo>();
            SizeChangeInfoList = new List<MonsterSizeChange>();
        }

        /// <summary>
        /// 基本信息
        /// </summary>
        public CSBtlPlayerBaseInfo BaseInfo;

        /// <summary>
        /// 统计信息
        /// </summary>
        public CSBtlPlayerStatInfo StatInfo;

        public List<CSLevelRewardInfo> RewardInfoList;

        public List<MonsterSizeChange> SizeChangeInfoList;

        public void Write(IBuffer buffer)
        {
            BaseInfo.Write(buffer);
            StatInfo.Write(buffer);
            int rewardInfoListCount = (int)RewardInfoList.Count;
            buffer.WriteInt32(rewardInfoListCount, Endianness.Big);
            for (int i = 0; i < rewardInfoListCount; i++)
            {
                RewardInfoList[i].Write(buffer);
            }
            int sizeChangeInfoListCount = (int)SizeChangeInfoList.Count;
            buffer.WriteInt32(sizeChangeInfoListCount, Endianness.Big);
            for (int i = 0; i < sizeChangeInfoListCount; i++)
            {
                SizeChangeInfoList[i].Write(buffer);
            }
        }

        public void Read(IBuffer buffer)
        {
            BaseInfo.Read(buffer);
            StatInfo.Read(buffer);
            RewardInfoList.Clear();
            int rewardInfoListCount = buffer.ReadInt32(Endianness.Big);
            for (int i = 0; i < rewardInfoListCount; i++)
            {
                CSLevelRewardInfo RewardInfoListEntry = new CSLevelRewardInfo();
                RewardInfoListEntry.Read(buffer);
                RewardInfoList.Add(RewardInfoListEntry);
            }
            SizeChangeInfoList.Clear();
            int sizeChangeInfoListCount = buffer.ReadInt32(Endianness.Big);
            for (int i = 0; i < sizeChangeInfoListCount; i++)
            {
                MonsterSizeChange SizeChangeInfoListEntry = new MonsterSizeChange();
                SizeChangeInfoListEntry.Read(buffer);
                SizeChangeInfoList.Add(SizeChangeInfoListEntry);
            }
        }

    }
}
