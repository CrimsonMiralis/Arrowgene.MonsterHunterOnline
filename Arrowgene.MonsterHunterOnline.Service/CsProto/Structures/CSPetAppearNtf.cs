/*
* This file is part of Arrowgene.MonsterHunterOnline
*
* Arrowgene.MonsterHunterOnline is a server implementation for the game "Monster Hunter Online".
* Copyright (C) 2023-2024 "all contributors"
*
* Github: https://github.com/sebastian-heinz/Arrowgene.MonsterHunterOnline
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU Affero General Public License as published
*  by the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU Affero General Public License for more details.
*
*  You should have received a copy of the GNU Affero General Public License
*  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

using System.Collections.Generic;
using Arrowgene.Buffers;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Core;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Enums;

namespace Arrowgene.MonsterHunterOnline.Service.CsProto.Structures
{

    /// <summary>
    /// pet appear notify
    /// </summary>
    public class CSPetAppearNtf : IStructure
    {

        public CSPetAppearNtf()
        {
            NetID = 0;
            OwnerID = 0;
            InfoID = 0;
            EntGUID = 0;
            PetUID = 0;
            PetIdx = 0;
            Name = "";
            Pose = new CSQuatT();
            AvatarSetID = 0;
            Health = 0.0f;
            Equip = new List<int>();
            Attr = new List<byte>();
            Buff = new List<byte>();
            RandAttrs = new CSPetRandAttrs();
            Support = 0;
            Skill = new List<CSPetSkill>();
            GrowHighDay = 0;
            GrowHeight = 0;
        }

        /// <summary>
        /// logic pet entity id
        /// </summary>
        public int NetID;

        /// <summary>
        /// logic player entity id
        /// </summary>
        public int OwnerID;

        /// <summary>
        /// static data id
        /// </summary>
        public int InfoID;

        /// <summary>
        /// entity guid
        /// </summary>
        public ulong EntGUID;

        /// <summary>
        /// pet uid
        /// </summary>
        public int PetUID;

        /// <summary>
        /// pet idx
        /// </summary>
        public int PetIdx;

        /// <summary>
        /// pet name
        /// </summary>
        public string Name;

        /// <summary>
        /// Appear location
        /// </summary>
        public CSQuatT Pose;

        /// <summary>
        /// Avatar Set
        /// </summary>
        public byte AvatarSetID;

        /// <summary>
        /// health
        /// </summary>
        public float Health;

        /// <summary>
        /// 装备物品
        /// </summary>
        public List<int> Equip;

        /// <summary>
        /// attr数据
        /// </summary>
        public List<byte> Attr;

        /// <summary>
        /// Buff数据
        /// </summary>
        public List<byte> Buff;

        /// <summary>
        /// 随机属性
        /// </summary>
        public CSPetRandAttrs RandAttrs;

        /// <summary>
        /// 是否是支援
        /// </summary>
        public byte Support;

        /// <summary>
        /// 技能信息
        /// </summary>
        public List<CSPetSkill> Skill;

        /// <summary>
        /// 长高时间
        /// </summary>
        public int GrowHighDay;

        /// <summary>
        /// 长高值
        /// </summary>
        public int GrowHeight;

        public void Write(IBuffer buffer)
        {
            buffer.WriteInt32(NetID, Endianness.Big);
            buffer.WriteInt32(OwnerID, Endianness.Big);
            buffer.WriteInt32(InfoID, Endianness.Big);
            buffer.WriteUInt64(EntGUID, Endianness.Big);
            buffer.WriteInt32(PetUID, Endianness.Big);
            buffer.WriteInt32(PetIdx, Endianness.Big);
            buffer.WriteInt32(Name.Length + 1, Endianness.Big);
            buffer.WriteCString(Name);
            Pose.Write(buffer);
            buffer.WriteByte(AvatarSetID);
            buffer.WriteFloat(Health, Endianness.Big);
            ushort equipCount = (ushort)Equip.Count;
            buffer.WriteUInt16(equipCount, Endianness.Big);
            for (int i = 0; i < equipCount; i++)
            {
                buffer.WriteInt32(Equip[i], Endianness.Big);
            }
            ushort attrCount = (ushort)Attr.Count;
            buffer.WriteUInt16(attrCount, Endianness.Big);
            for (int i = 0; i < attrCount; i++)
            {
                buffer.WriteByte(Attr[i]);
            }
            ushort buffCount = (ushort)Buff.Count;
            buffer.WriteUInt16(buffCount, Endianness.Big);
            for (int i = 0; i < buffCount; i++)
            {
                buffer.WriteByte(Buff[i]);
            }
            RandAttrs.Write(buffer);
            buffer.WriteByte(Support);
            int skillCount = (int)Skill.Count;
            buffer.WriteInt32(skillCount, Endianness.Big);
            for (int i = 0; i < skillCount; i++)
            {
                Skill[i].Write(buffer);
            }
            buffer.WriteInt32(GrowHighDay, Endianness.Big);
            buffer.WriteInt32(GrowHeight, Endianness.Big);
        }

    }
}
