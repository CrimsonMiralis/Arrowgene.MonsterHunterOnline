/*
* This file is part of Arrowgene.MonsterHunterOnline
*
* Arrowgene.MonsterHunterOnline is a server implementation for the game "Monster Hunter Online".
* Copyright (C) 2023-2024 "all contributors"
*
* Github: https://github.com/sebastian-heinz/Arrowgene.MonsterHunterOnline
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU Affero General Public License as published
*  by the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU Affero General Public License for more details.
*
*  You should have received a copy of the GNU Affero General Public License
*  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

using System.Collections.Generic;
using Arrowgene.Buffers;
using Arrowgene.Logging;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Core;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Enums;

namespace Arrowgene.MonsterHunterOnline.Service.CsProto.Structures
{

    /// <summary>
    /// 奖励加成信息
    /// </summary>
    public class CSLevelRewardAffectInfo : IStructure
    {
        private static readonly ILogger Logger = LogProvider.Logger(typeof(CSLevelRewardAffectInfo));

        public CSLevelRewardAffectInfo()
        {
            AffectType = 0;
            ValueAffectType = new List<short>();
            ValueAffectValue = new List<int>();
            PercentAffectType = new List<short>();
            PercentAffectValue = new List<int>();
            FinalPercent = 0;
            Arg1 = 0;
        }

        /// <summary>
        /// 加成类型
        /// </summary>
        public short AffectType;

        /// <summary>
        /// 奖励值加成类型
        /// </summary>
        public List<short> ValueAffectType;

        /// <summary>
        /// 奖励值加成
        /// </summary>
        public List<int> ValueAffectValue;

        /// <summary>
        /// 百分比加成类型
        /// </summary>
        public List<short> PercentAffectType;

        /// <summary>
        /// 百分比奖加成值
        /// </summary>
        public List<int> PercentAffectValue;

        /// <summary>
        /// 最总百分比奖励
        /// </summary>
        public int FinalPercent;

        /// <summary>
        /// 参数1
        /// </summary>
        public int Arg1;

        public void Write(IBuffer buffer)
        {
            buffer.WriteInt16(AffectType, Endianness.Big);
            short valueAffectTypeCount = (short)ValueAffectType.Count;
            buffer.WriteInt16(valueAffectTypeCount, Endianness.Big);
            for (int i = 0; i < valueAffectTypeCount; i++)
            {
                buffer.WriteInt16(ValueAffectType[i], Endianness.Big);
            }
            short valueAffectValueCount = (short)ValueAffectValue.Count;
            buffer.WriteInt16(valueAffectValueCount, Endianness.Big);
            for (int i = 0; i < valueAffectValueCount; i++)
            {
                buffer.WriteInt32(ValueAffectValue[i], Endianness.Big);
            }
            short percentAffectTypeCount = (short)PercentAffectType.Count;
            buffer.WriteInt16(percentAffectTypeCount, Endianness.Big);
            for (int i = 0; i < percentAffectTypeCount; i++)
            {
                buffer.WriteInt16(PercentAffectType[i], Endianness.Big);
            }
            short percentAffectValueCount = (short)PercentAffectValue.Count;
            buffer.WriteInt16(percentAffectValueCount, Endianness.Big);
            for (int i = 0; i < percentAffectValueCount; i++)
            {
                buffer.WriteInt32(PercentAffectValue[i], Endianness.Big);
            }
            buffer.WriteInt32(FinalPercent, Endianness.Big);
            buffer.WriteInt32(Arg1, Endianness.Big);
        }

        public void Read(IBuffer buffer)
        {
            AffectType = buffer.ReadInt16(Endianness.Big);
            ValueAffectType.Clear();
            short valueAffectTypeCount = buffer.ReadInt16(Endianness.Big);
            for (int i = 0; i < valueAffectTypeCount; i++)
            {
                short ValueAffectTypeEntry = buffer.ReadInt16(Endianness.Big);
                ValueAffectType.Add(ValueAffectTypeEntry);
            }
            ValueAffectValue.Clear();
            short valueAffectValueCount = buffer.ReadInt16(Endianness.Big);
            for (int i = 0; i < valueAffectValueCount; i++)
            {
                int ValueAffectValueEntry = buffer.ReadInt32(Endianness.Big);
                ValueAffectValue.Add(ValueAffectValueEntry);
            }
            PercentAffectType.Clear();
            short percentAffectTypeCount = buffer.ReadInt16(Endianness.Big);
            for (int i = 0; i < percentAffectTypeCount; i++)
            {
                short PercentAffectTypeEntry = buffer.ReadInt16(Endianness.Big);
                PercentAffectType.Add(PercentAffectTypeEntry);
            }
            PercentAffectValue.Clear();
            short percentAffectValueCount = buffer.ReadInt16(Endianness.Big);
            for (int i = 0; i < percentAffectValueCount; i++)
            {
                int PercentAffectValueEntry = buffer.ReadInt32(Endianness.Big);
                PercentAffectValue.Add(PercentAffectValueEntry);
            }
            FinalPercent = buffer.ReadInt32(Endianness.Big);
            Arg1 = buffer.ReadInt32(Endianness.Big);
        }

    }
}
