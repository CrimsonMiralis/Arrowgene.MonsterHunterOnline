/*
* This file is part of Arrowgene.MonsterHunterOnline
*
* Arrowgene.MonsterHunterOnline is a server implementation for the game "Monster Hunter Online".
* Copyright (C) 2023-2024 "all contributors"
*
* Github: https://github.com/sebastian-heinz/Arrowgene.MonsterHunterOnline
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU Affero General Public License as published
*  by the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU Affero General Public License for more details.
*
*  You should have received a copy of the GNU Affero General Public License
*  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

using System.Collections.Generic;
using Arrowgene.Buffers;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Core;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Enums;

namespace Arrowgene.MonsterHunterOnline.Service.CsProto.Structures
{

    public class ScriptActivityDetail : IStructure
    {

        public ScriptActivityDetail()
        {
            Type = 0;
            StartTime = 0;
            StopTime = 0;
            ShowTime = 0;
            Name = "";
            Note = "";
            Time = "";
            Rule = "";
            Url = "";
            Icon = "";
            Bubble = "";
            BubbleInterval = 0;
            Serial = 0;
            DataEntries = new List<ScriptActivityDataEntry>();
            ShowPeriods = new List<ScriptActivityPeriod>();
            Params = new ScriptActivityParams();
        }

        /// <summary>
        /// 类型EOperationActivityType
        /// </summary>
        public byte Type;

        /// <summary>
        /// 开始时间
        /// </summary>
        public uint StartTime;

        /// <summary>
        /// 结束时间
        /// </summary>
        public uint StopTime;

        /// <summary>
        /// 显示时间
        /// </summary>
        public uint ShowTime;

        /// <summary>
        /// 活动名称
        /// </summary>
        public string Name;

        /// <summary>
        /// 活动note
        /// </summary>
        public string Note;

        /// <summary>
        /// 时间限制
        /// </summary>
        public string Time;

        /// <summary>
        /// 活动规则
        /// </summary>
        public string Rule;

        /// <summary>
        /// 活动URL
        /// </summary>
        public string Url;

        /// <summary>
        /// 活动Icon
        /// </summary>
        public string Icon;

        /// <summary>
        /// 活动泡泡
        /// </summary>
        public string Bubble;

        /// <summary>
        /// 泡泡时间间隔
        /// </summary>
        public int BubbleInterval;

        /// <summary>
        /// 序列
        /// </summary>
        public byte Serial;

        public List<ScriptActivityDataEntry> DataEntries;

        /// <summary>
        /// 活动显示周期
        /// </summary>
        public List<ScriptActivityPeriod> ShowPeriods;

        /// <summary>
        /// 参数集
        /// </summary>
        public ScriptActivityParams Params;

        public void Write(IBuffer buffer)
        {
            buffer.WriteByte(Type);
            buffer.WriteUInt32(StartTime, Endianness.Big);
            buffer.WriteUInt32(StopTime, Endianness.Big);
            buffer.WriteUInt32(ShowTime, Endianness.Big);
            buffer.WriteInt32(Name.Length + 1, Endianness.Big);
            buffer.WriteCString(Name);
            buffer.WriteInt32(Note.Length + 1, Endianness.Big);
            buffer.WriteCString(Note);
            buffer.WriteInt32(Time.Length + 1, Endianness.Big);
            buffer.WriteCString(Time);
            buffer.WriteInt32(Rule.Length + 1, Endianness.Big);
            buffer.WriteCString(Rule);
            buffer.WriteInt32(Url.Length + 1, Endianness.Big);
            buffer.WriteCString(Url);
            buffer.WriteInt32(Icon.Length + 1, Endianness.Big);
            buffer.WriteCString(Icon);
            buffer.WriteInt32(Bubble.Length + 1, Endianness.Big);
            buffer.WriteCString(Bubble);
            buffer.WriteInt32(BubbleInterval, Endianness.Big);
            buffer.WriteByte(Serial);
            byte dataEntriesCount = (byte)DataEntries.Count;
            buffer.WriteByte(dataEntriesCount);
            for (int i = 0; i < dataEntriesCount; i++)
            {
                DataEntries[i].Write(buffer);
            }
            byte showPeriodsCount = (byte)ShowPeriods.Count;
            buffer.WriteByte(showPeriodsCount);
            for (int i = 0; i < showPeriodsCount; i++)
            {
                ShowPeriods[i].Write(buffer);
            }
            Params.Write(buffer);
        }

    }
}
