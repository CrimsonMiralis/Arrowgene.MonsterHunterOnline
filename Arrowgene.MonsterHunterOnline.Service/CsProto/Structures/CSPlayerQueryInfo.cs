/*
* This file is part of Arrowgene.MonsterHunterOnline
*
* Arrowgene.MonsterHunterOnline is a server implementation for the game "Monster Hunter Online".
* Copyright (C) 2023-2024 "all contributors"
*
* Github: https://github.com/sebastian-heinz/Arrowgene.MonsterHunterOnline
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU Affero General Public License as published
*  by the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU Affero General Public License for more details.
*
*  You should have received a copy of the GNU Affero General Public License
*  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

using System.Collections.Generic;
using Arrowgene.Buffers;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Core;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Enums;

namespace Arrowgene.MonsterHunterOnline.Service.CsProto.Structures
{

    /// <summary>
    /// 玩家查询信息
    /// </summary>
    public class CSPlayerQueryInfo : IStructure
    {

        public CSPlayerQueryInfo()
        {
            ErrNo = 0;
            NetID = 0;
            SessionID = 0;
            Name = "";
            Gender = 0;
            AvatarSetID = 0;
            Weapon = 0;
            WeaponAtkFlag = 0;
            EquipItem = new List<byte>();
            SkillGroup = new List<int>();
            SkillId = new List<int>();
            SkillActFlag = new List<int>();
            SkillType = new List<int>();
            Attr = new List<byte>();
            HunterStar = "";
            SuitSkillData = new List<byte>();
            SoulStone = new List<byte>();
        }

        /// <summary>
        /// 响应码, 0为成功
        /// </summary>
        public int ErrNo;

        /// <summary>
        /// logic entity id
        /// </summary>
        public int NetID;

        /// <summary>
        /// Session id
        /// </summary>
        public uint SessionID;

        /// <summary>
        /// role name
        /// </summary>
        public string Name;

        /// <summary>
        /// gender fo role
        /// </summary>
        public byte Gender;

        /// <summary>
        /// Avatar Set
        /// </summary>
        public byte AvatarSetID;

        public int Weapon;

        /// <summary>
        /// 属性攻击Flag
        /// </summary>
        public int WeaponAtkFlag;

        /// <summary>
        /// 装备数据
        /// </summary>
        public List<byte> EquipItem;

        /// <summary>
        /// 已生效被动技能组
        /// </summary>
        public List<int> SkillGroup;

        /// <summary>
        /// 已生效被动技能ID
        /// </summary>
        public List<int> SkillId;

        /// <summary>
        /// 已生效被动技能是否点亮
        /// </summary>
        public List<int> SkillActFlag;

        /// <summary>
        /// 已生效被动技能触发类型
        /// </summary>
        public List<int> SkillType;

        /// <summary>
        /// attr数据
        /// </summary>
        public List<byte> Attr;

        /// <summary>
        /// 猎人星级
        /// </summary>
        public string HunterStar;

        public List<byte> SuitSkillData;

        /// <summary>
        /// 狩魂石数据
        /// </summary>
        public List<byte> SoulStone;

        public void Write(IBuffer buffer)
        {
            buffer.WriteInt32(ErrNo, Endianness.Big);
            buffer.WriteInt32(NetID, Endianness.Big);
            buffer.WriteUInt32(SessionID, Endianness.Big);
            buffer.WriteInt32(Name.Length + 1, Endianness.Big);
            buffer.WriteCString(Name);
            buffer.WriteByte(Gender);
            buffer.WriteByte(AvatarSetID);
            buffer.WriteInt32(Weapon, Endianness.Big);
            buffer.WriteInt32(WeaponAtkFlag, Endianness.Big);
            ushort equipItemCount = (ushort)EquipItem.Count;
            buffer.WriteUInt16(equipItemCount, Endianness.Big);
            for (int i = 0; i < equipItemCount; i++)
            {
                buffer.WriteByte(EquipItem[i]);
            }
            ushort skillGroupCount = (ushort)SkillGroup.Count;
            buffer.WriteUInt16(skillGroupCount, Endianness.Big);
            for (int i = 0; i < skillGroupCount; i++)
            {
                buffer.WriteInt32(SkillGroup[i], Endianness.Big);
            }
            ushort skillIdCount = (ushort)SkillId.Count;
            buffer.WriteUInt16(skillIdCount, Endianness.Big);
            for (int i = 0; i < skillIdCount; i++)
            {
                buffer.WriteInt32(SkillId[i], Endianness.Big);
            }
            ushort skillActFlagCount = (ushort)SkillActFlag.Count;
            buffer.WriteUInt16(skillActFlagCount, Endianness.Big);
            for (int i = 0; i < skillActFlagCount; i++)
            {
                buffer.WriteInt32(SkillActFlag[i], Endianness.Big);
            }
            ushort skillTypeCount = (ushort)SkillType.Count;
            buffer.WriteUInt16(skillTypeCount, Endianness.Big);
            for (int i = 0; i < skillTypeCount; i++)
            {
                buffer.WriteInt32(SkillType[i], Endianness.Big);
            }
            ushort attrCount = (ushort)Attr.Count;
            buffer.WriteUInt16(attrCount, Endianness.Big);
            for (int i = 0; i < attrCount; i++)
            {
                buffer.WriteByte(Attr[i]);
            }
            buffer.WriteInt32(HunterStar.Length + 1, Endianness.Big);
            buffer.WriteCString(HunterStar);
            uint suitSkillDataCount = (uint)SuitSkillData.Count;
            buffer.WriteUInt32(suitSkillDataCount, Endianness.Big);
            for (int i = 0; i < suitSkillDataCount; i++)
            {
                buffer.WriteByte(SuitSkillData[i]);
            }
            int soulStoneCount = (int)SoulStone.Count;
            buffer.WriteInt32(soulStoneCount, Endianness.Big);
            for (int i = 0; i < soulStoneCount; i++)
            {
                buffer.WriteByte(SoulStone[i]);
            }
        }

    }
}
