/*
* This file is part of Arrowgene.MonsterHunterOnline
*
* Arrowgene.MonsterHunterOnline is a server implementation for the game "Monster Hunter Online".
* Copyright (C) 2023-2024 "all contributors"
*
* Github: https://github.com/sebastian-heinz/Arrowgene.MonsterHunterOnline
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU Affero General Public License as published
*  by the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU Affero General Public License for more details.
*
*  You should have received a copy of the GNU Affero General Public License
*  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

using System.Collections.Generic;
using Arrowgene.Buffers;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Core;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Enums;

namespace Arrowgene.MonsterHunterOnline.Service.CsProto.Structures
{

    /// <summary>
    /// 艾露挖掘返回
    /// </summary>
    public class CSExtraCatRewardRsp : IStructure
    {

        public CSExtraCatRewardRsp()
        {
            RetCode = 0;
            ItemType = new List<int>();
            ItemCnt = new List<int>();
            BindType = new List<int>();
            RewardIdx = new List<int>();
        }

        /// <summary>
        /// 状态错误码
        /// </summary>
        public int RetCode;

        public List<int> ItemType;

        public List<int> ItemCnt;

        public List<int> BindType;

        /// <summary>
        /// 奖励Idx
        /// </summary>
        public List<int> RewardIdx;

        public void Write(IBuffer buffer)
        {
            buffer.WriteInt32(RetCode, Endianness.Big);
            int itemTypeCount = (int)ItemType.Count;
            buffer.WriteInt32(itemTypeCount, Endianness.Big);
            for (int i = 0; i < itemTypeCount; i++)
            {
                buffer.WriteInt32(ItemType[i], Endianness.Big);
            }
            int itemCntCount = (int)ItemCnt.Count;
            buffer.WriteInt32(itemCntCount, Endianness.Big);
            for (int i = 0; i < itemCntCount; i++)
            {
                buffer.WriteInt32(ItemCnt[i], Endianness.Big);
            }
            int bindTypeCount = (int)BindType.Count;
            buffer.WriteInt32(bindTypeCount, Endianness.Big);
            for (int i = 0; i < bindTypeCount; i++)
            {
                buffer.WriteInt32(BindType[i], Endianness.Big);
            }
            int rewardIdxCount = (int)RewardIdx.Count;
            buffer.WriteInt32(rewardIdxCount, Endianness.Big);
            for (int i = 0; i < rewardIdxCount; i++)
            {
                buffer.WriteInt32(RewardIdx[i], Endianness.Big);
            }
        }

    }
}
