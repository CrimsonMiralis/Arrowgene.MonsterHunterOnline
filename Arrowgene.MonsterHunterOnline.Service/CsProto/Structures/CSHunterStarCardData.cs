/*
* This file is part of Arrowgene.MonsterHunterOnline
*
* Arrowgene.MonsterHunterOnline is a server implementation for the game "Monster Hunter Online".
* Copyright (C) 2023-2024 "all contributors"
*
* Github: https://github.com/sebastian-heinz/Arrowgene.MonsterHunterOnline
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU Affero General Public License as published
*  by the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU Affero General Public License for more details.
*
*  You should have received a copy of the GNU Affero General Public License
*  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

using System.Collections.Generic;
using Arrowgene.Buffers;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Core;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Enums;

namespace Arrowgene.MonsterHunterOnline.Service.CsProto.Structures
{

    /// <summary>
    /// 卡片数据
    /// </summary>
    public class CSHunterStarCardData : IStructure
    {

        public CSHunterStarCardData()
        {
            CardId = 0;
            Finished = 0;
            FinishTime = 0;
            TargetList = new List<uint>();
        }

        /// <summary>
        /// 卡片编号
        /// </summary>
        public uint CardId;

        /// <summary>
        /// 是否完成>0完成
        /// </summary>
        public byte Finished;

        /// <summary>
        /// 完成时间
        /// </summary>
        public uint FinishTime;

        /// <summary>
        /// 卡片目标
        /// </summary>
        public List<uint> TargetList;

        public void Write(IBuffer buffer)
        {
            buffer.WriteUInt32(CardId, Endianness.Big);
            buffer.WriteByte(Finished);
            buffer.WriteUInt32(FinishTime, Endianness.Big);
            byte targetListCount = (byte)TargetList.Count;
            buffer.WriteByte(targetListCount);
            for (int i = 0; i < targetListCount; i++)
            {
                buffer.WriteUInt32(TargetList[i], Endianness.Big);
            }
        }

    }
}
