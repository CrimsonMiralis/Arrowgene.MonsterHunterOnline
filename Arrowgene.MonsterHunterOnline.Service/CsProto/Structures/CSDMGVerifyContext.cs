/*
* This file is part of Arrowgene.MonsterHunterOnline
*
* Arrowgene.MonsterHunterOnline is a server implementation for the game "Monster Hunter Online".
* Copyright (C) 2023-2024 "all contributors"
*
* Github: https://github.com/sebastian-heinz/Arrowgene.MonsterHunterOnline
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU Affero General Public License as published
*  by the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU Affero General Public License for more details.
*
*  You should have received a copy of the GNU Affero General Public License
*  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

using System.Collections.Generic;
using Arrowgene.Buffers;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Core;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Enums;

namespace Arrowgene.MonsterHunterOnline.Service.CsProto.Structures
{

    /// <summary>
    /// 客户端传送到服务器的打击行为验证上下文
    /// </summary>
    public class CSDMGVerifyContext : IStructure
    {

        public CSDMGVerifyContext()
        {
            SyncTime = 0;
            Sequence = 0;
            AttackerEntityPos = new CSQuatT();
            AttackerLayers = new List<CSTransitionQueue>();
            AttackeeEntityPos = new CSQuatT();
            AttackeeLayers = new List<CSTransitionQueue>();
            HitInfo = new CSBattleDMG();
        }

        /// <summary>
        /// 同步时间
        /// </summary>
        public long SyncTime;

        /// <summary>
        /// 序列
        /// </summary>
        public long Sequence;

        /// <summary>
        /// 打击发生时攻击者的位置和旋转
        /// </summary>
        public CSQuatT AttackerEntityPos;

        /// <summary>
        /// 攻击者的动画队列组
        /// </summary>
        public List<CSTransitionQueue> AttackerLayers;

        /// <summary>
        /// 打击发生时受击者的位置和旋转
        /// </summary>
        public CSQuatT AttackeeEntityPos;

        /// <summary>
        /// 受击者的动画队列组
        /// </summary>
        public List<CSTransitionQueue> AttackeeLayers;

        /// <summary>
        /// 打击信息
        /// </summary>
        public CSBattleDMG HitInfo;

        public void Write(IBuffer buffer)
        {
            buffer.WriteInt64(SyncTime, Endianness.Big);
            buffer.WriteInt64(Sequence, Endianness.Big);
            AttackerEntityPos.Write(buffer);
            short attackerLayersCount = (short)AttackerLayers.Count;
            buffer.WriteInt16(attackerLayersCount, Endianness.Big);
            for (int i = 0; i < attackerLayersCount; i++)
            {
                AttackerLayers[i].Write(buffer);
            }
            AttackeeEntityPos.Write(buffer);
            short attackeeLayersCount = (short)AttackeeLayers.Count;
            buffer.WriteInt16(attackeeLayersCount, Endianness.Big);
            for (int i = 0; i < attackeeLayersCount; i++)
            {
                AttackeeLayers[i].Write(buffer);
            }
            HitInfo.Write(buffer);
        }

    }
}
