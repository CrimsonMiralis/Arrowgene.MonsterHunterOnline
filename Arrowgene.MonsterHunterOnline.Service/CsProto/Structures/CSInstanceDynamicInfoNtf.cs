/*
* This file is part of Arrowgene.MonsterHunterOnline
*
* Arrowgene.MonsterHunterOnline is a server implementation for the game "Monster Hunter Online".
* Copyright (C) 2023-2024 "all contributors"
*
* Github: https://github.com/sebastian-heinz/Arrowgene.MonsterHunterOnline
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU Affero General Public License as published
*  by the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU Affero General Public License for more details.
*
*  You should have received a copy of the GNU Affero General Public License
*  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

using System.Collections.Generic;
using Arrowgene.Buffers;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Core;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Enums;

namespace Arrowgene.MonsterHunterOnline.Service.CsProto.Structures
{

    /// <summary>
    /// 副本动态数据
    /// </summary>
    public class CSInstanceDynamicInfoNtf : IStructure
    {

        public CSInstanceDynamicInfoNtf(CSRulesInfo _RulesInfo)
        {
            CreatePlayerMaxLv = 0;
            StartTime = 0;
            RemainSeconds = 0;
            VipRemainSeconds = 0;
            ItemRemainSeconds = 0;
            NormalMaxLimit = 0;
            VipMaxLimit = 0;
            ItemMaxLimit = 0;
            PlayerNum = 0;
            IsHunterOfficer = 0;
            RegionWeather = new List<CSRegionWeatherNtf>();
            IsCrossServerInstance = 0;
            IsWarning = 0;
            HuntingMode = 0;
            ActHuntingMode = 0;
            CarCarInfo = new LevelCatCarInfo();
            RulesInfo = _RulesInfo;
            OtherStatData = new BattleStatInfo();
            PaidItems = new List<CSPaidContributeBoxData>();
            PaidBuffs = new List<CSPaidContributeBoxData>();
            IsBigRand = 0;
        }

        /// <summary>
        /// 创建玩家的最大级别
        /// </summary>
        public int CreatePlayerMaxLv;

        /// <summary>
        /// 副本开始时间
        /// </summary>
        public int StartTime;

        public int RemainSeconds;

        public int VipRemainSeconds;

        public int ItemRemainSeconds;

        /// <summary>
        /// 最大时间
        /// </summary>
        public int NormalMaxLimit;

        /// <summary>
        /// VIP最大时间
        /// </summary>
        public int VipMaxLimit;

        /// <summary>
        /// 道具最大时间
        /// </summary>
        public int ItemMaxLimit;

        /// <summary>
        /// 副本关卡人数
        /// </summary>
        public int PlayerNum;

        /// <summary>
        /// 是否教官
        /// </summary>
        public int IsHunterOfficer;

        public List<CSRegionWeatherNtf> RegionWeather;

        /// <summary>
        /// 是否跨服副本
        /// </summary>
        public int IsCrossServerInstance;

        /// <summary>
        /// 是否Warning关卡
        /// </summary>
        public int IsWarning;

        /// <summary>
        /// 狩猎模式选择
        /// </summary>
        public int HuntingMode;

        /// <summary>
        /// 狩猎模式实际
        /// </summary>
        public int ActHuntingMode;

        /// <summary>
        /// 副本猫车信息
        /// </summary>
        public LevelCatCarInfo CarCarInfo;

        /// <summary>
        /// battle rules类型
        /// </summary>

        /// <summary>
        /// battle rules相关信息
        /// </summary>
        public CSRulesInfo RulesInfo;

        /// <summary>
        /// 副本其他统计信息
        /// </summary>
        public BattleStatInfo OtherStatData;

        /// <summary>
        /// 缴纳物品组
        /// </summary>
        public List<CSPaidContributeBoxData> PaidItems;

        /// <summary>
        /// 缴纳BUFF组
        /// </summary>
        public List<CSPaidContributeBoxData> PaidBuffs;

        /// <summary>
        /// 是否大随机玩家
        /// </summary>
        public int IsBigRand;

        public void Write(IBuffer buffer)
        {
            buffer.WriteInt32(CreatePlayerMaxLv, Endianness.Big);
            buffer.WriteInt32(StartTime, Endianness.Big);
            buffer.WriteInt32(RemainSeconds, Endianness.Big);
            buffer.WriteInt32(VipRemainSeconds, Endianness.Big);
            buffer.WriteInt32(ItemRemainSeconds, Endianness.Big);
            buffer.WriteInt32(NormalMaxLimit, Endianness.Big);
            buffer.WriteInt32(VipMaxLimit, Endianness.Big);
            buffer.WriteInt32(ItemMaxLimit, Endianness.Big);
            buffer.WriteInt32(PlayerNum, Endianness.Big);
            buffer.WriteInt32(IsHunterOfficer, Endianness.Big);
            short regionWeatherCount = (short)RegionWeather.Count;
            buffer.WriteInt16(regionWeatherCount, Endianness.Big);
            for (int i = 0; i < regionWeatherCount; i++)
            {
                RegionWeather[i].Write(buffer);
            }
            buffer.WriteInt32(IsCrossServerInstance, Endianness.Big);
            buffer.WriteInt32(IsWarning, Endianness.Big);
            buffer.WriteInt32(HuntingMode, Endianness.Big);
            buffer.WriteInt32(ActHuntingMode, Endianness.Big);
            CarCarInfo.Write(buffer);
            buffer.WriteInt32((int)RulesInfo.RulesInfoType, Endianness.Big);
            RulesInfo.Write(buffer);
            OtherStatData.Write(buffer);
            int paidItemsCount = (int)PaidItems.Count;
            buffer.WriteInt32(paidItemsCount, Endianness.Big);
            for (int i = 0; i < paidItemsCount; i++)
            {
                PaidItems[i].Write(buffer);
            }
            int paidBuffsCount = (int)PaidBuffs.Count;
            buffer.WriteInt32(paidBuffsCount, Endianness.Big);
            for (int i = 0; i < paidBuffsCount; i++)
            {
                PaidBuffs[i].Write(buffer);
            }
            buffer.WriteInt32(IsBigRand, Endianness.Big);
        }

    }
}
