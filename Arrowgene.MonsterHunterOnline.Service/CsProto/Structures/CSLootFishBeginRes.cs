/*
* This file is part of Arrowgene.MonsterHunterOnline
*
* Arrowgene.MonsterHunterOnline is a server implementation for the game "Monster Hunter Online".
* Copyright (C) 2023-2024 "all contributors"
*
* Github: https://github.com/sebastian-heinz/Arrowgene.MonsterHunterOnline
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU Affero General Public License as published
*  by the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU Affero General Public License for more details.
*
*  You should have received a copy of the GNU Affero General Public License
*  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

using System.Collections.Generic;
using Arrowgene.Buffers;
using Arrowgene.Logging;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Core;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Enums;

namespace Arrowgene.MonsterHunterOnline.Service.CsProto.Structures
{

    /// <summary>
    /// 开始钓鱼回复
    /// </summary>
    public class CSLootFishBeginRes : IStructure
    {
        private static readonly ILogger Logger = LogProvider.Logger(typeof(CSLootFishBeginRes));

        public CSLootFishBeginRes()
        {
            Ret = 0;
            PlayerId = 0;
            LogicEntityId = 0;
            FishList = new List<uint>();
            GotFishId = 0;
            FinishBegTime = 0;
            FinishEndTime = 0;
            TryBegTime = 0;
            Angle = 0;
            Radius = 0;
        }

        /// <summary>
        /// 操作结果, 见返回码定义
        /// </summary>
        public int Ret;

        /// <summary>
        /// 玩家ID
        /// </summary>
        public uint PlayerId;

        /// <summary>
        /// 钓鱼资源点ID
        /// </summary>
        public uint LogicEntityId;

        /// <summary>
        /// 可钓鱼列表
        /// </summary>
        public List<uint> FishList;

        /// <summary>
        /// 上钩的鱼
        /// </summary>
        public uint GotFishId;

        /// <summary>
        /// 收杆开始时间
        /// </summary>
        public uint FinishBegTime;

        /// <summary>
        /// 收杆截至时间
        /// </summary>
        public uint FinishEndTime;

        /// <summary>
        /// 鱼儿试探开始时间
        /// </summary>
        public uint TryBegTime;

        /// <summary>
        /// 落点角度
        /// </summary>
        public ushort Angle;

        /// <summary>
        /// 落点半径
        /// </summary>
        public byte Radius;

        public void Write(IBuffer buffer)
        {
            buffer.WriteInt32(Ret, Endianness.Big);
            buffer.WriteUInt32(PlayerId, Endianness.Big);
            buffer.WriteUInt32(LogicEntityId, Endianness.Big);
            byte fishListCount = (byte)FishList.Count;
            buffer.WriteByte(fishListCount);
            for (int i = 0; i < fishListCount; i++)
            {
                buffer.WriteUInt32(FishList[i], Endianness.Big);
            }
            buffer.WriteUInt32(GotFishId, Endianness.Big);
            buffer.WriteUInt32(FinishBegTime, Endianness.Big);
            buffer.WriteUInt32(FinishEndTime, Endianness.Big);
            buffer.WriteUInt32(TryBegTime, Endianness.Big);
            buffer.WriteUInt16(Angle, Endianness.Big);
            buffer.WriteByte(Radius);
        }

        public void Read(IBuffer buffer)
        {
            Ret = buffer.ReadInt32(Endianness.Big);
            PlayerId = buffer.ReadUInt32(Endianness.Big);
            LogicEntityId = buffer.ReadUInt32(Endianness.Big);
            FishList.Clear();
            byte fishListCount = buffer.ReadByte();
            for (int i = 0; i < fishListCount; i++)
            {
                uint FishListEntry = buffer.ReadUInt32(Endianness.Big);
                FishList.Add(FishListEntry);
            }
            GotFishId = buffer.ReadUInt32(Endianness.Big);
            FinishBegTime = buffer.ReadUInt32(Endianness.Big);
            FinishEndTime = buffer.ReadUInt32(Endianness.Big);
            TryBegTime = buffer.ReadUInt32(Endianness.Big);
            Angle = buffer.ReadUInt16(Endianness.Big);
            Radius = buffer.ReadByte();
        }

    }
}
