/*
* This file is part of Arrowgene.MonsterHunterOnline
*
* Arrowgene.MonsterHunterOnline is a server implementation for the game "Monster Hunter Online".
* Copyright (C) 2023-2024 "all contributors"
*
* Github: https://github.com/sebastian-heinz/Arrowgene.MonsterHunterOnline
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU Affero General Public License as published
*  by the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU Affero General Public License for more details.
*
*  You should have received a copy of the GNU Affero General Public License
*  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

using System.Collections.Generic;
using Arrowgene.Buffers;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Core;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Enums;

namespace Arrowgene.MonsterHunterOnline.Service.CsProto.Structures
{

    /// <summary>
    /// Player Level initialize info
    /// </summary>
    public class CSPlayerLevelInitInfo : RemoteDataInfo
    {

        public CSPlayerLevelInitInfo()
        {
            EntrustMoneyLastTm = 0;
            UnLockLevelData = new List<PlayerUnlockLevelInfo>();
            UnlockHubData = new List<PlayerUnLockHubInfo>();
            HubRewardData = new List<CSHubEntryRewardInfo>();
            LevelIntegrateData = new List<PlayerLevelIntegrateInfo>();
            LevelEntrustData = new List<PlayerLevelEntrustInfo>();
            PlayerLevelEnstrustRewardData = new List<PlayerLevelEnstrustRewardInfo>();
            PlayerLevelFormatPeriodLimitData = new CSLevelFormatPeriodLimitInfo();
            PlayerThousandLayerData = new List<CSThousandLayerDataInfo>();
            LevelStatDataPack = new List<byte>();
            EntrustGroupDataPack = new List<byte>();
            LevelWarningDataPack = new List<byte>();
            CSMonsterSizeList = new List<CSMonsterSize>();
            UnLockLevelGroupData = new List<PlayerUnlockLevelGroupInfo>();
            UnlockHubStarData = new List<PlayerUnLockHubStarInfo>();
            PlayerSuperHunterData = new PlayerSuperHunterInfo();
        }

        public ROMTE_DATA_TYPE DataType => ROMTE_DATA_TYPE.LEVELINFO_DATA_TYPE;

        /// <summary>
        /// 委托货币最后一次重置时间
        /// </summary>
        public int EntrustMoneyLastTm;

        public List<PlayerUnlockLevelInfo> UnLockLevelData;

        public List<PlayerUnLockHubInfo> UnlockHubData;

        public List<CSHubEntryRewardInfo> HubRewardData;

        public List<PlayerLevelIntegrateInfo> LevelIntegrateData;

        public List<PlayerLevelEntrustInfo> LevelEntrustData;

        public List<PlayerLevelEnstrustRewardInfo> PlayerLevelEnstrustRewardData;

        /// <summary>
        /// 赛制周期次数数据
        /// </summary>
        public CSLevelFormatPeriodLimitInfo PlayerLevelFormatPeriodLimitData;

        public List<CSThousandLayerDataInfo> PlayerThousandLayerData;

        /// <summary>
        /// 关卡统计数据
        /// </summary>
        public List<byte> LevelStatDataPack;

        /// <summary>
        /// 委托大组统计数据
        /// </summary>
        public List<byte> EntrustGroupDataPack;

        /// <summary>
        /// warning关卡数据
        /// </summary>
        public List<byte> LevelWarningDataPack;

        /// <summary>
        /// 怪物尺寸数据列表
        /// </summary>
        public List<CSMonsterSize> CSMonsterSizeList;

        public List<PlayerUnlockLevelGroupInfo> UnLockLevelGroupData;

        public List<PlayerUnLockHubStarInfo> UnlockHubStarData;

        /// <summary>
        /// 超级大连续信息
        /// </summary>
        public PlayerSuperHunterInfo PlayerSuperHunterData;

        public void Write(IBuffer buffer)
        {
            buffer.WriteInt32(EntrustMoneyLastTm, Endianness.Big);
            int unLockLevelDataCount = (int)UnLockLevelData.Count;
            buffer.WriteInt32(unLockLevelDataCount, Endianness.Big);
            for (int i = 0; i < unLockLevelDataCount; i++)
            {
                UnLockLevelData[i].Write(buffer);
            }
            int unlockHubDataCount = (int)UnlockHubData.Count;
            buffer.WriteInt32(unlockHubDataCount, Endianness.Big);
            for (int i = 0; i < unlockHubDataCount; i++)
            {
                UnlockHubData[i].Write(buffer);
            }
            int hubRewardDataCount = (int)HubRewardData.Count;
            buffer.WriteInt32(hubRewardDataCount, Endianness.Big);
            for (int i = 0; i < hubRewardDataCount; i++)
            {
                HubRewardData[i].Write(buffer);
            }
            int levelIntegrateDataCount = (int)LevelIntegrateData.Count;
            buffer.WriteInt32(levelIntegrateDataCount, Endianness.Big);
            for (int i = 0; i < levelIntegrateDataCount; i++)
            {
                LevelIntegrateData[i].Write(buffer);
            }
            int levelEntrustDataCount = (int)LevelEntrustData.Count;
            buffer.WriteInt32(levelEntrustDataCount, Endianness.Big);
            for (int i = 0; i < levelEntrustDataCount; i++)
            {
                LevelEntrustData[i].Write(buffer);
            }
            int playerLevelEnstrustRewardDataCount = (int)PlayerLevelEnstrustRewardData.Count;
            buffer.WriteInt32(playerLevelEnstrustRewardDataCount, Endianness.Big);
            for (int i = 0; i < playerLevelEnstrustRewardDataCount; i++)
            {
                PlayerLevelEnstrustRewardData[i].Write(buffer);
            }
            PlayerLevelFormatPeriodLimitData.Write(buffer);
            int playerThousandLayerDataCount = (int)PlayerThousandLayerData.Count;
            buffer.WriteInt32(playerThousandLayerDataCount, Endianness.Big);
            for (int i = 0; i < playerThousandLayerDataCount; i++)
            {
                PlayerThousandLayerData[i].Write(buffer);
            }
            int levelStatDataPackCount = (int)LevelStatDataPack.Count;
            buffer.WriteInt32(levelStatDataPackCount, Endianness.Big);
            for (int i = 0; i < levelStatDataPackCount; i++)
            {
                buffer.WriteByte(LevelStatDataPack[i]);
            }
            int entrustGroupDataPackCount = (int)EntrustGroupDataPack.Count;
            buffer.WriteInt32(entrustGroupDataPackCount, Endianness.Big);
            for (int i = 0; i < entrustGroupDataPackCount; i++)
            {
                buffer.WriteByte(EntrustGroupDataPack[i]);
            }
            int levelWarningDataPackCount = (int)LevelWarningDataPack.Count;
            buffer.WriteInt32(levelWarningDataPackCount, Endianness.Big);
            for (int i = 0; i < levelWarningDataPackCount; i++)
            {
                buffer.WriteByte(LevelWarningDataPack[i]);
            }
            int cSMonsterSizeListCount = (int)CSMonsterSizeList.Count;
            buffer.WriteInt32(cSMonsterSizeListCount, Endianness.Big);
            for (int i = 0; i < cSMonsterSizeListCount; i++)
            {
                CSMonsterSizeList[i].Write(buffer);
            }
            int unLockLevelGroupDataCount = (int)UnLockLevelGroupData.Count;
            buffer.WriteInt32(unLockLevelGroupDataCount, Endianness.Big);
            for (int i = 0; i < unLockLevelGroupDataCount; i++)
            {
                UnLockLevelGroupData[i].Write(buffer);
            }
            int unlockHubStarDataCount = (int)UnlockHubStarData.Count;
            buffer.WriteInt32(unlockHubStarDataCount, Endianness.Big);
            for (int i = 0; i < unlockHubStarDataCount; i++)
            {
                UnlockHubStarData[i].Write(buffer);
            }
            PlayerSuperHunterData.Write(buffer);
        }

    }
}
