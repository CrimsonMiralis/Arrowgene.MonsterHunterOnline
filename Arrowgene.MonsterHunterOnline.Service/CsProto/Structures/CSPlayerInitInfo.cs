/*
* This file is part of Arrowgene.MonsterHunterOnline
*
* Arrowgene.MonsterHunterOnline is a server implementation for the game "Monster Hunter Online".
* Copyright (C) 2023-2024 "all contributors"
*
* Github: https://github.com/sebastian-heinz/Arrowgene.MonsterHunterOnline
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU Affero General Public License as published
*  by the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU Affero General Public License for more details.
*
*  You should have received a copy of the GNU Affero General Public License
*  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

using System.Collections.Generic;
using Arrowgene.Buffers;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Core;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Enums;

namespace Arrowgene.MonsterHunterOnline.Service.CsProto.Structures
{

    /// <summary>
    /// Player initialize info
    /// </summary>
    public class CSPlayerInitInfo : IStructure
    {

        public CSPlayerInitInfo()
        {
            AccountID = 0;
            NetID = 0;
            DBId = 0;
            SessionID = 0;
            WorldID = 0;
            ServerID = 0;
            WorldSvrID = 0;
            ServerTime = 0;
            IsReConnect = 0;
            Name = "";
            Gender = 0;
            IsGM = 0;
            Pose = new CSQuatT();
            ParentEntityGUID = 0;
            AvatarSetID = 0;
            Faction = 0;
            RandSeed = 0;
            Weapon = 0;
            LastLoginTime = 0;
            CreateTime = 0;
            StoreSize = 0;
            NormalSize = 0;
            MaterialStoreSize = 0;
            BagItem = new List<byte>();
            EquipItem = new List<byte>();
            StoreItem = new List<byte>();
            Shortcut = new List<CSShortcut>();
            Buff = new List<byte>();
            Skill = new List<byte>();
            Pet = new List<byte>();
            FriendData = new List<FriendInfoPacket>();
            PasserbyData = new List<PasserbyInfoPacket>();
            BlacklistData = new List<BlacklistInfoPacket>();
            FriendGroupData = new List<FriendGroupPacket>();
            Attr = new List<byte>();
            Task = new List<byte>();
            Guild = new List<byte>();
            ActionPoint = new CSActionPointData();
            FirstEnterLevel = 0;
            FirstEnterMap = 0;
            PvpPrepareStageState = 0;
            GuideSteps = new List<CSGuideStep>();
            CD = new List<byte>();
            SchedulePrize = new List<byte>();
            mailInfo = new List<byte>();
            NpcAtdInfo = new List<byte>();
            CurPlayerUsedCatCarCount = 0;
            CatCuisineID = 0;
            CatCuisineLevel = 0;
            CatCuisineBuffs = 0;
            CatCuisineLastTm = 0;
            CatCuisineFormulaCount = 0;
            CatCuisineFormulaData = new List<CatCuisineDataInfo>();
            ItemUseOnceList = new List<ushort>();
            Star = new List<byte>();
            Video = new List<byte>();
            ClientSettings = new CSClientSettings();
            Farm = new List<byte>();
            FacialInfo = new short[CsProtoConstant.CS_MAX_FACIALINFO_COUNT];
            Spoor = new List<byte>();
            RapidHunt = new List<byte>();
            Activity = new List<byte>();
            IsSpectating = 0;
            ItemRebuild = new List<byte>();
            ItemBox = new List<byte>();
            Shop = new List<byte>();
            EquipPlanData = new List<byte>();
            Trace = new List<byte>();
            StarStone = new CSStarStoneInfo();
            Speak = new List<byte>();
            BattleItemUse = new List<byte>();
            SuitSkillData = new List<byte>();
            Astrolabe = new List<byte>();
            WildHunt = new List<byte>();
            SoulStone = new List<byte>();
            Monolopy = new List<byte>();
            Achieve = new List<byte>();
            UIOptionInfo = new ClientUIOption();
            Illustrate = new List<byte>();
            WeaponStyleInfo = new S2CWeaponStyleInfo();
            WeaponHavenInfo = new List<byte>();
            SilverStorageBoxInfo = new S2CSilverStorageBoxInfo();
            GuideBookData = new List<byte>();
            SecretResearchInitData = new S2CSecretResearchLabDataSynchronizationRsp();
            DragonShopBox = 0;
            CanGetRewarded = 0;
        }

        /// <summary>
        /// 玩家QQ号
        /// </summary>
        public uint AccountID;

        /// <summary>
        /// logic entity id
        /// </summary>
        public int NetID;

        /// <summary>
        /// DBID
        /// </summary>
        public ulong DBId;

        /// <summary>
        /// Session id
        /// </summary>
        public uint SessionID;

        /// <summary>
        /// 大区ID
        /// </summary>
        public uint WorldID;

        /// <summary>
        /// 服ID
        /// </summary>
        public uint ServerID;

        /// <summary>
        /// WorldSvrID
        /// </summary>
        public uint WorldSvrID;

        /// <summary>
        /// 服务器时间
        /// </summary>
        public uint ServerTime;

        /// <summary>
        /// 本次登录是否断线重连
        /// </summary>
        public uint IsReConnect;

        /// <summary>
        /// role name
        /// </summary>
        public string Name;

        /// <summary>
        /// gender fo role
        /// </summary>
        public byte Gender;

        /// <summary>
        /// 是否是GM
        /// </summary>
        public byte IsGM;

        /// <summary>
        /// Appear location
        /// </summary>
        public CSQuatT Pose;

        /// <summary>
        /// parent entityGUID
        /// </summary>
        public ulong ParentEntityGUID;

        /// <summary>
        /// Avatar Set
        /// </summary>
        public byte AvatarSetID;

        /// <summary>
        /// 阵营
        /// </summary>
        public int Faction;

        /// <summary>
        /// 随机数
        /// </summary>
        public uint RandSeed;

        public int Weapon;

        /// <summary>
        /// 最后登录时间
        /// </summary>
        public uint LastLoginTime;

        /// <summary>
        /// 角色创建时间
        /// </summary>
        public uint CreateTime;

        /// <summary>
        /// 仓库大小
        /// </summary>
        public ushort StoreSize;

        /// <summary>
        /// 普通背包容量大小
        /// </summary>
        public ushort NormalSize;

        /// <summary>
        /// 素材仓库容量大小
        /// </summary>
        public ushort MaterialStoreSize;

        /// <summary>
        /// 背包道具数据
        /// </summary>
        public List<byte> BagItem;

        /// <summary>
        /// 装备数据
        /// </summary>
        public List<byte> EquipItem;

        /// <summary>
        /// 仓库数据
        /// </summary>
        public List<byte> StoreItem;

        /// <summary>
        /// 快捷栏数据
        /// </summary>
        public List<CSShortcut> Shortcut;

        /// <summary>
        /// buff数据
        /// </summary>
        public List<byte> Buff;

        /// <summary>
        /// skill数据
        /// </summary>
        public List<byte> Skill;

        /// <summary>
        /// pet数据
        /// </summary>
        public List<byte> Pet;

        /// <summary>
        /// 好友列表
        /// </summary>
        public List<FriendInfoPacket> FriendData;

        /// <summary>
        /// 路人列表
        /// </summary>
        public List<PasserbyInfoPacket> PasserbyData;

        /// <summary>
        /// 黑名单列表
        /// </summary>
        public List<BlacklistInfoPacket> BlacklistData;

        /// <summary>
        /// 好友分组列表
        /// </summary>
        public List<FriendGroupPacket> FriendGroupData;

        /// <summary>
        /// attr数据
        /// </summary>
        public List<byte> Attr;

        /// <summary>
        /// 任务数据
        /// </summary>
        public List<byte> Task;

        /// <summary>
        /// 猎团数据
        /// </summary>
        public List<byte> Guild;

        /// <summary>
        /// 行动力数据
        /// </summary>
        public CSActionPointData ActionPoint;

        /// <summary>
        /// 是否第一次进入LEVEL
        /// </summary>
        public int FirstEnterLevel;

        /// <summary>
        /// 是否第一次进入MAP
        /// </summary>
        public int FirstEnterMap;

        /// <summary>
        /// PVP初始准备阶段状态 1表示结束，0表示开始
        /// </summary>
        public int PvpPrepareStageState;

        /// <summary>
        /// 新手引导完成的步骤
        /// </summary>
        public List<CSGuideStep> GuideSteps;

        /// <summary>
        /// CD数据
        /// </summary>
        public List<byte> CD;

        /// <summary>
        /// 日程表奖励信息数据
        /// </summary>
        public List<byte> SchedulePrize;

        /// <summary>
        /// 邮件数据
        /// </summary>
        public List<byte> mailInfo;

        /// <summary>
        /// NPC组好感度数据
        /// </summary>
        public List<byte> NpcAtdInfo;

        /// <summary>
        /// 当前玩家已经使用的猫车次数
        /// </summary>
        public int CurPlayerUsedCatCarCount;

        /// <summary>
        /// 剩余猫饭的ID
        /// </summary>
        public int CatCuisineID;

        /// <summary>
        /// 剩余猫饭的等级
        /// </summary>
        public byte CatCuisineLevel;

        /// <summary>
        /// 剩余猫饭的效果
        /// </summary>
        public byte CatCuisineBuffs;

        /// <summary>
        /// 最后一次吃猫饭的时间戳
        /// </summary>
        public uint CatCuisineLastTm;

        /// <summary>
        /// 猫饭配方解锁数量
        /// </summary>
        public int CatCuisineFormulaCount;

        public List<CatCuisineDataInfo> CatCuisineFormulaData;

        /// <summary>
        /// 唯一使用物品列表
        /// </summary>
        public List<ushort> ItemUseOnceList;

        /// <summary>
        /// 猎人星级数据
        /// </summary>
        public List<byte> Star;

        /// <summary>
        /// 视频观看数据
        /// </summary>
        public List<byte> Video;

        /// <summary>
        /// 客户端杂项数据
        /// </summary>
        public CSClientSettings ClientSettings;

        /// <summary>
        /// 农场数据
        /// </summary>
        public List<byte> Farm;

        /// <summary>
        /// 捏脸数据集合
        /// </summary>
        public short[] FacialInfo;

        /// <summary>
        /// 猎人之路数据
        /// </summary>
        public List<byte> Spoor;

        /// <summary>
        /// 疾风狩猎数据
        /// </summary>
        public List<byte> RapidHunt;

        /// <summary>
        /// 活动数据
        /// </summary>
        public List<byte> Activity;

        /// <summary>
        /// 是否在观战
        /// </summary>
        public byte IsSpectating;

        /// <summary>
        /// ItemRebuild数据
        /// </summary>
        public List<byte> ItemRebuild;

        /// <summary>
        /// ItemBox数据
        /// </summary>
        public List<byte> ItemBox;

        /// <summary>
        /// 商店数据
        /// </summary>
        public List<byte> Shop;

        /// <summary>
        /// 装备方案长度
        /// </summary>
        public List<byte> EquipPlanData;

        /// <summary>
        /// 追踪数据
        /// </summary>
        public List<byte> Trace;

        /// <summary>
        /// 星蕴石信息
        /// </summary>
        public CSStarStoneInfo StarStone;

        /// <summary>
        /// Speak数据
        /// </summary>
        public List<byte> Speak;

        /// <summary>
        /// 副本物品使用数量数据
        /// </summary>
        public List<byte> BattleItemUse;

        public List<byte> SuitSkillData;

        /// <summary>
        /// 星盘数据
        /// </summary>
        public List<byte> Astrolabe;

        /// <summary>
        /// 红黄对抗数据
        /// </summary>
        public List<byte> WildHunt;

        /// <summary>
        /// 狩魂石数据
        /// </summary>
        public List<byte> SoulStone;

        /// <summary>
        /// 大富翁数据
        /// </summary>
        public List<byte> Monolopy;

        /// <summary>
        /// 成就数据
        /// </summary>
        public List<byte> Achieve;

        /// <summary>
        /// UI自定义数据信息
        /// </summary>
        public ClientUIOption UIOptionInfo;

        /// <summary>
        /// 怪物图鉴数据
        /// </summary>
        public List<byte> Illustrate;

        /// <summary>
        /// 武器Style信息
        /// </summary>
        public S2CWeaponStyleInfo WeaponStyleInfo;

        /// <summary>
        /// 武器是否获取过bit信息
        /// </summary>
        public List<byte> WeaponHavenInfo;

        /// <summary>
        /// 银币收纳箱信息
        /// </summary>
        public S2CSilverStorageBoxInfo SilverStorageBoxInfo;

        /// <summary>
        /// 引导书数据长度
        /// </summary>
        public List<byte> GuideBookData;

        /// <summary>
        /// 机密研究院数据
        /// </summary>
        public S2CSecretResearchLabDataSynchronizationRsp SecretResearchInitData;

        /// <summary>
        /// 小铺挂属的DrgonboxID
        /// </summary>
        public int DragonShopBox;

        /// <summary>
        /// 返利活动是否有可领取奖励
        /// </summary>
        public int CanGetRewarded;

        public void Write(IBuffer buffer)
        {
            buffer.WriteUInt32(AccountID, Endianness.Big);
            buffer.WriteInt32(NetID, Endianness.Big);
            buffer.WriteUInt64(DBId, Endianness.Big);
            buffer.WriteUInt32(SessionID, Endianness.Big);
            buffer.WriteUInt32(WorldID, Endianness.Big);
            buffer.WriteUInt32(ServerID, Endianness.Big);
            buffer.WriteUInt32(WorldSvrID, Endianness.Big);
            buffer.WriteUInt32(ServerTime, Endianness.Big);
            buffer.WriteUInt32(IsReConnect, Endianness.Big);
            buffer.WriteInt32(Name.Length + 1, Endianness.Big);
            buffer.WriteCString(Name);
            buffer.WriteByte(Gender);
            buffer.WriteByte(IsGM);
            Pose.Write(buffer);
            buffer.WriteUInt64(ParentEntityGUID, Endianness.Big);
            buffer.WriteByte(AvatarSetID);
            buffer.WriteInt32(Faction, Endianness.Big);
            buffer.WriteUInt32(RandSeed, Endianness.Big);
            buffer.WriteInt32(Weapon, Endianness.Big);
            buffer.WriteUInt32(LastLoginTime, Endianness.Big);
            buffer.WriteUInt32(CreateTime, Endianness.Big);
            buffer.WriteUInt16(StoreSize, Endianness.Big);
            buffer.WriteUInt16(NormalSize, Endianness.Big);
            buffer.WriteUInt16(MaterialStoreSize, Endianness.Big);
            int bagItemCount = (int)BagItem.Count;
            buffer.WriteInt32(bagItemCount, Endianness.Big);
            for (int i = 0; i < bagItemCount; i++)
            {
                buffer.WriteByte(BagItem[i]);
            }
            ushort equipItemCount = (ushort)EquipItem.Count;
            buffer.WriteUInt16(equipItemCount, Endianness.Big);
            for (int i = 0; i < equipItemCount; i++)
            {
                buffer.WriteByte(EquipItem[i]);
            }
            int storeItemCount = (int)StoreItem.Count;
            buffer.WriteInt32(storeItemCount, Endianness.Big);
            for (int i = 0; i < storeItemCount; i++)
            {
                buffer.WriteByte(StoreItem[i]);
            }
            ushort shortcutCount = (ushort)Shortcut.Count;
            buffer.WriteUInt16(shortcutCount, Endianness.Big);
            for (int i = 0; i < shortcutCount; i++)
            {
                Shortcut[i].Write(buffer);
            }
            ushort buffCount = (ushort)Buff.Count;
            buffer.WriteUInt16(buffCount, Endianness.Big);
            for (int i = 0; i < buffCount; i++)
            {
                buffer.WriteByte(Buff[i]);
            }
            ushort skillCount = (ushort)Skill.Count;
            buffer.WriteUInt16(skillCount, Endianness.Big);
            for (int i = 0; i < skillCount; i++)
            {
                buffer.WriteByte(Skill[i]);
            }
            ushort petCount = (ushort)Pet.Count;
            buffer.WriteUInt16(petCount, Endianness.Big);
            for (int i = 0; i < petCount; i++)
            {
                buffer.WriteByte(Pet[i]);
            }
            int friendDataCount = (int)FriendData.Count;
            buffer.WriteInt32(friendDataCount, Endianness.Big);
            for (int i = 0; i < friendDataCount; i++)
            {
                FriendData[i].Write(buffer);
            }
            int passerbyDataCount = (int)PasserbyData.Count;
            buffer.WriteInt32(passerbyDataCount, Endianness.Big);
            for (int i = 0; i < passerbyDataCount; i++)
            {
                PasserbyData[i].Write(buffer);
            }
            int blacklistDataCount = (int)BlacklistData.Count;
            buffer.WriteInt32(blacklistDataCount, Endianness.Big);
            for (int i = 0; i < blacklistDataCount; i++)
            {
                BlacklistData[i].Write(buffer);
            }
            int friendGroupDataCount = (int)FriendGroupData.Count;
            buffer.WriteInt32(friendGroupDataCount, Endianness.Big);
            for (int i = 0; i < friendGroupDataCount; i++)
            {
                FriendGroupData[i].Write(buffer);
            }
            ushort attrCount = (ushort)Attr.Count;
            buffer.WriteUInt16(attrCount, Endianness.Big);
            for (int i = 0; i < attrCount; i++)
            {
                buffer.WriteByte(Attr[i]);
            }
            int taskCount = (int)Task.Count;
            buffer.WriteInt32(taskCount, Endianness.Big);
            for (int i = 0; i < taskCount; i++)
            {
                buffer.WriteByte(Task[i]);
            }
            int guildCount = (int)Guild.Count;
            buffer.WriteInt32(guildCount, Endianness.Big);
            for (int i = 0; i < guildCount; i++)
            {
                buffer.WriteByte(Guild[i]);
            }
            ActionPoint.Write(buffer);
            buffer.WriteInt32(FirstEnterLevel, Endianness.Big);
            buffer.WriteInt32(FirstEnterMap, Endianness.Big);
            buffer.WriteInt32(PvpPrepareStageState, Endianness.Big);
            ushort guideStepsCount = (ushort)GuideSteps.Count;
            buffer.WriteUInt16(guideStepsCount, Endianness.Big);
            for (int i = 0; i < guideStepsCount; i++)
            {
                GuideSteps[i].Write(buffer);
            }
            ushort cDCount = (ushort)CD.Count;
            buffer.WriteUInt16(cDCount, Endianness.Big);
            for (int i = 0; i < cDCount; i++)
            {
                buffer.WriteByte(CD[i]);
            }
            int schedulePrizeCount = (int)SchedulePrize.Count;
            buffer.WriteInt32(schedulePrizeCount, Endianness.Big);
            for (int i = 0; i < schedulePrizeCount; i++)
            {
                buffer.WriteByte(SchedulePrize[i]);
            }
            int mailInfoCount = (int)mailInfo.Count;
            buffer.WriteInt32(mailInfoCount, Endianness.Big);
            for (int i = 0; i < mailInfoCount; i++)
            {
                buffer.WriteByte(mailInfo[i]);
            }
            int npcAtdInfoCount = (int)NpcAtdInfo.Count;
            buffer.WriteInt32(npcAtdInfoCount, Endianness.Big);
            for (int i = 0; i < npcAtdInfoCount; i++)
            {
                buffer.WriteByte(NpcAtdInfo[i]);
            }
            buffer.WriteInt32(CurPlayerUsedCatCarCount, Endianness.Big);
            buffer.WriteInt32(CatCuisineID, Endianness.Big);
            buffer.WriteByte(CatCuisineLevel);
            buffer.WriteByte(CatCuisineBuffs);
            buffer.WriteUInt32(CatCuisineLastTm, Endianness.Big);
            buffer.WriteInt32(CatCuisineFormulaCount, Endianness.Big);
            ushort catCuisineFormulaDataCount = (ushort)CatCuisineFormulaData.Count;
            buffer.WriteUInt16(catCuisineFormulaDataCount, Endianness.Big);
            for (int i = 0; i < catCuisineFormulaDataCount; i++)
            {
                CatCuisineFormulaData[i].Write(buffer);
            }
            ushort itemUseOnceListCount = (ushort)ItemUseOnceList.Count;
            buffer.WriteUInt16(itemUseOnceListCount, Endianness.Big);
            for (int i = 0; i < itemUseOnceListCount; i++)
            {
                buffer.WriteUInt16(ItemUseOnceList[i], Endianness.Big);
            }
            int starCount = (int)Star.Count;
            buffer.WriteInt32(starCount, Endianness.Big);
            for (int i = 0; i < starCount; i++)
            {
                buffer.WriteByte(Star[i]);
            }
            ushort videoCount = (ushort)Video.Count;
            buffer.WriteUInt16(videoCount, Endianness.Big);
            for (int i = 0; i < videoCount; i++)
            {
                buffer.WriteByte(Video[i]);
            }
            ClientSettings.Write(buffer);
            int farmCount = (int)Farm.Count;
            buffer.WriteInt32(farmCount, Endianness.Big);
            for (int i = 0; i < farmCount; i++)
            {
                buffer.WriteByte(Farm[i]);
            }
            for (int i = 0; i < CsProtoConstant.CS_MAX_FACIALINFO_COUNT; i++)
            {
                buffer.WriteInt16(FacialInfo[i], Endianness.Big);
            }
            int spoorCount = (int)Spoor.Count;
            buffer.WriteInt32(spoorCount, Endianness.Big);
            for (int i = 0; i < spoorCount; i++)
            {
                buffer.WriteByte(Spoor[i]);
            }
            int rapidHuntCount = (int)RapidHunt.Count;
            buffer.WriteInt32(rapidHuntCount, Endianness.Big);
            for (int i = 0; i < rapidHuntCount; i++)
            {
                buffer.WriteByte(RapidHunt[i]);
            }
            int activityCount = (int)Activity.Count;
            buffer.WriteInt32(activityCount, Endianness.Big);
            for (int i = 0; i < activityCount; i++)
            {
                buffer.WriteByte(Activity[i]);
            }
            buffer.WriteByte(IsSpectating);
            int itemRebuildCount = (int)ItemRebuild.Count;
            buffer.WriteInt32(itemRebuildCount, Endianness.Big);
            for (int i = 0; i < itemRebuildCount; i++)
            {
                buffer.WriteByte(ItemRebuild[i]);
            }
            int itemBoxCount = (int)ItemBox.Count;
            buffer.WriteInt32(itemBoxCount, Endianness.Big);
            for (int i = 0; i < itemBoxCount; i++)
            {
                buffer.WriteByte(ItemBox[i]);
            }
            int shopCount = (int)Shop.Count;
            buffer.WriteInt32(shopCount, Endianness.Big);
            for (int i = 0; i < shopCount; i++)
            {
                buffer.WriteByte(Shop[i]);
            }
            ushort equipPlanDataCount = (ushort)EquipPlanData.Count;
            buffer.WriteUInt16(equipPlanDataCount, Endianness.Big);
            for (int i = 0; i < equipPlanDataCount; i++)
            {
                buffer.WriteByte(EquipPlanData[i]);
            }
            int traceCount = (int)Trace.Count;
            buffer.WriteInt32(traceCount, Endianness.Big);
            for (int i = 0; i < traceCount; i++)
            {
                buffer.WriteByte(Trace[i]);
            }
            StarStone.Write(buffer);
            int speakCount = (int)Speak.Count;
            buffer.WriteInt32(speakCount, Endianness.Big);
            for (int i = 0; i < speakCount; i++)
            {
                buffer.WriteByte(Speak[i]);
            }
            uint battleItemUseCount = (uint)BattleItemUse.Count;
            buffer.WriteUInt32(battleItemUseCount, Endianness.Big);
            for (int i = 0; i < battleItemUseCount; i++)
            {
                buffer.WriteByte(BattleItemUse[i]);
            }
            uint suitSkillDataCount = (uint)SuitSkillData.Count;
            buffer.WriteUInt32(suitSkillDataCount, Endianness.Big);
            for (int i = 0; i < suitSkillDataCount; i++)
            {
                buffer.WriteByte(SuitSkillData[i]);
            }
            int astrolabeCount = (int)Astrolabe.Count;
            buffer.WriteInt32(astrolabeCount, Endianness.Big);
            for (int i = 0; i < astrolabeCount; i++)
            {
                buffer.WriteByte(Astrolabe[i]);
            }
            int wildHuntCount = (int)WildHunt.Count;
            buffer.WriteInt32(wildHuntCount, Endianness.Big);
            for (int i = 0; i < wildHuntCount; i++)
            {
                buffer.WriteByte(WildHunt[i]);
            }
            int soulStoneCount = (int)SoulStone.Count;
            buffer.WriteInt32(soulStoneCount, Endianness.Big);
            for (int i = 0; i < soulStoneCount; i++)
            {
                buffer.WriteByte(SoulStone[i]);
            }
            int monolopyCount = (int)Monolopy.Count;
            buffer.WriteInt32(monolopyCount, Endianness.Big);
            for (int i = 0; i < monolopyCount; i++)
            {
                buffer.WriteByte(Monolopy[i]);
            }
            int achieveCount = (int)Achieve.Count;
            buffer.WriteInt32(achieveCount, Endianness.Big);
            for (int i = 0; i < achieveCount; i++)
            {
                buffer.WriteByte(Achieve[i]);
            }
            UIOptionInfo.Write(buffer);
            int illustrateCount = (int)Illustrate.Count;
            buffer.WriteInt32(illustrateCount, Endianness.Big);
            for (int i = 0; i < illustrateCount; i++)
            {
                buffer.WriteByte(Illustrate[i]);
            }
            WeaponStyleInfo.Write(buffer);
            int weaponHavenInfoCount = (int)WeaponHavenInfo.Count;
            buffer.WriteInt32(weaponHavenInfoCount, Endianness.Big);
            for (int i = 0; i < weaponHavenInfoCount; i++)
            {
                buffer.WriteByte(WeaponHavenInfo[i]);
            }
            SilverStorageBoxInfo.Write(buffer);
            int guideBookDataCount = (int)GuideBookData.Count;
            buffer.WriteInt32(guideBookDataCount, Endianness.Big);
            for (int i = 0; i < guideBookDataCount; i++)
            {
                buffer.WriteByte(GuideBookData[i]);
            }
            SecretResearchInitData.Write(buffer);
            buffer.WriteInt32(DragonShopBox, Endianness.Big);
            buffer.WriteInt32(CanGetRewarded, Endianness.Big);
        }

    }
}
