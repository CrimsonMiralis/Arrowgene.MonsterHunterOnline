/*
* This file is part of Arrowgene.MonsterHunterOnline
*
* Arrowgene.MonsterHunterOnline is a server implementation for the game "Monster Hunter Online".
* Copyright (C) 2023-2024 "all contributors"
*
* Github: https://github.com/sebastian-heinz/Arrowgene.MonsterHunterOnline
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU Affero General Public License as published
*  by the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU Affero General Public License for more details.
*
*  You should have received a copy of the GNU Affero General Public License
*  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

using System.Collections.Generic;
using Arrowgene.Buffers;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Core;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Enums;

namespace Arrowgene.MonsterHunterOnline.Service.CsProto.Structures
{

    public class C2SXRankBatchGetUserData : IStructure
    {

        public C2SXRankBatchGetUserData()
        {
            Zone = 0;
            Uids = new List<ulong>();
            GetBestRank = 0;
        }

        /// <summary>
        /// 大区，对应xrank服务申请的world id
        /// </summary>
        public int Zone;

        /// <summary>
        /// 用户列表
        /// </summary>
        public List<ulong> Uids;

        /// <summary>
        /// 是否拉取用户世界榜单历史最佳排名
        /// </summary>
        public int GetBestRank;

        public void Write(IBuffer buffer)
        {
            buffer.WriteInt32(Zone, Endianness.Big);
            int uidsCount = (int)Uids.Count;
            buffer.WriteInt32(uidsCount, Endianness.Big);
            for (int i = 0; i < uidsCount; i++)
            {
                buffer.WriteUInt64(Uids[i], Endianness.Big);
            }
            buffer.WriteInt32(GetBestRank, Endianness.Big);
        }

    }
}
