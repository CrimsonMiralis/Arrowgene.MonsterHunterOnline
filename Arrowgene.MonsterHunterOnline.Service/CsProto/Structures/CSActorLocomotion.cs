/*
* This file is part of Arrowgene.MonsterHunterOnline
*
* Arrowgene.MonsterHunterOnline is a server implementation for the game "Monster Hunter Online".
* Copyright (C) 2023-2024 "all contributors"
*
* Github: https://github.com/sebastian-heinz/Arrowgene.MonsterHunterOnline
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU Affero General Public License as published
*  by the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU Affero General Public License for more details.
*
*  You should have received a copy of the GNU Affero General Public License
*  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

using System.Collections.Generic;
using Arrowgene.Buffers;
using Arrowgene.Logging;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Core;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Enums;

namespace Arrowgene.MonsterHunterOnline.Service.CsProto.Structures
{

    /// <summary>
    /// LOCOMOTION同步消息
    /// </summary>
    public class CSActorLocomotion : IStructure
    {
        private static readonly ILogger Logger = LogProvider.Logger(typeof(CSActorLocomotion));

        public CSActorLocomotion()
        {
            NetObjId = 0;
            SyncTime = 0;
            MoveType = 0;
            UserDataF1 = 0.0f;
            UserDataF2 = 0.0f;
            UserDataF3 = 0.0f;
            UserDataF4 = 0.0f;
            UserDataF5 = 0.0f;
            UserDataV1 = new CSVec3();
            UserDataU1 = 0;
            UserDataU2 = 0;
            UserDataI1 = 0;
            UserDataS1 = "";
            UserDataS2 = "";
        }

        /// <summary>
        /// 需要同步的Actor的NetObjId
        /// </summary>
        public uint NetObjId;

        /// <summary>
        /// 同步时间
        /// </summary>
        public long SyncTime;

        /// <summary>
        /// 当前使用的Locomotion运动类型
        /// </summary>
        public int MoveType;

        /// <summary>
        /// float UserData1
        /// </summary>
        public float UserDataF1;

        /// <summary>
        /// float UserData2
        /// </summary>
        public float UserDataF2;

        /// <summary>
        /// float UserData3
        /// </summary>
        public float UserDataF3;

        /// <summary>
        /// float UserData4
        /// </summary>
        public float UserDataF4;

        /// <summary>
        /// float UserData5
        /// </summary>
        public float UserDataF5;

        /// <summary>
        /// vec3 UserData1
        /// </summary>
        public CSVec3 UserDataV1;

        /// <summary>
        /// uint32 UserData1
        /// </summary>
        public uint UserDataU1;

        /// <summary>
        /// uint32 UserData2
        /// </summary>
        public uint UserDataU2;

        /// <summary>
        /// int UserData1
        /// </summary>
        public int UserDataI1;

        /// <summary>
        /// string UserData1
        /// </summary>
        public string UserDataS1;

        /// <summary>
        /// string UserData2
        /// </summary>
        public string UserDataS2;

        public void Write(IBuffer buffer)
        {
            buffer.WriteUInt32(NetObjId, Endianness.Big);
            buffer.WriteInt64(SyncTime, Endianness.Big);
            buffer.WriteInt32(MoveType, Endianness.Big);
            buffer.WriteFloat(UserDataF1, Endianness.Big);
            buffer.WriteFloat(UserDataF2, Endianness.Big);
            buffer.WriteFloat(UserDataF3, Endianness.Big);
            buffer.WriteFloat(UserDataF4, Endianness.Big);
            buffer.WriteFloat(UserDataF5, Endianness.Big);
            UserDataV1.Write(buffer);
            buffer.WriteUInt32(UserDataU1, Endianness.Big);
            buffer.WriteUInt32(UserDataU2, Endianness.Big);
            buffer.WriteInt32(UserDataI1, Endianness.Big);
            buffer.WriteInt32(UserDataS1.Length + 1, Endianness.Big);
            buffer.WriteCString(UserDataS1);
            buffer.WriteInt32(UserDataS2.Length + 1, Endianness.Big);
            buffer.WriteCString(UserDataS2);
        }

        public void Read(IBuffer buffer)
        {
            NetObjId = buffer.ReadUInt32(Endianness.Big);
            SyncTime = buffer.ReadInt64(Endianness.Big);
            MoveType = buffer.ReadInt32(Endianness.Big);
            UserDataF1 = buffer.ReadFloat(Endianness.Big);
            UserDataF2 = buffer.ReadFloat(Endianness.Big);
            UserDataF3 = buffer.ReadFloat(Endianness.Big);
            UserDataF4 = buffer.ReadFloat(Endianness.Big);
            UserDataF5 = buffer.ReadFloat(Endianness.Big);
            UserDataV1.Read(buffer);
            UserDataU1 = buffer.ReadUInt32(Endianness.Big);
            UserDataU2 = buffer.ReadUInt32(Endianness.Big);
            UserDataI1 = buffer.ReadInt32(Endianness.Big);
            int UserDataS1EntryLen = buffer.ReadInt32(Endianness.Big);
            UserDataS1 = buffer.ReadString(UserDataS1EntryLen);
            int UserDataS2EntryLen = buffer.ReadInt32(Endianness.Big);
            UserDataS2 = buffer.ReadString(UserDataS2EntryLen);
        }

    }
}
