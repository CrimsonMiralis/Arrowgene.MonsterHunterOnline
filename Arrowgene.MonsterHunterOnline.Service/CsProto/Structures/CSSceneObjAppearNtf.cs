/*
* This file is part of Arrowgene.MonsterHunterOnline
*
* Arrowgene.MonsterHunterOnline is a server implementation for the game "Monster Hunter Online".
* Copyright (C) 2023-2024 "all contributors"
*
* Github: https://github.com/sebastian-heinz/Arrowgene.MonsterHunterOnline
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU Affero General Public License as published
*  by the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU Affero General Public License for more details.
*
*  You should have received a copy of the GNU Affero General Public License
*  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

using System.Collections.Generic;
using Arrowgene.Buffers;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Core;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Enums;

namespace Arrowgene.MonsterHunterOnline.Service.CsProto.Structures
{

    /// <summary>
    /// sceneobj appear notify
    /// </summary>
    public class CSSceneObjAppearNtf : IStructure
    {

        public CSSceneObjAppearNtf()
        {
            NetID = 0;
            EntityName = "";
            ClassName = "";
            Pose = new CSQuatT();
            SubTypeID = 0;
            Sync2CE = 0;
            SpawnType = 0;
            Bone = 0;
            Holder = 0;
            Owner = 0;
            Faction = 0;
            RegionId = 0;
            UsrData = new List<byte>();
            EntGUID = 0;
            PropertityFile = "";
            MHSpawnType = 0;
            BTState = "";
            BBVars = new CSBBVarList();
            Buff = new List<byte>();
            ParentID = 0;
            ParentGUID = 0;
        }

        /// <summary>
        /// logic entity id
        /// </summary>
        public uint NetID;

        /// <summary>
        /// sceneobj LL name
        /// </summary>
        public string EntityName;

        /// <summary>
        /// sceneobj ce class name
        /// </summary>
        public string ClassName;

        /// <summary>
        /// Appear location
        /// </summary>
        public CSQuatT Pose;

        /// <summary>
        /// scene obj type id, defined by each scene obj
        /// </summary>
        public int SubTypeID;

        /// <summary>
        /// 是否同步生成到CE,0为否,其他为需要
        /// </summary>
        public byte Sync2CE;

        /// <summary>
        /// Spawn类型,0绝对位置,1相对骨骼位置
        /// </summary>
        public byte SpawnType;

        public int Bone;

        /// <summary>
        /// 依附物体NetID
        /// </summary>
        public uint Holder;

        /// <summary>
        /// 物体OwnerNetID
        /// </summary>
        public uint Owner;

        /// <summary>
        /// 阵营
        /// </summary>
        public int Faction;

        /// <summary>
        /// 区域Id
        /// </summary>
        public int RegionId;

        /// <summary>
        /// 用户数据
        /// </summary>
        public List<byte> UsrData;

        /// <summary>
        /// entity guid
        /// </summary>
        public ulong EntGUID;

        /// <summary>
        /// 属性文件的名字
        /// </summary>
        public string PropertityFile;

        /// <summary>
        /// SpawnType
        /// </summary>
        public short MHSpawnType;

        /// <summary>
        /// BT state
        /// </summary>
        public string BTState;

        /// <summary>
        /// Blackboard vars
        /// </summary>
        public CSBBVarList BBVars;

        /// <summary>
        /// Buff数据
        /// </summary>
        public List<byte> Buff;

        /// <summary>
        /// parent entityid
        /// </summary>
        public uint ParentID;

        /// <summary>
        /// parent entityGUID
        /// </summary>
        public ulong ParentGUID;

        public void Write(IBuffer buffer)
        {
            buffer.WriteUInt32(NetID, Endianness.Big);
            buffer.WriteInt32(EntityName.Length + 1, Endianness.Big);
            buffer.WriteCString(EntityName);
            buffer.WriteInt32(ClassName.Length + 1, Endianness.Big);
            buffer.WriteCString(ClassName);
            Pose.Write(buffer);
            buffer.WriteInt32(SubTypeID, Endianness.Big);
            buffer.WriteByte(Sync2CE);
            buffer.WriteByte(SpawnType);
            buffer.WriteInt32(Bone, Endianness.Big);
            buffer.WriteUInt32(Holder, Endianness.Big);
            buffer.WriteUInt32(Owner, Endianness.Big);
            buffer.WriteInt32(Faction, Endianness.Big);
            buffer.WriteInt32(RegionId, Endianness.Big);
            int usrDataCount = (int)UsrData.Count;
            buffer.WriteInt32(usrDataCount, Endianness.Big);
            for (int i = 0; i < usrDataCount; i++)
            {
                buffer.WriteByte(UsrData[i]);
            }
            buffer.WriteUInt64(EntGUID, Endianness.Big);
            buffer.WriteInt32(PropertityFile.Length + 1, Endianness.Big);
            buffer.WriteCString(PropertityFile);
            buffer.WriteInt16(MHSpawnType, Endianness.Big);
            buffer.WriteInt32(BTState.Length + 1, Endianness.Big);
            buffer.WriteCString(BTState);
            BBVars.Write(buffer);
            ushort buffCount = (ushort)Buff.Count;
            buffer.WriteUInt16(buffCount, Endianness.Big);
            for (int i = 0; i < buffCount; i++)
            {
                buffer.WriteByte(Buff[i]);
            }
            buffer.WriteUInt32(ParentID, Endianness.Big);
            buffer.WriteUInt64(ParentGUID, Endianness.Big);
        }

    }
}
