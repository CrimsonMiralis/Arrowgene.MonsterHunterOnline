/*
* This file is part of Arrowgene.MonsterHunterOnline
*
* Arrowgene.MonsterHunterOnline is a server implementation for the game "Monster Hunter Online".
* Copyright (C) 2023-2024 "all contributors"
*
* Github: https://github.com/sebastian-heinz/Arrowgene.MonsterHunterOnline
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU Affero General Public License as published
*  by the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU Affero General Public License for more details.
*
*  You should have received a copy of the GNU Affero General Public License
*  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

using System.Collections.Generic;
using Arrowgene.Buffers;
using Arrowgene.Logging;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Core;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Enums;

namespace Arrowgene.MonsterHunterOnline.Service.CsProto.Structures
{

    public class ScriptActivityDataItem : ScriptActivityDataUnion
    {
        private static readonly ILogger Logger = LogProvider.Logger(typeof(ScriptActivityDataItem));

        public ScriptActivityDataItem()
        {
            ItemID = 0;
            ItemCount = 0;
            BindType = 0;
            OpenType = 0;
            Column = 0;
            Flags = 0;
            CondType = 0;
            CondId = 0;
            CondParam1 = 0;
            CondParam2 = 0;
            CondParam = "";
            GetCountMax = 0;
            Desc = "";
            CondArg1 = "";
            CondArg2 = "";
            RewardItems = new List<ScriptActivityRewardItem>();
        }

        public EScriptActivityDataType Type => EScriptActivityDataType.kScriptActivityDataType_Item;

        /// <summary>
        /// 道具ID
        /// </summary>
        public uint ItemID;

        /// <summary>
        /// 道具数量
        /// </summary>
        public short ItemCount;

        /// <summary>
        /// 绑定类型
        /// </summary>
        public byte BindType;

        /// <summary>
        /// 开启方式
        /// </summary>
        public byte OpenType;

        /// <summary>
        /// 默认栏位
        /// </summary>
        public byte Column;

        /// <summary>
        /// flags
        /// </summary>
        public uint Flags;

        /// <summary>
        /// 条件类型
        /// </summary>
        public byte CondType;

        /// <summary>
        /// 条件ID
        /// </summary>
        public byte CondId;

        /// <summary>
        /// 条件参数1
        /// </summary>
        public int CondParam1;

        /// <summary>
        /// 条件参数2
        /// </summary>
        public int CondParam2;

        /// <summary>
        /// 条件参数
        /// </summary>
        public string CondParam;

        /// <summary>
        /// 最大领取次数 小于0表示不限次数
        /// </summary>
        public short GetCountMax;

        /// <summary>
        /// 描述
        /// </summary>
        public string Desc;

        /// <summary>
        /// 条件参数1
        /// </summary>
        public string CondArg1;

        /// <summary>
        /// 条件参数2
        /// </summary>
        public string CondArg2;

        /// <summary>
        /// 奖励的道具
        /// </summary>
        public List<ScriptActivityRewardItem> RewardItems;

        public void Write(IBuffer buffer)
        {
            buffer.WriteUInt32(ItemID, Endianness.Big);
            buffer.WriteInt16(ItemCount, Endianness.Big);
            buffer.WriteByte(BindType);
            buffer.WriteByte(OpenType);
            buffer.WriteByte(Column);
            buffer.WriteUInt32(Flags, Endianness.Big);
            buffer.WriteByte(CondType);
            buffer.WriteByte(CondId);
            buffer.WriteInt32(CondParam1, Endianness.Big);
            buffer.WriteInt32(CondParam2, Endianness.Big);
            buffer.WriteInt32(CondParam.Length + 1, Endianness.Big);
            buffer.WriteCString(CondParam);
            buffer.WriteInt16(GetCountMax, Endianness.Big);
            buffer.WriteInt32(Desc.Length + 1, Endianness.Big);
            buffer.WriteCString(Desc);
            buffer.WriteInt32(CondArg1.Length + 1, Endianness.Big);
            buffer.WriteCString(CondArg1);
            buffer.WriteInt32(CondArg2.Length + 1, Endianness.Big);
            buffer.WriteCString(CondArg2);
            byte rewardItemsCount = (byte)RewardItems.Count;
            buffer.WriteByte(rewardItemsCount);
            for (int i = 0; i < rewardItemsCount; i++)
            {
                RewardItems[i].Write(buffer);
            }
        }

        public void Read(IBuffer buffer)
        {
            ItemID = buffer.ReadUInt32(Endianness.Big);
            ItemCount = buffer.ReadInt16(Endianness.Big);
            BindType = buffer.ReadByte();
            OpenType = buffer.ReadByte();
            Column = buffer.ReadByte();
            Flags = buffer.ReadUInt32(Endianness.Big);
            CondType = buffer.ReadByte();
            CondId = buffer.ReadByte();
            CondParam1 = buffer.ReadInt32(Endianness.Big);
            CondParam2 = buffer.ReadInt32(Endianness.Big);
            int CondParamEntryLen = buffer.ReadInt32(Endianness.Big);
            CondParam = buffer.ReadString(CondParamEntryLen);
            GetCountMax = buffer.ReadInt16(Endianness.Big);
            int DescEntryLen = buffer.ReadInt32(Endianness.Big);
            Desc = buffer.ReadString(DescEntryLen);
            int CondArg1EntryLen = buffer.ReadInt32(Endianness.Big);
            CondArg1 = buffer.ReadString(CondArg1EntryLen);
            int CondArg2EntryLen = buffer.ReadInt32(Endianness.Big);
            CondArg2 = buffer.ReadString(CondArg2EntryLen);
            RewardItems.Clear();
            byte rewardItemsCount = buffer.ReadByte();
            for (int i = 0; i < rewardItemsCount; i++)
            {
                ScriptActivityRewardItem RewardItemsEntry = new ScriptActivityRewardItem();
                RewardItemsEntry.Read(buffer);
                RewardItems.Add(RewardItemsEntry);
            }
        }

    }
}
