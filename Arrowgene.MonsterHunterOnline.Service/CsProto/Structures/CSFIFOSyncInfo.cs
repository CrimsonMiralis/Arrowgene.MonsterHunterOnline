/*
* This file is part of Arrowgene.MonsterHunterOnline
*
* Arrowgene.MonsterHunterOnline is a server implementation for the game "Monster Hunter Online".
* Copyright (C) 2023-2024 "all contributors"
*
* Github: https://github.com/sebastian-heinz/Arrowgene.MonsterHunterOnline
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU Affero General Public License as published
*  by the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU Affero General Public License for more details.
*
*  You should have received a copy of the GNU Affero General Public License
*  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

using System.Collections.Generic;
using Arrowgene.Buffers;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Core;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Enums;

namespace Arrowgene.MonsterHunterOnline.Service.CsProto.Structures
{

    /// <summary>
    /// FIFO同步信息
    /// </summary>
    public class CSFIFOSyncInfo : IStructure
    {

        public CSFIFOSyncInfo()
        {
            SyncTime = 0;
            Pos = new CSVec3();
            Rot = new CSQuat();
            Rot1 = new CSQuat();
            Rot2 = new CSQuat();
            Type = 0;
            Extension = 0;
            state1 = 0;
            state2 = 0;
            state3 = 0;
            state4 = 0;
            AGState = 0;
            SkillID = 0;
            SkillLevel = 0;
            param = 0;
            paramf = 0.0f;
            AttackRotation = 0.0f;
            sp = 0;
            sta = 0;
        }

        /// <summary>
        /// 同步时间
        /// </summary>
        public long SyncTime;

        /// <summary>
        /// 当前位置
        /// </summary>
        public CSVec3 Pos;

        /// <summary>
        /// 当前方向
        /// </summary>
        public CSQuat Rot;

        /// <summary>
        /// 方向1
        /// </summary>
        public CSQuat Rot1;

        /// <summary>
        /// 方向2
        /// </summary>
        public CSQuat Rot2;

        /// <summary>
        /// 队列种类
        /// </summary>
        public byte Type;

        /// <summary>
        /// 额外信息
        /// </summary>
        public byte Extension;

        /// <summary>
        /// 玩家Stance或者FSM状态
        /// </summary>
        public uint state1;

        /// <summary>
        /// 玩家Stance或者FSM状态
        /// </summary>
        public uint state2;

        /// <summary>
        /// 玩家Stance或者FSM状态
        /// </summary>
        public uint state3;

        /// <summary>
        /// 玩家Stance或者FSM状态
        /// </summary>
        public uint state4;

        /// <summary>
        /// 玩家AG状态
        /// </summary>
        public uint AGState;

        /// <summary>
        /// 玩家SkillID
        /// </summary>
        public uint SkillID;

        /// <summary>
        /// 玩家SkillLevel
        /// </summary>
        public uint SkillLevel;

        /// <summary>
        /// 参数信息
        /// </summary>
        public int param;

        /// <summary>
        /// 浮点参数信息
        /// </summary>
        public float paramf;

        /// <summary>
        /// 攻击转向
        /// </summary>
        public float AttackRotation;

        /// <summary>
        /// 玩家属性
        /// </summary>
        public ushort sp;

        /// <summary>
        /// 玩家属性
        /// </summary>
        public ushort sta;

        public void Write(IBuffer buffer)
        {
            buffer.WriteInt64(SyncTime, Endianness.Big);
            Pos.Write(buffer);
            Rot.Write(buffer);
            Rot1.Write(buffer);
            Rot2.Write(buffer);
            buffer.WriteByte(Type);
            buffer.WriteByte(Extension);
            buffer.WriteUInt32(state1, Endianness.Big);
            buffer.WriteUInt32(state2, Endianness.Big);
            buffer.WriteUInt32(state3, Endianness.Big);
            buffer.WriteUInt32(state4, Endianness.Big);
            buffer.WriteUInt32(AGState, Endianness.Big);
            buffer.WriteUInt32(SkillID, Endianness.Big);
            buffer.WriteUInt32(SkillLevel, Endianness.Big);
            buffer.WriteInt32(param, Endianness.Big);
            buffer.WriteFloat(paramf, Endianness.Big);
            buffer.WriteFloat(AttackRotation, Endianness.Big);
            buffer.WriteUInt16(sp, Endianness.Big);
            buffer.WriteUInt16(sta, Endianness.Big);
        }

    }
}
