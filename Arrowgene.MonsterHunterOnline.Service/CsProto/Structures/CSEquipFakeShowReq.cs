/*
* This file is part of Arrowgene.MonsterHunterOnline
*
* Arrowgene.MonsterHunterOnline is a server implementation for the game "Monster Hunter Online".
* Copyright (C) 2023-2024 "all contributors"
*
* Github: https://github.com/sebastian-heinz/Arrowgene.MonsterHunterOnline
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU Affero General Public License as published
*  by the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU Affero General Public License for more details.
*
*  You should have received a copy of the GNU Affero General Public License
*  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

using System.Collections.Generic;
using Arrowgene.Buffers;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Core;
using Arrowgene.MonsterHunterOnline.Service.CsProto.Enums;

namespace Arrowgene.MonsterHunterOnline.Service.CsProto.Structures
{

    /// <summary>
    /// 装备幻化请求
    /// </summary>
    public class CSEquipFakeShowReq : IStructure
    {

        public CSEquipFakeShowReq()
        {
            EquipCol = new List<int>();
            EquipGrid = new List<int>();
            ReSetFlag = new List<ushort>();
            TargetCol = new List<int>();
            TargetGrid = new List<int>();
        }

        /// <summary>
        /// 装备ID
        /// </summary>
        public List<int> EquipCol;

        /// <summary>
        /// 栏位
        /// </summary>
        public List<int> EquipGrid;

        /// <summary>
        /// 是否清理
        /// </summary>
        public List<ushort> ReSetFlag;

        /// <summary>
        /// 目标栏位
        /// </summary>
        public List<int> TargetCol;

        /// <summary>
        /// 目标格子
        /// </summary>
        public List<int> TargetGrid;

        public void Write(IBuffer buffer)
        {
            int equipColCount = (int)EquipCol.Count;
            buffer.WriteInt32(equipColCount, Endianness.Big);
            for (int i = 0; i < equipColCount; i++)
            {
                buffer.WriteInt32(EquipCol[i], Endianness.Big);
            }
            int equipGridCount = (int)EquipGrid.Count;
            buffer.WriteInt32(equipGridCount, Endianness.Big);
            for (int i = 0; i < equipGridCount; i++)
            {
                buffer.WriteInt32(EquipGrid[i], Endianness.Big);
            }
            int reSetFlagCount = (int)ReSetFlag.Count;
            buffer.WriteInt32(reSetFlagCount, Endianness.Big);
            for (int i = 0; i < reSetFlagCount; i++)
            {
                buffer.WriteUInt16(ReSetFlag[i], Endianness.Big);
            }
            int targetColCount = (int)TargetCol.Count;
            buffer.WriteInt32(targetColCount, Endianness.Big);
            for (int i = 0; i < targetColCount; i++)
            {
                buffer.WriteInt32(TargetCol[i], Endianness.Big);
            }
            int targetGridCount = (int)TargetGrid.Count;
            buffer.WriteInt32(targetGridCount, Endianness.Big);
            for (int i = 0; i < targetGridCount; i++)
            {
                buffer.WriteInt32(TargetGrid[i], Endianness.Big);
            }
        }

    }
}
